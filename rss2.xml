<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Depp Wang&#39;s Blog</title>
    <link>https://depp.wang/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>每个人都需要有自己的哈姆雷特</description>
    <pubDate>Sun, 31 Jan 2021 14:04:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Django 入门笔记</title>
      <link>https://depp.wang/2020/11/17/django-getting-started-notes/</link>
      <guid>https://depp.wang/2020/11/17/django-getting-started-notes/</guid>
      <pubDate>Tue, 17 Nov 2020 17:25:24 GMT</pubDate>
      <description>
      
        &lt;!--学习 Django 前的疑问：--&gt;

&lt;!--1.Django 如何工作的--&gt;
&lt;!--2.Python 的 Django 和 Java 的 SpringBoot 有什么区别--&gt;
&lt;!--3.Django 和 Flask 有什么区别--&gt;

&lt;h2 id=&quot;WSGI&quot;&gt;&lt;a href=&quot;#WSGI&quot; class=&quot;headerlink&quot; title=&quot;WSGI&quot;&gt;&lt;/a&gt;WSGI&lt;/h2&gt;&lt;p&gt;WSGI：（Web Server Gateway Interface，Web 服务端网关接口）。在不借助框架的情况下，直接使用 WSGI 来开发简易服务端。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!--学习 Django 前的疑问：--><!--1.Django 如何工作的--><!--2.Python 的 Django 和 Java 的 SpringBoot 有什么区别--><!--3.Django 和 Flask 有什么区别--><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p>WSGI：（Web Server Gateway Interface，Web 服务端网关接口）。在不借助框架的情况下，直接使用 WSGI 来开发简易服务端。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])  <span class="comment"># 设置 Header</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b'&lt;h1&gt;Hello, web!&lt;/h1&gt;'</span>]  <span class="comment"># 响应内容</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server.py</span></span><br><span class="line"><span class="comment"># 从 wsgiref 模块导入:</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="comment"># 导入我们自己编写的 application 函数:</span></span><br><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> application</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个服务器，IP 地址为空，端口是 8000，处理函数是 application:</span></span><br><span class="line">httpd = make_server(<span class="string">''</span>, <span class="number">8000</span>, application)</span><br><span class="line">print(<span class="string">'Serving HTTP on port 8000...'</span>)</span><br><span class="line"><span class="comment"># 开始监听 HTTP 请求:</span></span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure><p>运行：<code>python3 server.py</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[21:32:30] ~/workspace/demo ❱❱❱ python3 server.py</span><br><span class="line">Serving HTTP on port 8000...</span><br></pre></td></tr></table></figure><p><code>http://localhost:8000/</code></p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-11-16-133323.png" alt="image-20201116213322503"></p><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017806472608512" target="_blank" rel="noopener">WSGI 接口</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017806472608512" target="_blank" rel="noopener">使用 Web 框架</a></li></ul><h2 id="macOS-安装-Django"><a href="#macOS-安装-Django" class="headerlink" title="macOS 安装 Django"></a>macOS 安装 Django</h2><ul><li><a href="https://docs.djangoproject.com/zh-hans/3.1/intro/overview/" target="_blank" rel="noopener">官方中文教程 3.1</a>、<a href="https://docs.djangoproject.com/en/1.11/" target="_blank" rel="noopener">英文教程 1.11</a></li></ul><p>Python 版本与 Django 版本的<a href="https://docs.djangoproject.com/zh-hans/3.1/faq/install/#faq-python-version-support" target="_blank" rel="noopener">关系</a></p><p>安装 Django 1.11，对应 Python2：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo python -m pip install Django</span></span><br></pre></td></tr></table></figure><p>安装最新版 Django 3.1，对应 Python3：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pip install Django</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.djangoproject.com/zh-hans/3.1/intro/install/" target="_blank" rel="noopener">快速安装指南</a></li></ul><p>查看版本：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python -m django --version</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 -m django --version</span></span><br></pre></td></tr></table></figure><h2 id="创建-Django-项目"><a href="#创建-Django-项目" class="headerlink" title="创建 Django 项目"></a>创建 Django 项目</h2><ul><li><a href="https://docs.djangoproject.com/zh-hans/3.1/intro/tutorial01/" target="_blank" rel="noopener">第 1 节：请求和响应</a></li></ul><p>创建一个名为 mysite 的 Django 项目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> django-admin startproject mysite</span></span><br></pre></td></tr></table></figure><p>在没有安装 1.11 版本的 Django 时，提示未找到命令：<code>zsh: command not found: django-admin</code></p><p>解决方式：使用 <code>python3 -m django</code> 替代 <code>django-admin</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m django startproject mysite</span></span><br></pre></td></tr></table></figure><p>原因：运行命令 <code>django-admin startproject mysite</code> 时，系统将去 <code>/usr/local/bin</code> 目录找可执行文件 django-admin，安装 Django 3.1 时，没有自动将可执行文件<code>django-admin</code> <a href="https://zh.wikipedia.org/wiki/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener">软链（符号链接）</a>到 <code>/usr/local/bin</code>，所以直接运行不好使，而使用 <code>python3 -m django</code>，m 含义module，将在 <code>/Library/Frameworks/Python.framework/Versions/3.7</code> 下的site-package 中查找</p><p>的 目录找此命令，找不到。安装 Django 1.11 后，此命令可以使用</p><ul><li>命令关键字：<strong>startproject</strong></li></ul><p>mysite 结构：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py  # 项目管理</span><br><span class="line">    mysite/    # 包名</span><br><span class="line">        __init__.py  # 作为 Python 包的标记</span><br><span class="line">        settings.py  # 项目设置</span><br><span class="line">        urls.py      # 相当于 Spring 的 Controller</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><p>启动项目：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 manage.py runserver</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py runserver 8001</span></span><br></pre></td></tr></table></figure><ul><li>runserver：Django 根据 manage.py 后的参数来启动</li></ul><p>查看是否启动成功：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1:8000/</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//127.0.0.1:8001/</span></span><br></pre></td></tr></table></figure><h2 id="创建投票应用"><a href="#创建投票应用" class="headerlink" title="创建投票应用"></a>创建投票应用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 manage.py startapp polls</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py startapp polls</span></span><br></pre></td></tr></table></figure><ul><li>命令关键字：<strong>startapp</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py  # </span><br><span class="line">    mysite/    # 包名</span><br><span class="line">        __init__.py  # 作为 Python 包的标记</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py      # 相当于 Spring 的 Controller</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br><span class="line">    polls/     # 应用目录</span><br><span class="line">    migrations/  # 存放「迁移」文件</span><br><span class="line">        urls.py</span><br><span class="line">        apps.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apps.py</span></span><br><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PollsConfig</span><span class="params">(AppConfig)</span>:</span></span><br><span class="line">    name = <span class="string">'polls'</span>  <span class="comment"># Python 包名</span></span><br></pre></td></tr></table></figure><h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're at the polls index."</span>)</span><br></pre></td></tr></table></figure><p>Django 3.1</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># polls/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),  <span class="comment"># '' 对应 /polls/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'polls/'</span>, include(<span class="string">'polls.urls'</span>)),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>Django 3.1 path() 第一个参数为 route</li></ul><p>Django 1.11 需要新增 urls.py，path 格式略微不同</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># polls/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.index, name=<span class="string">'index'</span>), <span class="comment"># ^ 表示行的开头，$ 表示行的结束</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^polls/'</span>, include(<span class="string">'polls.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>Django 1.11 path() 第一个参数为 regex</li></ul><p>启动：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 manage.py runsever</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py runsever</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8000</span><span class="regexp">/polls/</span>  <span class="comment"># polls/ 对应 polls.urls</span></span><br><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8001</span><span class="regexp">/polls/</span>  <span class="comment"># polls/ 对应 polls.urls</span></span><br></pre></td></tr></table></figure><h2 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h2><ul><li><a href="https://docs.djangoproject.com/zh-hans/3.1/intro/tutorial02/" target="_blank" rel="noopener">编写你的第一个 Django 应用，第 2 部分</a></li><li><a href="https://docs.djangoproject.com/zh-hans/3.1/topics/db/models/#meta-options" target="_blank" rel="noopener">模型</a></li></ul><p>在 Django 里写一个使用数据库的 Web 应用的第一步是定义模型，Django 遵循 <a href="https://docs.djangoproject.com/zh-hans/3.1/misc/design-philosophies/#dry" target="_blank" rel="noopener">DRY Principle</a>（不要重复地造轮子 Don’t repeat yourself）。Django 默认使用  SQLite 数据库。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite/settings.py</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: BASE_DIR / <span class="string">'db.sqlite3'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># polls/models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)  <span class="comment"># char，最长长度为 200</span></span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)  <span class="comment"># date_time，默认值为 date published?</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)  <span class="comment"># 外键，Choice 关联 Question</span></span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">300</span>)  <span class="comment"># char，最长长度为 200</span></span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>一个 Model（模型）对应一个表，一个 Field 对应一个表字段</p><blockquote><p>Question 为 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/instances/#django.db.models.Model" target="_blank" rel="noopener"><code>django.db.models.Model</code></a> 类的子类，question_text 为 Field 的子类</p></blockquote><p>在 settings.py 中配置我们添加的 polls App</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,  <span class="comment"># PollsConfig 类写在文件 polls/apps.py 中</span></span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="migrate「迁移」"><a href="#migrate「迁移」" class="headerlink" title="migrate「迁移」"></a>migrate「迁移」</h3><p>执行 makemigrations 命令，将根据 models.py 生成一个对数据库修改的记录，称为「迁移」，修改 models.py 后，多次执行，将生成多个「迁移」</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 manage.py makemigrations polls</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py makemigrations polls</span></span><br></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py  # </span><br><span class="line">    mysite/    # 包名</span><br><span class="line">...</span><br><span class="line">    polls/</span><br><span class="line">    migrations/</span><br><span class="line">        <span class="number">0001</span>_initial.py</span><br><span class="line">        <span class="number">0002</span>_auto_20201116_1316.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0001_initial.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>可通过 sqlmigrate 命令查看「迁移」对应的 SQL</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 manage.py sqlmigrate polls 0001</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py sqlmigrate polls 0001</span></span><br></pre></td></tr></table></figure><p>执行迁移文件，相当于执行对应 sql，将更新数据库</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 manage.py migrate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py migrate</span></span><br></pre></td></tr></table></figure><ul><li>数据保存在 db.sqlite3 这个文件中？</li><li>项目启动后，将直接执行对 model 的修改。相当于执行 migrate，但不执行 makemigrations？重启项目不会自动执行 migrate 相关命令（修改了 comment 改为了 artical_comment，直接修改 comment 报错）</li><li>使用 migrate 的好处是？</li></ul><!--需要首先执行一下：`python3 manage.py migrate` 否则将报下面这个错误?--><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(ENV) [18:50:42] ~/workspace/demo-project git(master) ❱❱❱ python manage.py runserver</span><br><span class="line">WARNING:root:[cy_settings] IS_FOR_TESTCASE=True, configcenter setup for testcase</span><br><span class="line">WARNING:root:[cy_settings] IS_FOR_TESTCASE=True, configcenter setup for testcase</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System <span class="keyword">check</span> <span class="keyword">identified</span> <span class="keyword">no</span> issues (<span class="number">0</span> silenced).</span><br><span class="line"></span><br><span class="line">You have <span class="number">13</span> unapplied <span class="keyword">migration</span>(s). Your <span class="keyword">project</span> may <span class="keyword">not</span> <span class="keyword">work</span> properly <span class="keyword">until</span> you <span class="keyword">apply</span> the migrations <span class="keyword">for</span> app(s): <span class="keyword">admin</span>, auth, contenttypes, sessions.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> <span class="keyword">to</span> <span class="keyword">apply</span> them.</span><br></pre></td></tr></table></figure><h2 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h2><p>Admin 为 Django 自带应用，默认在启动时也将启动</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,  </span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,   </span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite/urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>所以使用 <a href="http://localhost:8000/admin/" target="_blank" rel="noopener">http://localhost:8000/admin/</a> 可打开 admin</li></ul><p>创建管理员账号：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 manage.py createsuperuser</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py createsuperuser</span></span><br></pre></td></tr></table></figure><p>在 admin 中显示模型，用于图形化管理模型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># admin.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><ul><li>不用重启</li></ul><p>在视图层使用模型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    output = <span class="string">', '</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure><p><a href="http://localhost:8000/polls/，浏览器输出" target="_blank" rel="noopener">http://localhost:8000/polls/，浏览器输出</a></p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">What<span class="symbol">'s</span> up</span><br></pre></td></tr></table></figure><h2 id="API-Shell"><a href="#API-Shell" class="headerlink" title="API / Shell"></a>API / Shell</h2><ul><li><a href="https://docs.djangoproject.com/zh-hans/3.1/intro/tutorial02/#playing-with-the-api" target="_blank" rel="noopener">初试 API</a></li></ul><p>进入 shell</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 manage.py shell</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python manage.py shell</span></span><br></pre></td></tr></table></figure><p>shell 命令：查、增、改</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from polls.models import Choice, Question</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Question.objects.all()  <span class="comment"># 显示 Question 所有数据</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from django.utils import timezone</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q = Question(question_text=<span class="string">"What's new?"</span>, pub_date=timezone.now())</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.save() <span class="comment"># 插入一条数据</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.id</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.question_text</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.pub_date</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.question_text = <span class="string">"What's up?"</span> <span class="comment"># 修改字段</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.save()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Question.objects.all()</span></span><br></pre></td></tr></table></figure><p>为模型添加自定义方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>) <span class="comment"># 时间小于一天</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure><p>使用自定义方法，shell 命令：查、增、外键</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; from polls.models import Choice, Question</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; Question.objects.all()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; Question.objects.filter(id=<span class="number">1</span>)  <span class="comment"># 根据 id 过滤</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; Question.objects.filter(question_text__startswith=<span class="string">'What'</span>)  <span class="comment"># question_text 匹配开始字符</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; from django.utils import timezone</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; current_year = timezone.now().year</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; Question.objects.get(pub_date__year=current_year) <span class="comment"># 匹配年限</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; Question.objects.get(id=<span class="number">2</span>) <span class="comment"># DoesNotExist</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; Question.objects.get(pk=<span class="number">1</span>) <span class="comment"># primary-key 为 1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; q = Question.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.was_published_recently() <span class="comment"># 间隔年限小于 1 年，True</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.choice_set.all()         <span class="comment"># 跟 q 相关的 Choice 集合</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.choice_set.create(choice_text=<span class="string">'Not much'</span>, votes=<span class="number">0</span>)</span><br><span class="line">&lt;<span class="symbol">Choice:</span> Not much&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.choice_set.create(choice_text=<span class="string">'The sky'</span>, votes=<span class="number">0</span>)</span><br><span class="line">&lt;<span class="symbol">Choice:</span> The sky&gt;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; c = q.choice_set.create(choice_text=<span class="string">'Just hacking again'</span>, votes=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; c.question </span><br><span class="line">&lt;<span class="symbol">Question:</span> What<span class="string">'s up?&gt;         # 3 个 choice 都关联 question</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; Choice.objects.all()</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; q.choice_set.all()</span></span><br><span class="line"><span class="string">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;  # 关联 q 的有 3 个 choice</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; q.choice_set.count()</span></span><br><span class="line"><span class="string">3</span></span><br></pre></td></tr></table></figure><!--解决疑问--><!--1、First Steps；2、The Model Layer；3、The View Layer；4、The Admin-->]]></content:encoded>
      
      <comments>https://depp.wang/2020/11/17/django-getting-started-notes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JVM 启动参数设置</title>
      <link>https://depp.wang/2020/11/10/jvm-startup-options-setting/</link>
      <guid>https://depp.wang/2020/11/10/jvm-startup-options-setting/</guid>
      <pubDate>Tue, 10 Nov 2020 21:48:08 GMT</pubDate>
      <description>
      
        &lt;p&gt;公司项目 jdk 版本为 1.8， JVM 参数是自定义设置的，gradle 中 JVM 配置如下（默认内存为 8 G）：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;applicationDefaultJvmArgs = [&lt;span class=&quot;string&quot;&gt;&quot;-Xms1G&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-Xmx2G&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-Xss256k&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-Djava.awt.headless=true&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-Dfile.encoding=UTF-8&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;string&quot;&gt;&quot;-XX:MetaspaceSize=256M&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-XX:+UseG1GC&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-XX:MaxGCPauseMillis=200&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-XX:G1HeapRegionSize=2M&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;string&quot;&gt;&quot;-XX:+UseStringDeduplication&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-XX:+PrintStringDeduplicationStatistics&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;string&quot;&gt;&quot;-XX:ParallelGCThreads=4&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-XX:ConcGCThreads=2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-XX:MaxDirectMemorySize=1024M&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;string&quot;&gt;&quot;-XX:+PrintGCDetails&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-XX:+PrintGCDateStamps&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-Xloggc:/tmp/gc.log&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-XX:+PrintTenuringDistribution&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;string&quot;&gt;&quot;-XX:+DoEscapeAnalysis&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-XX:+EliminateAllocations&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-Dlogging.config=File:/config/logback.xml&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>公司项目 jdk 版本为 1.8， JVM 参数是自定义设置的，gradle 中 JVM 配置如下（默认内存为 8 G）：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">applicationDefaultJvmArgs = [<span class="string">"-Xms1G"</span>, <span class="string">"-Xmx2G"</span>, <span class="string">"-Xss256k"</span>, <span class="string">"-Djava.awt.headless=true"</span>, <span class="string">"-Dfile.encoding=UTF-8"</span>,</span><br><span class="line">                             <span class="string">"-XX:MetaspaceSize=256M"</span>, <span class="string">"-XX:+UseG1GC"</span>, <span class="string">"-XX:MaxGCPauseMillis=200"</span>, <span class="string">"-XX:G1HeapRegionSize=2M"</span>,</span><br><span class="line">                             <span class="string">"-XX:+UseStringDeduplication"</span>, <span class="string">"-XX:+PrintStringDeduplicationStatistics"</span>,</span><br><span class="line">                             <span class="string">"-XX:ParallelGCThreads=4"</span>, <span class="string">"-XX:ConcGCThreads=2"</span>, <span class="string">"-XX:MaxDirectMemorySize=1024M"</span>,</span><br><span class="line">                             <span class="string">"-XX:+PrintGCDetails"</span>, <span class="string">"-XX:+PrintGCDateStamps"</span>, <span class="string">"-Xloggc:/tmp/gc.log"</span>, <span class="string">"-XX:+PrintTenuringDistribution"</span>,</span><br><span class="line">                             <span class="string">"-XX:+DoEscapeAnalysis"</span>, <span class="string">"-XX:+EliminateAllocations"</span>, <span class="string">"-Dlogging.config=File:/config/logback.xml"</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><p>各个参数的含义：</p><ul><li>-Xms1G：堆的初始内存容量为 1G</li><li>-Xmx2G：堆的最大内存容量为 2G</li><li>-Xss256k：Java 栈的容量为 256K（不区分虚拟机栈和本地方法栈），<a href="https://depp.wang/2020/11/06/customize-global-exception-handler-java/#%E6%B5%8B%E8%AF%95-Error">经测试</a>，此时栈的高度可以达到 1500+</li><li>-Djava.awt.headless=true：java.awt 下的类使用无头模式，<a href="https://stackoverflow.com/questions/41067235/what-is-the-benefit-of-setting-java-awt-headless-true" target="_blank" rel="noopener">跟 GUI 相关</a></li><li>-Dfile.encoding=UTF-8：文件编码为 UTF-8，<a href="https://stackoverflow.com/questions/1006276/what-is-the-default-encoding-of-the-jvm" target="_blank" rel="noopener">不指定时默认使用系统的文件编码</a></li><li>MetaspaceSize=256M：元数据区容量为 256M，默认是-1，即不限制，或者说只受限于本地内存大小</li><li>-XX:+UseG1GC：堆回收使用 G1 垃圾收集器</li><li>-XX:MaxGCPauseMillis=200：G1 参数，GC 发生之前最大停顿时间为 200 ms，这是一个软目标，JVM 将尽最大努力实现</li><li>-XX:+UseStringDeduplication：消除具有相同字符的重复 String 对象</li><li>-XX:+PrintStringDeduplicationStatistics：String 重复数据删除统计分析，相关统计分析将输出到错误控制台</li><li>-XX:ParallelGCThreads=4：G1 参数，垃圾收集器并行阶段使用线程为 4 个，默认值根据 JVM 运行的平台而定</li><li>-XX:ConcGCThreads=2：G1 参数，并发垃圾收集器将使用的线程数为 2 个，默认值根据 JVM 运行的平台而定</li><li>-XX:MaxDirectMemorySize=1024M：最大直接内存为 1024M，默认与 Java 堆最大值（由-Xmx 指定）一致</li><li>-XX:+PrintGCDetails：每次垃圾回收完成后，打印一条带有更多详细信息的长消息</li><li>-XX:+PrintGCDateStamps：发生垃圾回收时，打印相对于 JVM 启动时间的时间戳，默认关闭</li><li>-Xloggc:/tmp/gc.log：将 GC 详细输出记录到指定文件 /tmp/gc.log，</li><li>-XX:+PrintTenuringDistribution：开启可打印任职（存活）年龄信息，默认关闭</li><li>-XX:+DoEscapeAnalysis：关闭<a href="https://stackoverflow.com/questions/771430/escape-analysis-in-java" target="_blank" rel="noopener">转义分析的使用</a>，默认开启</li><li>-XX:+EliminateAllocations：关闭<a href="https://stackoverflow.com/questions/38613390/what-does-the-java-option-xx-eliminateallocations-do" target="_blank" rel="noopener">变量替换优化</a>，默认开启</li><li>-Dlogging.config=File:/config/logback.xml：log 日志使用 config 下的 logback.xml 配置文件</li></ul><p>参数含义来源：</p><ul><li><a href="https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html" target="_blank" rel="noopener">Java HotSpot VM Options</a></li><li><a href="https://weread.qq.com/web/reader/cf1320d071a1a78ecf19254k4e73277021a4e732ced3b55" target="_blank" rel="noopener">3.7.4 垃圾收集器参数总结</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">Java Platform, Standard Edition Tools Reference</a></li></ul><p>查看 <code>-X</code> 开头参数：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -X</span></span><br><span class="line"></span><br><span class="line">    -Xms&lt;size&gt;        set initial Java heap size</span><br><span class="line">    -Xmx&lt;size&gt;        set maximum Java heap size</span><br><span class="line">    -Xss&lt;size&gt;        set java thread stack size</span><br></pre></td></tr></table></figure><p>查看所有 <code>-XX:</code> 开头参数的配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -XX:+PrintFlagsFinal -version</span></span><br></pre></td></tr></table></figure><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>64 位的虚拟机默认使用的就是<code>服务端模式</code>，通过 <code>java -version</code> 可以看出（Server）：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br><span class="line">java version "1.8.0_191"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_191-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)</span><br></pre></td></tr></table></figure><p>JDK 1.8 默认 JVM 参数：初始容量 Xms 128M，最大容量 Xmx 2G，使用 <code>-XX:+UseParallelGC</code>。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -XX:+PrintCommandLineFlags -version</span></span><br><span class="line">-XX:InitialHeapSize=134217728 -XX:MaxHeapSize=2147483648 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC</span><br><span class="line">java version "1.8.0_191"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_191-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)</span><br></pre></td></tr></table></figure><p>根据 <a href="https://www.zhihu.com/question/56344485" target="_blank" rel="noopener">RednaxelaFX</a> 的回答，虽然 jconsole 显示使用 <code>-XX:+UseParallelGC</code> 时，但 jdk 1.8 默认会开启 <code>XX:+UseParallelOldGC</code>。  此时收集器使用 <code>Parallel Scavenge + Parallel Old</code> 组合。</p><p>此种组合适用于注重吞吐量或者处理器资源较为稀缺的场合。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-11-10-072145.jpg" alt="img"></p><p>jdk1.8 可以使用更为先进的收集器 G1（Garbage First），它是 JDK 9 服务端模式默认的垃圾收集器。G1 也是遵循分代收集理论设计，它将内存分为大小相等的独立区域（Region），每个 Region 都可以根据需要，扮演新生代的 Eden 空间、Survivor 空间，或者老年代空间。回收时，不像其他收集器，只针对某个区域，Major GC（新生代）或 Full GC（老年代）或 Full GC（整个堆），而是将多个 Region 组成回收集（Collection Set）进行回收（MixedGC）。</p><p>G1 收集器跟踪每个 Region 里面的垃圾堆积的「价值」大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先列表，再根据用户设定允许的收集停顿时间（MaxGCPauseMillis），优先处理回收价值收益最大的那些 Region，这也就是 「Garbage First」名字的由来。回收时，不追求一次把 Java 堆全部清理干净，而是追求能够应付应用的内存分配速率（Allocation Rate），只要收集的速度能跟得上对象分配的速度就行。</p><p>G1 相比 <code>Parallel Scavenge + Parallel Old</code> 组合的最大优点：可以指定最大收集停顿时间来调节。</p><h2 id="Maven-项目如何使用这些参数"><a href="#Maven-项目如何使用这些参数" class="headerlink" title="Maven 项目如何使用这些参数"></a>Maven 项目如何使用这些参数</h2><p>利用 Maven Wrapper，在 <code>.mvn/jvm.config</code> 中配置：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">-Xms1G -Xmx2G -Xss256k -Djava.awt.<span class="attribute">headless</span>=<span class="literal">true</span> -Dfile.<span class="attribute">encoding</span>=UTF-8 -XX:<span class="attribute">MetaspaceSize</span>=256M -XX:+UseG1GC -XX:<span class="attribute">MaxGCPauseMillis</span>=200 <span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p>打包时使用 <code>mvnw</code> 命令，如：<code>mvnw clean package</code></p><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="http://alvinalexander.com/blog/post/java/java-xmx-xms-memory-heap-size-control/" target="_blank" rel="noopener">How to control Java heap size (memory) allocation (xmx, xms)</a></li><li><a href="https://www.cnblogs.com/grey-wolf/p/9217497.html" target="_blank" rel="noopener">查看 JVM 使用的默认的垃圾收集器</a></li><li><a href="https://dzone.com/articles/usestringdeduplication" target="_blank" rel="noopener">UseStringDeduplication: Pros and Cons</a></li><li><a href="http://www.herongyang.com/JVM/Memory-PrintGCDetails-Garbage-Collection-Logging.html" target="_blank" rel="noopener">“-XX:+PrintGCDetails” - Garbage Collection Logging</a></li><li><a href="https://www.logicbig.com/how-to/java-command/jvm-option-list.html" target="_blank" rel="noopener">Java - Print list of all -XX JVM options</a></li><li><a href="https://docs.oracle.com/cd/E26576_01/doc.312/e24938/list-jvm-options.htm#GSRFM00180" target="_blank" rel="noopener">list-jvm-options</a></li><li><a href="https://geekflare.com/important-jvm-options/" target="_blank" rel="noopener">10 Important JVM Options for Production JAVA Application System</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/11/10/jvm-startup-options-setting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java 中的 TreeSet</title>
      <link>https://depp.wang/2020/11/07/treeset-in-java/</link>
      <guid>https://depp.wang/2020/11/07/treeset-in-java/</guid>
      <pubDate>Sat, 07 Nov 2020 22:16:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;TreeSet 是一种可有序存放元素的集合，HashSet 是 value 为固定值的 HashMap，TreeSet 是 value 为固定值得 TreeMap。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>TreeSet 是一种可有序存放元素的集合，HashSet 是 value 为固定值的 HashMap，TreeSet 是 value 为固定值得 TreeMap。</p><a id="more"></a><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       ┌───┐</span><br><span class="line">       │Map│</span><br><span class="line">       └───┘</span><br><span class="line">         ▲</span><br><span class="line">    ┌────┴─────┐</span><br><span class="line">    │          │</span><br><span class="line">┌───────┐ ┌─────────┐</span><br><span class="line">│HashMap│ │SortedMap│</span><br><span class="line">└───────┘ └─────────┘</span><br><span class="line">               ▲</span><br><span class="line">               │</span><br><span class="line">          ┌─────────┐</span><br><span class="line">          │ TreeMap │</span><br><span class="line">          └─────────┘</span><br></pre></td></tr></table></figure><p>HashMap 利用了 hashCode，TreeMap 则利用了树，一个二叉树。</p><p><img src="https://contribute.geeksforgeeks.org/wp-content/uploads/Treemap3-5.png" alt="Treemap Internal Working"></p><h2 id="比较-Key"><a href="#比较-Key" class="headerlink" title="比较 Key"></a>比较 Key</h2><p>TreeMap 的有序通过比较 key 来实现，无法利用 hashCode 来比较，它需要有一个比较 key 的规则。可通过 Key 继承 Comparable 接口或设置 Comparator 来提供。</p><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Integer anotherInteger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compare(<span class="keyword">this</span>.value, anotherInteger.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据元素大小比较，-1 小于 anotherInteger，0 等于，1 大于</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> v1[] = value;</span><br><span class="line">        <span class="keyword">byte</span> v2[] = anotherString.value;</span><br><span class="line">        <span class="keyword">if</span> (coder() == anotherString.coder()) &#123;</span><br><span class="line">            <span class="keyword">return</span> isLatin1() ? StringLatin1.compareTo(v1, v2)</span><br><span class="line">                              : StringUTF16.compareTo(v1, v2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isLatin1() ? StringLatin1.compareToUTF16(v1, v2)</span><br><span class="line">                          : StringUTF16.compareToLatin1(v1, v2);</span><br><span class="line">     &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringLatin1</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(<span class="keyword">byte</span>[] value, <span class="keyword">byte</span>[] other, <span class="keyword">int</span> len1, <span class="keyword">int</span> len2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只比较短的部分</span></span><br><span class="line">        <span class="keyword">int</span> lim = Math.min(len1, len2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; lim; k++) &#123;</span><br><span class="line">            <span class="comment">// 返回不同的字符的 assic 差值</span></span><br><span class="line">            <span class="keyword">if</span> (value[k] != other[k]) &#123;</span><br><span class="line">                <span class="keyword">return</span> getChar(value, k) - getChar(other, k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当短部分都相同时，比较长度</span></span><br><span class="line">        <span class="keyword">return</span> len1 - len2;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">getChar</span><span class="params">(<span class="keyword">byte</span>[] val, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>)(val[index] &amp; <span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><p><strong>使用 Comparator</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A class to represent a student. </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> rollno; </span><br><span class="line">    String name, address; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Constructor </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> rollno, String name, </span></span></span><br><span class="line"><span class="function"><span class="params">                   String address)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.rollno = rollno; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">        <span class="keyword">this</span>.address = address; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Used to print student details </span></span><br><span class="line">    <span class="comment">// in main() </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rollno + <span class="string">" "</span></span><br><span class="line">            + <span class="keyword">this</span>.name + <span class="string">" "</span></span><br><span class="line">            + <span class="keyword">this</span>.address; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Comparator implementattion </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sortbyroll</span> </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123; </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Used for sorting in ascending order of </span></span><br><span class="line">    <span class="comment">// roll number </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student a, Student b)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> a.rollno - b.rollno; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapImplementation</span> </span>&#123; </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Example2ndConstructor</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="comment">// Creating an empty TreeMap </span></span><br><span class="line">        TreeMap&lt;Student, Integer&gt; tree_map </span><br><span class="line">            = <span class="keyword">new</span> TreeMap&lt;Student, Integer&gt;(<span class="keyword">new</span> Sortbyroll()); </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Mapping string values to int keys </span></span><br><span class="line">        tree_map.put(<span class="keyword">new</span> Student(<span class="number">111</span>, <span class="string">"bbbb"</span>, </span><br><span class="line">                                 <span class="string">"london"</span>), </span><br><span class="line">                     <span class="number">2</span>); </span><br><span class="line">        tree_map.put(<span class="keyword">new</span> Student(<span class="number">131</span>, <span class="string">"aaaa"</span>, </span><br><span class="line">                                 <span class="string">"nyc"</span>), </span><br><span class="line">                     <span class="number">3</span>); </span><br><span class="line">        tree_map.put(<span class="keyword">new</span> Student(<span class="number">121</span>, <span class="string">"cccc"</span>, </span><br><span class="line">                                 <span class="string">"jaipur"</span>), </span><br><span class="line">                     <span class="number">1</span>); </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Displaying the TreeMap </span></span><br><span class="line">        System.out.println(<span class="string">"TreeMap: "</span></span><br><span class="line">                           + tree_map); </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">"TreeMap using "</span></span><br><span class="line">                           + <span class="string">"TreeMap(Comparator)"</span></span><br><span class="line">                           + <span class="string">" constructor:\n"</span>); </span><br><span class="line">        Example2ndConstructor(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TreeMap using TreeMap(Comparator) constructor:</span><br><span class="line"></span><br><span class="line">TreeMap: &#123;121 cccc jaipur=1, 131 aaaa nyc=3, 141 bbbb london=2&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 Comparable</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rollno;</span><br><span class="line">    String name, address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> rollno, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                   String address)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rollno = rollno;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student anotherStudent)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rollno - anotherStudent.rollno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used to print student details</span></span><br><span class="line">    <span class="comment">// in main()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.rollno + <span class="string">" "</span></span><br><span class="line">                + <span class="keyword">this</span>.name + <span class="string">" "</span></span><br><span class="line">                + <span class="keyword">this</span>.address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何排序"><a href="#如何排序" class="headerlink" title="如何排序"></a>如何排序</h2><p>添加时，跟 root 节点比较，小于放到左边，大于放到右边。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; t = root;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">        compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line"></span><br><span class="line">        root = <span class="keyword">new</span> Entry&lt;&gt;(key, value, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cmp;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">    <span class="comment">// 如果构造函数设置了 comparator，cpr 将不为 null</span></span><br><span class="line">    Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;</span><br><span class="line">    <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = cpr.compare(key, t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// 获取 key 的 Comparable</span></span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = k.compareTo(t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;&gt;(key, value, parent);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">        parent.left = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        parent.right = e;</span><br><span class="line">    fixAfterInsertion(e);</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>针对二叉树，4 层的总节点：2^0^ + 2^1^ +  2^2^ + 2^3^  -&gt; 2^4^，如果树节点数为 n，树的高度为 log(n)。</p><p>所以 TreeMap 的查找和新增时间复杂度为 O(log(n))。</p><h2 id="vs-LinkedHashMap"><a href="#vs-LinkedHashMap" class="headerlink" title="vs LinkedHashMap"></a>vs LinkedHashMap</h2><p>LinkedHashMap 使用一个额外双向链表，记录插入顺序，所以它是根据插入顺序排序。</p><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265117109276544" target="_blank" rel="noopener">使用 TreeMap</a></li><li><a href="https://www.geeksforgeeks.org/treemap-in-java/" target="_blank" rel="noopener">TreeMap in Java</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/11/07/treeset-in-java/#disqus_thread</comments>
    </item>
    
    <item>
      <title>自定义全局异常处理器（Java）</title>
      <link>https://depp.wang/2020/11/06/customize-global-exception-handler-java/</link>
      <guid>https://depp.wang/2020/11/06/customize-global-exception-handler-java/</guid>
      <pubDate>Fri, 06 Nov 2020 20:48:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;正常业务系统中，当前后端分离时，系统即使有未知异常，也要保证接口能返回错误提示，也需要根据业务规则制定相应的异常状态码和异常提示。所以需要一个全局异常处理器。相关代码：&lt;a href=&quot;https://github.com/DeppWang/springboot-demos/tree/master/springboot-exception&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>正常业务系统中，当前后端分离时，系统即使有未知异常，也要保证接口能返回错误提示，也需要根据业务规则制定相应的异常状态码和异常提示。所以需要一个全局异常处理器。相关代码：<a href="https://github.com/DeppWang/springboot-demos/tree/master/springboot-exception" target="_blank" rel="noopener">GitHub</a></p><a id="more"></a><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>下面是 Java 异常继承图：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                     ┌───────────┐</span><br><span class="line">                     │  Object   │</span><br><span class="line">                     └───────────┘</span><br><span class="line">                           ▲</span><br><span class="line">                           │</span><br><span class="line">                     ┌───────────┐</span><br><span class="line">                     │ Throwable │</span><br><span class="line">                     └───────────┘</span><br><span class="line">                           ▲</span><br><span class="line">                 ┌─────────┴─────────┐</span><br><span class="line">                 │                   │</span><br><span class="line">           ┌───────────┐       ┌───────────┐</span><br><span class="line">           │   Error   │       │ Exception │</span><br><span class="line">           └───────────┘       └───────────┘</span><br><span class="line">                 ▲                   ▲</span><br><span class="line">         ┌───────┘              ┌────┴──────────┐</span><br><span class="line">         │                      │               │</span><br><span class="line">┌─────────────────┐    ┌─────────────────┐┌───────────┐</span><br><span class="line">│OutOfMemoryError │... │RuntimeException ││IOException│...</span><br><span class="line">└─────────────────┘    └─────────────────┘└───────────┘</span><br><span class="line">                                ▲</span><br><span class="line">                    ┌───────────┴─────────────┐</span><br><span class="line">                    │                         │</span><br><span class="line">         ┌─────────────────────┐ ┌─────────────────────────┐</span><br><span class="line">         │NullPointerException │ │IllegalArgumentException │...</span><br><span class="line">         └─────────────────────┘ └─────────────────────────┘</span><br></pre></td></tr></table></figure><p>根据编译时是否需要捕获，异常可以分为两类：1、写代码时，编译器规定必须捕获的异常，不捕获将报错；2、（抛出后）不必须捕获的异常，编译器对此类异常不做处理。</p><ul><li><p>必须捕获的异常：Exception 以及 Exception 除去 RuntimeException 的子类。</p></li><li><p>不必须捕获的异常：Error 以及 Error 的子类；RuntimeException 以及 RuntimeException 的子类。</p></li></ul><p>必须捕获的异常：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testThrowIOException"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">testThrowIOException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    testThrowIOException(); <span class="comment">// 将报错</span></span><br><span class="line">    <span class="keyword">return</span> ApiResponse.success();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">throwIOException</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testThrowIOException"</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不必须捕获的异常：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testThrowRuntimeException"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">testThrowRuntimeException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    throwRuntimeException(); <span class="comment">// 不报错</span></span><br><span class="line">    <span class="keyword">return</span> ApiResponse.success();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">throwRuntimeException</span><span class="params">()</span> </span>&#123; <span class="comment">// 无需 throws</span></span><br><span class="line">    System.out.println(<span class="string">"testThrowRuntimeException"</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过在运行时，任何异常都可以进行捕获处理，避免接口没有返回值的情况。</p><h3 id="抛异常"><a href="#抛异常" class="headerlink" title="抛异常"></a>抛异常</h3><p>常见异常处理方式有两种，1、捕获后处理，2、抛出。抛出也分为捕获后抛出和直接抛出。</p><p>当本身没有异常，却使用 throws 抛出异常时，此时相当于没有抛异常（将拦截不到异常）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testThrowIOException2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">testThrowIOException2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    throwIOException2();</span><br><span class="line">    <span class="keyword">return</span> ApiResponse.success();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">throwIOException2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testThrowIOException"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印异常"><a href="#打印异常" class="headerlink" title="打印异常"></a>打印异常</h3><p>打印异常可以使用 <a href="https://depp.wang/2020/10/30/logback-use-summary/">Logback</a> 打印，其相关方法的使用： <code>log.error(e.getMessage(), e);</code> 相当于下面这两条语句：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(e.getMessage()); <span class="comment">// 打印异常信息</span></span><br><span class="line">e.printStackTrace(); <span class="comment">// 打印异常调用栈</span></span><br></pre></td></tr></table></figure><p>减少 NullPointException 的方式是设置默认值。</p><h3 id="测试-Error"><a href="#测试-Error" class="headerlink" title="测试 Error"></a>测试 Error</h3><p><strong>测试 StackOverflowError</strong>，设置栈的大小为 256K，IDEA（VM options）： -Xss256k；命令行：<code>java -Xss256k JavaVMStackSOF</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JavaVMStackSOF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stackLength++;</span><br><span class="line">        stackLeak();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        JavaVMStackSOF oom = <span class="keyword">new</span> JavaVMStackSOF();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oom.stackLeak();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"stack length:"</span> + oom.stackLength);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stack length:1693</span><br><span class="line">Exception in thread "main" java.lang.StackOverflowError</span><br><span class="line">at wang.depp.exception.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:10)</span><br><span class="line">at wang.depp.exception.JavaVMStackSOF.stackLeak(JavaVMStackSOF.java:11)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>测试 OutOfMemoryError</strong>，设置 Java 堆的大小为 128M，IDEA（VM options）：-Xms10M -Xmx10M；命令行：<code>java -Xms10M -Xmx10M wang.depp.exception.HeapOOM</code>（如果类中包含 package 路径，需 cd 到 <code>java</code> 目录后运行此命令）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.depp.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> OOMObject());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at java.base/java.util.Arrays.copyOf(Arrays.java:3720)</span><br><span class="line">at java.base/java.util.Arrays.copyOf(Arrays.java:3689)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h2><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>自定义异常从 RuntimeException 派生，构造方法使用 <code>super(message);</code> 和 <code>super(message, cause);</code>。添加状态码和参数属性。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code; <span class="comment">// 状态码</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object[] args; <span class="comment">// 参数</span></span><br><span class="line">    <span class="keyword">private</span> IResponseEnum responseEnum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseException</span><span class="params">(IResponseEnum iResponseEnum, Object[] args, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code = iResponseEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.responseEnum = iResponseEnum;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseException</span><span class="params">(IResponseEnum iResponseEnum, Object[] args, String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">        <span class="keyword">this</span>.code = iResponseEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.responseEnum = iResponseEnum;</span><br><span class="line">        <span class="keyword">this</span>.args = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] getArgs() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IResponseEnum <span class="title">getResponseEnum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.responseEnum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前服务的业务异常不用每个单独作为一个异常类，可通过 message 和 code 来做一个区分。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoanException</span> <span class="keyword">extends</span> <span class="title">BusinessException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoanException INTERNAL_ERROR = <span class="keyword">new</span> LoanException(ResponseEnum.SERVER_ERROR);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoanException REJECT = <span class="keyword">new</span> LoanException(ResponseEnum.REJECT);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoanException BAND_FAIL = <span class="keyword">new</span> LoanException(ResponseEnum.BAND_FAIL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoanException FORBIDDEN = <span class="keyword">new</span> LoanException(ResponseEnum.FORBIDDEN);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoanException DB_OPTIMISTIC_LOCK = <span class="keyword">new</span> LoanException(ResponseEnum.DB_OPTIMISTIC_LOCK);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoanException</span><span class="params">(IResponseEnum responseEnum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(responseEnum, <span class="keyword">null</span>, responseEnum.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoanException</span><span class="params">(IResponseEnum responseEnum, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(responseEnum, <span class="keyword">null</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testLoanException"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiResponse&lt;Void&gt; <span class="title">testLoanException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> LoanException.REJECT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为不同的业务错误场景设置相关枚举类型（状态码、错误提示）。为枚举添加可断言判断抛出异常功能。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Assert</span> </span>&#123;</span><br><span class="line">    <span class="function">BaseException <span class="title">newException</span><span class="params">(Object... var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">BaseException <span class="title">newException</span><span class="params">(Throwable var1, Object... var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">assertNotNull</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">this</span>.newException((Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">assertNotNull</span><span class="params">(Object obj, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">this</span>.newException(args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">assertTrue</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">this</span>.newException((Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">assertTrue</span><span class="params">(<span class="keyword">boolean</span> flag, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">this</span>.newException((Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BusinessExceptionAssert</span> <span class="keyword">extends</span> <span class="title">IResponseEnum</span>, <span class="title">Assert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> BaseException <span class="title">newException</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">        String msg = MessageFormat.format(<span class="keyword">this</span>.getMessage(), args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BusinessException(<span class="keyword">this</span>, args, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> BaseException <span class="title">newException</span><span class="params">(Throwable t, Object... args)</span> </span>&#123;</span><br><span class="line">        String msg = MessageFormat.format(<span class="keyword">this</span>.getMessage(), args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BusinessException(<span class="keyword">this</span>, args, msg, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ResponseEnum implements BusinessExceptionAssert &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">111000</span>,<span class="string">"success"</span>),</span><br><span class="line">    PARAM_VALID_ERROR(<span class="number">111001</span>,<span class="string">"param check error."</span>),</span><br><span class="line">    SERVER_ERROR(<span class="number">111002</span>,<span class="string">"server error."</span>),</span><br><span class="line">    LOGIN_ERROR(<span class="number">111003</span>,<span class="string">"login error"</span>),</span><br><span class="line">    UNAUTHORIZED(<span class="number">111004</span>, <span class="string">"unauthorized"</span>),</span><br><span class="line">    SERVICE_ERROR(<span class="number">111005</span>,<span class="string">"service error."</span>),</span><br><span class="line">    FORBIDDEN(<span class="number">114003</span>, <span class="string">"forbidden"</span>),</span><br><span class="line">    TIMEOUT(<span class="number">114000</span>, <span class="string">"timeout"</span>),</span><br><span class="line">    REJECT(<span class="number">114001</span>, <span class="string">"reject"</span>),</span><br><span class="line">    EMAIL_CONFLICT(<span class="number">114002</span>, <span class="string">"email conflict"</span>),</span><br><span class="line">    EMAIL_VERIFY_FAIL(<span class="number">114004</span>, <span class="string">"email verify fail"</span>),</span><br><span class="line">    DB_OPTIMISTIC_LOCK(<span class="number">114008</span>, <span class="string">"update fail"</span>),<span class="comment">// 数据库乐观锁</span></span><br><span class="line">    EMAIL_SEND_FAIL(<span class="number">114011</span>, <span class="string">"email send fail"</span>),</span><br><span class="line">    DATA_NOT_FOUND(<span class="number">114012</span>, <span class="string">"data not found"</span>),</span><br><span class="line">    LOGIN_TOKEN_VERIFY_FAIL(<span class="number">114014</span>, <span class="string">"login token verify fail"</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title">test</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    ResponseEnum.SERVICE_ERROR.assertNotNull(value);</span><br><span class="line">    <span class="keyword">return</span> ApiResponse.success(<span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局异常管理器"><a href="#全局异常管理器" class="headerlink" title="全局异常管理器"></a>全局异常管理器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String ENV_PROD = <span class="string">"production"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;env&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String profile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = BusinessException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title">handleBusinessException</span><span class="params">(BaseException e)</span> </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        log.error(<span class="string">"BusinessException"</span>);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.fail(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非错误编码类系统异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = SystemException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title">handleBaseException</span><span class="params">(SystemException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServerErrorApiResponse(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Controller 上一层相关异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;NoHandlerFoundException.class,</span><br><span class="line">            HttpRequestMethodNotSupportedException.class,</span><br><span class="line">            HttpMediaTypeNotSupportedException.class,</span><br><span class="line">            MissingPathVariableException.class,</span><br><span class="line">            MissingServletRequestParameterException.class,</span><br><span class="line">            TypeMismatchException.class,</span><br><span class="line">            HttpMessageNotReadableException.class,</span><br><span class="line">            HttpMessageNotWritableException.class,</span><br><span class="line">            <span class="comment">// BindException.class,</span></span><br><span class="line">            <span class="comment">// MethodArgumentNotValidException.class</span></span><br><span class="line">            HttpMediaTypeNotAcceptableException.class,</span><br><span class="line">            ServletRequestBindingException.class,</span><br><span class="line">            ConversionNotSupportedException.class,</span><br><span class="line">            MissingServletRequestPartException.class,</span><br><span class="line">            AsyncRequestTimeoutException.class</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title">handleServletException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServerErrorApiResponse(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未定义异常。相当于全局异常捕获处理器。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 异常结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServerErrorApiResponse(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiResponse&lt;String&gt; <span class="title">getServerErrorApiResponse</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> code = ResponseEnum.SERVER_ERROR.getCode();</span><br><span class="line">        String productShowMessage = ResponseEnum.SERVER_ERROR.getMessage();</span><br><span class="line">        <span class="keyword">if</span> (ENV_PROD.equals(profile)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ApiResponse.fail(code, productShowMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.fail(code, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>@ControllerAdvice</code> + <code>@ExceptionHandler</code> 实现对指定异常的捕获。此时运行时异常和 Error 也能被捕获。</p><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264734349295520" target="_blank" rel="noopener">Java 的异常</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/11/06/customize-global-exception-handler-java/#disqus_thread</comments>
    </item>
    
    <item>
      <title>GitHub Open Feign  使用总结</title>
      <link>https://depp.wang/2020/11/02/github-open-feign-use-summary/</link>
      <guid>https://depp.wang/2020/11/02/github-open-feign-use-summary/</guid>
      <pubDate>Mon, 02 Nov 2020 20:48:37 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://depp.wang/2020/11/02/github-open-feign-use-summary/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公司项目目前使用 SOA 架构（&lt;a href=&quot;https://en.wikipedia.org/wiki/Service-oriented_architecture&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Service-oriented architecture&lt;/a&gt;：服务导向架构），每个服务作为一个单体对外提供接口，服务之间使用 &lt;a href=&quot;https://github.com/OpenFeign/feign&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub OpenFeign&lt;/a&gt;  调用接口。&lt;/p&gt;
&lt;p&gt;服务提供者正常提供接口，把需要暴露的接口封装为一个 client jar 包，服务调用者正常引入 jar 包，直接调用 jar 方法即可调用服务提供者接口。此文相关&lt;a href=&quot;https://github.com/DeppWang/springboot-demos/tree/master/springboot-openfeign&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代码示例&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p><a href="https://depp.wang/2020/11/02/github-open-feign-use-summary/">原文地址</a></p></blockquote><p>公司项目目前使用 SOA 架构（<a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank" rel="noopener">Service-oriented architecture</a>：服务导向架构），每个服务作为一个单体对外提供接口，服务之间使用 <a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">GitHub OpenFeign</a>  调用接口。</p><p>服务提供者正常提供接口，把需要暴露的接口封装为一个 client jar 包，服务调用者正常引入 jar 包，直接调用 jar 方法即可调用服务提供者接口。此文相关<a href="https://github.com/DeppWang/springboot-demos/tree/master/springboot-openfeign" target="_blank" rel="noopener">代码示例</a></p><a id="more"></a><h2 id="Provider-Api"><a href="#Provider-Api" class="headerlink" title="Provider Api"></a>Provider Api</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/signin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">doSignin</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (username.equals(<span class="string">""</span>) &amp;&amp; password.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ApiResponse.fail(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Provider-Client"><a href="#Provider-Client" class="headerlink" title="Provider Client"></a>Provider Client</h2><p>ProviderClientBuilder</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderClientBuilder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;provider.domain&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> String providerDomain;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;provider.socketTimeout:60000&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> socketTimeout;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;provider.connectTimeout:10000&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> connectTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserApi <span class="title">buildProviderApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Preconditions.checkArgument(StringUtils.isNotBlank(providerDomain));</span><br><span class="line">        <span class="keyword">return</span> Feign.builder()</span><br><span class="line">                .decoder(<span class="keyword">new</span> GsonDecoder())</span><br><span class="line">                .encoder(<span class="keyword">new</span> FormEncoder())</span><br><span class="line">                .logger(<span class="keyword">new</span> Slf4jLogger(UserApi.class))</span><br><span class="line">                .retryer(Retryer.NEVER_RETRY)</span><br><span class="line">                .logLevel(Logger.Level.FULL)</span><br><span class="line">                .client(<span class="keyword">new</span> AccessTraceHttpClient(httpClient(), requestConfig()))</span><br><span class="line">                .target(UserApi.class, providerDomain);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserApi</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Headers</span>(<span class="string">"Content-Type: application/x-www-form-urlencoded"</span>) <span class="comment">// 请求的编码格式为 application/x-www-form-urlencoded</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"POST /signin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">signin</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username, @<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /status/version"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;String&gt; <span class="title">statusVersion</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Consumer-Api"><a href="#Consumer-Api" class="headerlink" title="Consumer Api"></a>Consumer Api</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wang.depp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>provider-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserApi userApi;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/signin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiResponse&lt;Void&gt; <span class="title">signin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userApi.signin(<span class="string">"admin"</span>,<span class="string">"admin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"wang.depp"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApiApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(ConsumerApiApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProviderClientBuilder 为配置类，当 Provider 和 Consumer 的 package 路径不同时，需要指定包扫描路径，使引入包配置类在容器启动时就能加载到容器。</p><p>application.properties 配置提供方 domain。可通过配置文件为不同环境配置不同的服务提供者 domain</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="meta">provider.demain</span>=<span class="string">http://localhost:8080/ # 完整书写，不能是 localhost:8080</span></span><br><span class="line"><span class="meta">provider.socketTimeout</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">provider.connectTimeout</span>=<span class="string">10000</span></span><br></pre></td></tr></table></figure><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><p>1、java.lang.IllegalArgumentException: target values must be absolute.</p><ul><li>读取配置文件的配置出了问题，如：provider-api 的 domain 没写全；或命名错误，没有读取到<!--Service 参数问题，没有获取到具体数据，还为 `${*}`--></li></ul><p>2、Caused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $</p><ul><li>**Api 和 Controller 方法的返回值类型对不上，比如：Provider Api 的拦截器给 ApiResponse 又包装了一层 ApiResponse</li></ul><p>3、接收参数不能直接为 Date</p><ul><li>因为使用 <code>application/x-www-form-urlencoded</code> 传输时将参数使用 &amp;&amp; 链接到一起，此时可以认为是 String 类型，Date 类型不能接受 String 类型参数</li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/11/02/github-open-feign-use-summary/#disqus_thread</comments>
    </item>
    
    <item>
      <title>搭建 Maven 仓库</title>
      <link>https://depp.wang/2020/11/02/build-a-maven-repository/</link>
      <guid>https://depp.wang/2020/11/02/build-a-maven-repository/</guid>
      <pubDate>Mon, 02 Nov 2020 20:48:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;如果 jar 包在本地，只能每次手动导入，不太方便。可以使用以下方式搭建一个 Maven 仓库&lt;/p&gt;
&lt;h2 id=&quot;1、使用-GitHub-Pages-搭建公有仓库&quot;&gt;&lt;a href=&quot;#1、使用-GitHub-Pages-搭建公有仓库&quot; class=&quot;headerlink&quot; title=&quot;1、使用 GitHub Pages 搭建公有仓库&quot;&gt;&lt;/a&gt;1、使用 GitHub Pages 搭建公有仓库&lt;/h2&gt;&lt;p&gt;jar 包本质上是一个静态文件，所以可以使用 GitHub 来存放，再利用 GitHub Pages 提供一个地址让其可直接访问下载。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>如果 jar 包在本地，只能每次手动导入，不太方便。可以使用以下方式搭建一个 Maven 仓库</p><h2 id="1、使用-GitHub-Pages-搭建公有仓库"><a href="#1、使用-GitHub-Pages-搭建公有仓库" class="headerlink" title="1、使用 GitHub Pages 搭建公有仓库"></a>1、使用 GitHub Pages 搭建公有仓库</h2><p>jar 包本质上是一个静态文件，所以可以使用 GitHub 来存放，再利用 GitHub Pages 提供一个地址让其可直接访问下载。</p><a id="more"></a><h3 id="jar-发布方"><a href="#jar-发布方" class="headerlink" title="jar 发布方"></a>jar 发布方</h3><p>pom.xml 配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wang.depp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>substruction-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>substruction-common<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Substruction common jar<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>local-repo-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>GitHub Release<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;project.basedir&#125;/maven-repo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;distributionManagement&gt;</code> 是配置本地打包后的文件的路径，当运行  <code>mvn clean package deploy</code> 后，将发布到根路径的 <code>maven-repo</code> 文件夹。id 和 name 可以随便填写。</p><p>默认打包后将包含 jar 包，和 pom 文件。可以添加 2 个插件，使其可以生成 source 源文件 jar 和 javadoc 文档 jar 包。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">maven-repo</span></span><br><span class="line">└── <span class="selector-tag">depp</span></span><br><span class="line">    └── <span class="selector-tag">wang</span></span><br><span class="line">        └── <span class="selector-tag">substruction-common</span></span><br><span class="line">            ├── 1<span class="selector-class">.0</span><span class="selector-class">.0</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0-javadoc</span><span class="selector-class">.jar</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0-javadoc</span><span class="selector-class">.jar</span><span class="selector-class">.md5</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0-javadoc</span><span class="selector-class">.jar</span><span class="selector-class">.sha1</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0-sources</span><span class="selector-class">.jar</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0-sources</span><span class="selector-class">.jar</span><span class="selector-class">.md5</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0-sources</span><span class="selector-class">.jar</span><span class="selector-class">.sha1</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span><span class="selector-class">.md5</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.jar</span><span class="selector-class">.sha1</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.pom</span></span><br><span class="line">            │   ├── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.pom</span><span class="selector-class">.md5</span></span><br><span class="line">            │   └── <span class="selector-tag">substruction-common-1</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.pom</span><span class="selector-class">.sha1</span></span><br><span class="line">            ├── <span class="selector-tag">maven-metadata</span><span class="selector-class">.xml</span></span><br><span class="line">            ├── <span class="selector-tag">maven-metadata</span><span class="selector-class">.xml</span><span class="selector-class">.md5</span></span><br><span class="line">            └── <span class="selector-tag">maven-metadata</span><span class="selector-class">.xml</span><span class="selector-class">.sha1</span></span><br></pre></td></tr></table></figure><blockquote><p>md5 为消息摘要算法，用于检验 jar 包是否被修改？将消息摘要散列生成一串字符串，下载时，再次散列一次，判断结果是否一致？</p></blockquote><p>因代码里包含 Lambda 表达式，不能使用默认 Maven 1.5 的编译器，需要使用 8 或以上的编译器。<code>maven-compiler-plugin</code></p><p><a href="https://github.com/DeppWang/substruction-common" target="_blank" rel="noopener">当 push 到 GitHub 后</a>，给项目开启 GitHub Pages，直接访问 <a href="https://depp.wang/substruction-common/">https://depp.wang/substruction-common/</a> 将打开根目录 index.html  文件</p><h3 id="引用方"><a href="#引用方" class="headerlink" title="引用方"></a>引用方</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wang.depp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>substruction-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了正常引用依赖外，还需要指明依赖 jar 获取地址</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>substruction-common<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>The Maven Repository on Github<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://depp.wang/substruction-common/maven-repo/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、使用-GitHub-Packages-搭建私有仓库"><a href="#2、使用-GitHub-Packages-搭建私有仓库" class="headerlink" title="2、使用 GitHub Packages 搭建私有仓库"></a>2、使用 GitHub Packages 搭建私有仓库</h2><p>相关教程：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1347981037010977" target="_blank" rel="noopener">发布 Artifact</a></p><p>GitHub <code>Setting -&gt; Developer settings -&gt; Personal access tokens</code>  新建 Token，至少选择 repo、write:packages、read:packages</p><h3 id="发布方"><a href="#发布方" class="headerlink" title="发布方"></a>发布方</h3><p><a href="https://maven.apache.org/settings.html" target="_blank" rel="noopener">settings.xml</a> 配置 GitHub 账号密码（token）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span><span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span>&gt;</span><span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>github-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>your-github-name<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>e1a589c**01027697e<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml 配置仓库地址</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>github-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>GitHub Release<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.pkg.github.com/DeppWang/provider-client<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>id 需要和 settings.xml 的 id 相同。通过此 id 查找 settings.xml 的账号密码。url 所包含的 <code>provider-client</code> 无需在 package 中新建，<strong>但必须存在一个<a href="https://github.com/DeppWang/provider-client/" target="_blank" rel="noopener">同名仓库</a>，因为 Package 本质上是依赖于仓库实现的</strong>。</p><p>否则可能遇到的错误：</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">Failed <span class="keyword">to</span> deploy artifacts: Could <span class="built_in">not</span> <span class="built_in">find</span> artifact ** <span class="built_in">in</span> github-release (https:<span class="comment">//maven.pkg.github.com/DeppWang/provider-client)</span></span><br></pre></td></tr></table></figure><p>当发布后，更新版本再次发布时，可能遇到 409 的错误：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">provider-<span class="string">client:</span> Failed to deploy <span class="string">artifacts:</span> Could not transfer artifact wang.<span class="string">depp:</span>provider-<span class="string">client:</span><span class="string">jar:</span><span class="string">sources:</span><span class="number">1.0</span><span class="number">.2</span> from<span class="regexp">/to github-release (https:/</span><span class="regexp">/maven.pkg.github.com/</span>DeppWang<span class="regexp">/provider-client): Failed to transfer file https:/</span><span class="regexp">/maven.pkg.github.com/</span>DeppWang<span class="regexp">/provider-client/</span>wang<span class="regexp">/depp/</span>provider-client<span class="regexp">/1.0.2/</span>provider-client<span class="number">-1.0</span><span class="number">.2</span>-sources.jar with status code <span class="number">409</span></span><br></pre></td></tr></table></figure><p>此时可能已经发布成功了，可查看 package</p><h3 id="引用方-1"><a href="#引用方-1" class="headerlink" title="引用方"></a>引用方</h3><p>pom.xml 配置 repository</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>github-release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>GitHub Release<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.pkg.github.com/deppwang/provider-client<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wang.depp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>provider-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果引用方和发布方不是一台电脑需要额外申请一个具有 repo、read:packages 的 Token？可否使用同一个 token？</p></blockquote><h2 id="3、使用-Nexus-免费版搭建私有仓库"><a href="#3、使用-Nexus-免费版搭建私有仓库" class="headerlink" title="3、使用 Nexus 免费版搭建私有仓库"></a>3、使用 Nexus 免费版搭建私有仓库</h2><p>上面这种方式依赖于项目，无法集中管理所有的 jar 包，还需要设置 settings.xml。使用 Nexus 免费版搭建私有仓库是一个更好的方式。相关教程：<a href="https://help.sonatype.com/repomanager3/installation" target="_blank" rel="noopener">Installation</a>。</p><p>当需要将自己开发的 jar 包同步到中央仓库，以供所有人下载使用时，可使用 Sonatype 来实现，相关教程：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1347981037010977" target="_blank" rel="noopener">发布 Artifact</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1347981037010977" target="_blank" rel="noopener">发布 Artifact</a></li><li><a href="https://github.community/t/github-package-registry-maven-deploy/14562/3" target="_blank" rel="noopener"><a href="https://github.community/t/github-package-registry-maven-deploy/14562" target="_blank" rel="noopener">GitHub Package Registry Maven Deploy</a></a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/11/02/build-a-maven-repository/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Logback 使用总结</title>
      <link>https://depp.wang/2020/10/30/logback-use-summary/</link>
      <guid>https://depp.wang/2020/10/30/logback-use-summary/</guid>
      <pubDate>Fri, 30 Oct 2020 20:48:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近打在打印日志这块栽了个跟头，发现日志这块掌握得还不太好，所以大概梳理一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实 SLF4J 类似于 Commons Logging，也是一个日志接口，而 Logback 类似于 Log4j，是一个日志的实现。&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近打在打印日志这块栽了个跟头，发现日志这块掌握得还不太好，所以大概梳理一下。</p><blockquote><p>其实 SLF4J 类似于 Commons Logging，也是一个日志接口，而 Logback 类似于 Log4j，是一个日志的实现。</p></blockquote><a id="more"></a><h2 id="4-个日志级别"><a href="#4-个日志级别" class="headerlink" title="4 个日志级别"></a>4 个日志级别</h2><p>常用的 4 个日志级别，从低到高：DEBUG、INFO、WARN、ERROR。低级别能输出高级别的日志，级别越低输出内容越多。</p><ul><li>DEBUG：调试数据，生产环境关闭 Debug</li><li>INFO：系统运行信息、外部接口部分，可通过日志看到功能流程</li><li>WARN：不影响程序正常运行，但不应该出现的情况</li><li>ERROR：影响程序正常运行的情况，此时需使用邮件等方式告警，如果抛出异常，不打印</li></ul><p>使用 Logger 或使用注解 @Slf4j</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"debug: [&#123;&#125;]"</span>, <span class="string">"haha"</span>);</span><br><span class="line">        logger.info(<span class="string">"info: [&#123;&#125;]"</span>, <span class="string">"haha"</span>);</span><br><span class="line">        logger.warn(<span class="string">"warn: [&#123;&#125;]"</span>, <span class="string">"haha"</span>);</span><br><span class="line">        logger.error(<span class="string">"error: [&#123;&#125;]"</span>, <span class="string">"haha"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"debug: [&#123;&#125;]"</span>, <span class="string">"haha"</span>);</span><br><span class="line">        log.info(<span class="string">"info: [&#123;&#125;]"</span>, <span class="string">"haha"</span>);</span><br><span class="line">        log.warn(<span class="string">"warn: [&#123;&#125;]"</span>, <span class="string">"haha"</span>);</span><br><span class="line">        log.error(<span class="string">"error: [&#123;&#125;]"</span>, <span class="string">"haha"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印日志时，使用占位符和 []，当没有 logback.xml 时，默认隔离级别：INFO。</p><h2 id="Logback-配置"><a href="#Logback-配置" class="headerlink" title="Logback 配置"></a>Logback 配置</h2><p>logback.xml 基础配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制台输出设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- encoders are assigned the type</span></span><br><span class="line"><span class="comment">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出格式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">15<span class="selector-pseudo">:58</span><span class="selector-pseudo">:50.559</span> <span class="selector-attr">[http-nio-8080-exec-1]</span> <span class="selector-tag">INFO</span>  <span class="selector-tag">w</span><span class="selector-class">.depp</span><span class="selector-class">.exceptionlog</span><span class="selector-class">.TestController</span> <span class="selector-tag">-</span> <span class="selector-tag">info</span>: <span class="selector-tag">haha</span></span><br></pre></td></tr></table></figure><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-10-30-083249.png" alt="basic Syntax"></p><p>使用 logger 指定某个 package 使用某个级别：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- encoders are assigned the type</span></span><br><span class="line"><span class="comment">         ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"chapters.configuration"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Strictly speaking, the level attribute is not necessary since --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- the level of the root level is set to DEBUG by default.       --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>          </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 logger 指定某个文件使用某个级别：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">        %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line">     <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"chapters.configuration"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"chapters.configuration.Foo"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="为不同的环境配置不同的日志级别"><a href="#为不同的环境配置不同的日志级别" class="headerlink" title="为不同的环境配置不同的日志级别"></a>为不同的环境配置不同的日志级别</h2><p>有时候我们在系统整体使用某个级别外（如 INFO），还可以业务类针对不同的环境配置不同的日志级别，使用 <code>springProfile</code> 标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- encoders are assigned the type</span></span><br><span class="line"><span class="comment">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"test,dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"wang.depp"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pre,pro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"wang.depp"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本地 application.yml 配置环境参数</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>打包部署时指定环境</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ java -jar \target\my-app<span class="selector-class">.jar</span> -Dspring<span class="selector-class">.profiles</span><span class="selector-class">.active</span>=dev</span><br></pre></td></tr></table></figure><p>默认 appender 将重复打印日志，此时可以通过在 logger 添加 <code>additivity=&quot;false&quot;</code> 来关闭</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pre,pro"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"wang.depp"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输出到日志文件"><a href="#输出到日志文件" class="headerlink" title="输出到日志文件"></a>输出到日志文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- encoders are assigned the type</span></span><br><span class="line"><span class="comment">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"baselog"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>log/app.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--根据日期存放日志，每个文件限制 64MB --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>log/app.log.%d.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--or whenever the file size reaches 64 MB--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>64 MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件的日志格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d %p (%file:%line\)- %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"test,dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"wang.depp"</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"baselog"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pre,pro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"wang.depp"</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"baselog"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="搭建-ELK-平台图形化查看日志"><a href="#搭建-ELK-平台图形化查看日志" class="headerlink" title="搭建 ELK 平台图形化查看日志"></a>搭建 ELK 平台图形化查看日志</h2><p>ELK：Elasticsearch、Logstash、Kibana</p><p>大致原理：</p><p><img src="https://developer.ibm.com/developer/default/articles/build-elk-and-use-it-for-springboot-and-nginx/images/image001.png" alt="图 1. ELK 的大致工作流程"></p><p>详细搭建过程：<a href="https://developer.ibm.com/zh/articles/build-elk-and-use-it-for-springboot-and-nginx/" target="_blank" rel="noopener">搭建 ELK 实时日志平台并在 Spring Boot 和 Nginx 项目中使用</a></p><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264739155914176" target="_blank" rel="noopener">廖雪峰 - 使用 SLF4J 和 Logback</a></li><li><a href="http://logback.qos.ch/manual/configuration.html" target="_blank" rel="noopener">Chapter 3: Logback configuration</a></li><li><a href="https://howtodoinjava.com/spring-boot2/logging/profile-specific-logging/" target="_blank" rel="noopener">Spring boot profile specific logging example</a></li><li><a href="https://mp.weixin.qq.com/s/hJvkRlt9xQbWhYy1G7ZDsw" target="_blank" rel="noopener">打印日志的正确姿势</a></li></ul><!--[我定的日志规范被 CTO 在全公司推广了](https://www.cnblogs.com/yinjihuan/p/12091701.html)-->]]></content:encoded>
      
      <comments>https://depp.wang/2020/10/30/logback-use-summary/#disqus_thread</comments>
    </item>
    
    <item>
      <title>接口限流的几种算法</title>
      <link>https://depp.wang/2020/10/27/several-algorithms-for-api-rate-limiting/</link>
      <guid>https://depp.wang/2020/10/27/several-algorithms-for-api-rate-limiting/</guid>
      <pubDate>Tue, 27 Oct 2020 20:48:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;今天面试遇到一个关于接口限流的问题：&lt;strong&gt;设计一个方案，保证每秒只有 10 个请求可以访问接口&lt;/strong&gt;。不得不说，此问题可以很好的考察面试高级工程师岗位的候选人的过往经验。不过很遗憾，我原来并没有做过这方面的工作。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>今天面试遇到一个关于接口限流的问题：<strong>设计一个方案，保证每秒只有 10 个请求可以访问接口</strong>。不得不说，此问题可以很好的考察面试高级工程师岗位的候选人的过往经验。不过很遗憾，我原来并没有做过这方面的工作。</p><a id="more"></a><p>在自己的知识储备中，首先想到的是：假如保证每秒只有 1 个请求访问接口，如何实现。在这个前提下，首先想到的是直接加锁，加锁后，每次只有一个请求可以访问接口，但是每个请求的处理时间不确定，可能小于 1s（也可能大于 1 s），此种方法不符合问题要求，pass。</p><p>接着想到使用 Redis 设置 1 个过期时间为 1s 的互斥 key，key 的命名可根据业务场景设定，每个请求均尝试设置这个 key，设置成功就可以访问接口，否则拒绝。而针对每秒限制 10 个请求，就索性设置 10 个过期时间为 1s 的互斥 key，每个请求使用 for 循环依次尝试设置这 10 个 key，前 10 个请求就将 10 key 设置，当第 1 个 key 没有过期时，第 11 个请求将设置失败，访问拒绝。此种虽然可以变相实现需求，但有一个巨大的问题，假设 QPS 为 1 万，每秒限制 100 个请求，Redis 客户端和服务器通信的网络 IO，将变成 100 万次，不敢想。</p><p>面试完成之后（当然挂了），发现思考方向还是太窄了，有很多简单方式就能实现限流。</p><h2 id="1、计数器（固定时间窗口算法）"><a href="#1、计数器（固定时间窗口算法）" class="headerlink" title="1、计数器（固定时间窗口算法）"></a>1、计数器（固定时间窗口算法）</h2><p>使用一个计数器代表请求数，设置每秒请求限制数为 10（图片为 100） ，当请求间隔大于 1s（图片为 1 minutes） 时，请求通过，重置计数器，当前时间设为间隔开始时间；当间隔时间小于 1 s 时，计数器加 1，如果计数器大于限制数时，此时请求拒绝，小于时，请求通过。因为间隔时间固定，所以这种方式也叫固定时间窗口算法。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-10-27-124254.jpg" alt="2016-09-01_20:31:28.jpg"></p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp = getNowTime();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> reqCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> limit = <span class="number">10</span>; <span class="comment">// 时间窗口内最大请求数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> interval = <span class="number">1000</span>; <span class="comment">// 时间窗口 1000 ms, 1s</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">grant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = getNowTime();</span><br><span class="line">        <span class="keyword">if</span> (now &lt; timeStamp + interval) &#123;</span><br><span class="line">            <span class="comment">// 在时间窗口内</span></span><br><span class="line">            reqCount++;</span><br><span class="line">            <span class="comment">// 判断当前时间窗口内是否超过最大请求控制数</span></span><br><span class="line">            <span class="keyword">return</span> reqCount &lt;= limit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            timeStamp = now;</span><br><span class="line">            <span class="comment">// 超时后重置</span></span><br><span class="line">            reqCount = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程安全代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger reqCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> limit = <span class="number">10</span>; <span class="comment">// 时间窗口内最大请求数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> interval = <span class="number">1000</span>; <span class="comment">// 时间窗口 1000 ms, 1s</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">grant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (now &lt; timeStamp + interval) &#123;</span><br><span class="line">            <span class="comment">// 在时间窗口内</span></span><br><span class="line">            reqCount.incrementAndGet();</span><br><span class="line">            <span class="comment">// 判断当前时间窗口内是否超过最大请求控制数</span></span><br><span class="line">            <span class="keyword">return</span> reqCount.get() &lt;= limit;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeStamp = now;</span><br><span class="line">            <span class="comment">// 超时后重置</span></span><br><span class="line">            reqCount.set(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/signin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doSignin</span><span class="params">(@RequestParam(<span class="string">"email"</span>)</span> String email, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">HttpSession session) </span>&#123;</span><br><span class="line">        CounterDemo counter = <span class="keyword">new</span> CounterDemo();</span><br><span class="line">        <span class="keyword">if</span> (!counter.grant()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"signin.html"</span>, Map.of(<span class="string">"email"</span>, email, <span class="string">"error"</span>, <span class="string">"Signin failed"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user = userService.signin(email, password);</span><br><span class="line">session.setAttribute(KEY_USER, user);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"signin.html"</span>, Map.of(<span class="string">"email"</span>, email, <span class="string">"error"</span>, <span class="string">"Signin failed"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/profile"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个接口一个 counter，如果要限制所有接口的每秒请求数，可以在 Filter 中设置。</p><h2 id="2、滑动时间窗口算法（Sliding-Window）"><a href="#2、滑动时间窗口算法（Sliding-Window）" class="headerlink" title="2、滑动时间窗口算法（Sliding Window）"></a>2、滑动时间窗口算法（Sliding Window）</h2><p>如果每秒限制请求访问数量为系统临界值时，假设每秒 100 次，如果 1s 内前 800ms 内没有访问，后 200ms 内访问了 100 次，后 1s 的前 200ms 又访问了 100 次，此时这 1s 就访问 200 次，此时可能会造成系统崩溃。但如果限制每秒访问次数是 10 次，那么上面计数器这种方式就足够了，毕竟每秒最多 20 次访问不会出现什么问题。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-10-27-073522.png" alt="img"></p><p>此时需要使用滑动窗口来保证间隔处不会出现超限制请求的情况。具体需要记录时间窗口每个请求的时间，即在时间窗口内每个接口请求到达的时间点。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-10-27-123937.png" alt="img"></p><p>滑动窗口记录的时间点 list = (t_1, t_2, …t_k)，起点是 list 中最小的时间点 t_1。模拟：当 t_m 时刻新的请求到来时，如果 t_m 在 t_1 + 1 内，判断 list.size() 是否小于 100，是，t_m 加入 list，通过。如果不在，丢弃第一个时间点 t_1，通过。</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlidingWindowDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> limit = <span class="number">100</span>; <span class="comment">// 时间窗口内最大请求数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> interval = <span class="number">1000</span>; <span class="comment">// 时间窗口 1000 ms, 1s</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; reqTimes = <span class="keyword">new</span> ArrayList&lt;&gt;()&#123;&#123;</span><br><span class="line">        add(getNowTime());</span><br><span class="line">    &#125;&#125;; <span class="comment">// 记录请求的时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">grant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> t_m = getNowTime();</span><br><span class="line">        <span class="comment">// 判断 t_m 是否在时间窗口内</span></span><br><span class="line">        <span class="keyword">if</span> (t_m &lt; reqTimes.get(<span class="number">0</span>) + interval) &#123;</span><br><span class="line">            <span class="comment">// 判断当前时间窗口内是否超过最大请求控制数</span></span><br><span class="line">            <span class="keyword">if</span> (reqTimes.size() &lt; limit) &#123;</span><br><span class="line">            reqTimes.add(t_m);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果不在时间窗口内，丢弃第一个时间点</span></span><br><span class="line">            requestTimes.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在滑动窗口中，在时间窗口间隔处，如果时间窗口的后 200 毫秒有了 100 次访问，下一个时间窗口前 800 毫秒的请求将被拒绝。</p><p>每个时间窗口（1s）list 最多 100 个。</p><h2 id="3、漏桶算法（Leaky-Bucket"><a href="#3、漏桶算法（Leaky-Bucket" class="headerlink" title="3、漏桶算法（Leaky Bucket)"></a>3、漏桶算法（<a href="https://en.wikipedia.org/wiki/Leaky_bucket" target="_blank" rel="noopener">Leaky Bucket</a>)</h2><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-10-29-145111.jpg" alt="img"></p><p>滑动时间窗口无法应对细时间粒度（某个时间）的突发性请求，示例：当 t_1 = 1ms，来了 50 个请求，窗口有 50 个时间点了，中间没有请求，t_3 = 900 ms，又来了 100 个请求，只能加入 50 个。</p><p>漏桶算法在此方面有更好的表现，它以指定速度漏出请求（水），如果可以往桶里加请求，代表请求可以访问。漏出量无需使用额外线程控制，根据时间间隔和速率减少。</p><p>假设限制每秒请求数限制为 100，那么设置桶的容量为 100，1 秒漏完，流速为 100 request/s（0.1 request/ms），默认容量为 0。</p><p>伪代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeakyBucketDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp = getNowTime();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity = <span class="number">100</span>; <span class="comment">// 桶的容量 100</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> rate = <span class="number">0.1f</span>; <span class="comment">// 水漏出的速度 0.1（浮点型 * 整数结果去除精度）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> water = <span class="number">0</span>; <span class="comment">// 当前水量(当前累积请求数) 0</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">grant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = getNowTime();</span><br><span class="line">        water = max(<span class="number">0</span>, water - (now - timeStamp) * rate); <span class="comment">// 先执行漏水，计算剩余水量</span></span><br><span class="line">        timeStamp = now;</span><br><span class="line">        <span class="keyword">if</span> ((water + <span class="number">1</span>) &lt; capacity) &#123;</span><br><span class="line">            <span class="comment">// 尝试加水,并且水还未满</span></span><br><span class="line">            water += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 水满，拒绝加水</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析临界情况：漏桶算法没有时间窗口的概念，如果 water 还是 0，当 10ms 有 100 个请求过来后，此时 water 容量为 100，10ms 能漏掉的请求 10*0.1 = 1，water = 99。所以请求 101 次时，请求将被拒绝。</p><p>分析细时间粒度的突发性请求情况：50 个请求在 899ms 的时间内已经漏完了，所以第 900ms 的 100 个请求可以容纳。</p><h2 id="4、令牌桶算法（Token-bucket）"><a href="#4、令牌桶算法（Token-bucket）" class="headerlink" title="4、令牌桶算法（Token bucket）"></a>4、令牌桶算法（<a href="https://en.wikipedia.org/wiki/Token_bucket" target="_blank" rel="noopener">Token bucket</a>）</h2><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-10-27-105409.jpg" alt="image"></p><p>上面漏桶算法是往里面塞，这个令牌桶算法是从里面取。以一个固定的速率往桶中加 token（令牌），每次请求均从桶中取一个令牌，没有令牌将不能访问。添加令牌也无需使用额外线程控制，根据时间间隔和速率来添加。</p><p>假设限制每秒请求数限制为 100，那么每 1 秒最多取走 100 个 token，桶的容量 100，令牌放入的速度 100 token/s，0.1 token/ms。</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenBucketDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeStamp = getNowTime();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity = <span class="number">100</span>; <span class="comment">// 桶的容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> rate = <span class="number">0.1f</span>; <span class="comment">// 令牌放入速度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tokens = <span class="number">100</span>; <span class="comment">// 当前令牌数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">grant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = getNowTime();</span><br><span class="line">        <span class="comment">// 先添加令牌</span></span><br><span class="line">        tokens = min(capacity, tokens + (now - timeStamp) * rate); </span><br><span class="line">        timeStamp = now;</span><br><span class="line">        <span class="keyword">if</span> (tokens &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 若不到 1 个令牌,则拒绝</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 还有令牌，领取令牌</span></span><br><span class="line">            tokens -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果限制请求很低，可以直接使用计数器（固定时间窗口算法）。</p><p>滑动时间窗口算法需要更多的内存。</p><p>令牌桶和漏桶算法当出现峰值后，添加 token 和漏水有速度控制，下一次不能马上达到峰值，所以相比固定时间窗口算法更加平滑。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-10-27-155606.jpg" alt=""></p><p>令牌桶算法，当桶满了，可以一下拿走 100 个令牌。漏桶算法，漏完了，一次可以加 100 个请求。所以相比滑动时间窗口算法可应对突发性请求。</p><p>一般来说，也不会直接用代码去实现相应的算法，而是在 ngix 中<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="noopener">配置</a>，ngix 限流默认使用的漏桶算法。</p><!--所以令牌桶和漏桶算法比较适合阻塞式限流。--><!--在使用系统最大性能的情况下，尽量是请求均匀分布--><!--ngix 配置、hystrix--><!--漏桶算法取的速度可控制？--><!--QPS，服务线程有多少？--><!--cpu 数，线程数，请求数，请求时间--><!--8 核线程，100 个线程--><!--带宽，每秒处理的事务数 (TPS)，每秒请求数 (hits per second)、并发请求数。--><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://juejin.im/entry/6844903443484639240" target="_blank" rel="noopener">接口限流算法总结</a></li><li><a href="https://www.infoq.cn/article/microservice-interface-rate-limit" target="_blank" rel="noopener">微服务接口限流的设计与思考（附 GitHub 框架源码）</a></li></ul><!--[接口限流看这一篇就够了！！！](https://www.cnblogs.com/Chenjiabing/p/12534346.html)--><!--[Everything You Need To Know About API Rate Limiting](https://nordicapis.com/everything-you-need-to-know-about-api-rate-limiting/)-->]]></content:encoded>
      
      <comments>https://depp.wang/2020/10/27/several-algorithms-for-api-rate-limiting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java 实现一个自定义分布式 Session</title>
      <link>https://depp.wang/2020/10/26/java-implements-a-custom-distributed-session/</link>
      <guid>https://depp.wang/2020/10/26/java-implements-a-custom-distributed-session/</guid>
      <pubDate>Mon, 26 Oct 2020 11:55:55 GMT</pubDate>
      <description>
      
        &lt;p&gt;HTTP 是无状态协议，所以服务端如果需要记住登录用户，就需要维护一个 SessionId(Cookie) - Session 的键值对。Session 存放用户信息对象。用户信息对象作为 Session 的一个 Attribute。当浏览器请求中包含 Cookie 时，服务器就能识别出具体是哪个用户了。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>HTTP 是无状态协议，所以服务端如果需要记住登录用户，就需要维护一个 SessionId(Cookie) - Session 的键值对。Session 存放用户信息对象。用户信息对象作为 Session 的一个 Attribute。当浏览器请求中包含 Cookie 时，服务器就能识别出具体是哪个用户了。</p><a id="more"></a><p>默认 SessionId 与 Session 的键值对由服务器来维护，Session 的过期时间默认为 30 分钟（可通过 Debug 查看 maxInactiveInterval 的值）。</p><h2 id="使用-HttpSession"><a href="#使用-HttpSession" class="headerlink" title="使用 HttpSession"></a>使用 HttpSession</h2><p>下面是一个简单的使用 Session 来保存用户登录状态的例子，相关代码我放到了 <a href="https://github.com/DeppWang/springboot-session" target="_blank" rel="noopener">GitHub</a> 上</p><p><strong>设置 Attribute</strong>（登录时）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/signin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doSignin</span><span class="params">(@RequestParam(<span class="string">"email"</span>)</span> String email, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password, HttpSession session) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user = userService.signin(email, password);</span><br><span class="line">session.setAttribute(KEY_USER, user);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"signin.html"</span>, Map.of(<span class="string">"email"</span>, email, <span class="string">"error"</span>, <span class="string">"Signin failed"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/profile"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取 Attribute</strong>（判断是否已经登录）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/profile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">profile</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">User user = (User) session.getAttribute(KEY_USER);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/signin"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"profile.html"</span>, Map.of(<span class="string">"user"</span>, user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除 Attribute</strong>（退出时）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/signout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">signout</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">session.removeAttribute(KEY_USER);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/signin"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>HttpSession session</code> 可以用 <code>HTTPServletRequest request</code> 代替，此时使用 <code>request.getSession().getAttribute()</code>。<code>HttpSession session</code> 和 <code>HTTPServletRequest request</code> 可以认为是方法默认就包含的参数。</p><p>Session 的生命周期是半小时，如果半小时后访问时，服务器将重新建立连接，将发送新的 SessionId 到浏览器，再次访问时， 新 Session 中将没有 User，此时登录将失效。</p><p>浏览器 Cookie 样式：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Cookie: <span class="attribute">JSESSIONID</span>=C8698B74AFAD403C6E28D77B75373500</span><br></pre></td></tr></table></figure><p>此部分代码对应 <a href="https://github.com/DeppWang/springboot-demos/tree/master/springboot-session/src/main/java/wang/depp/session/web/v1" target="_blank" rel="noopener">v1</a></p><h2 id="使用-Redis"><a href="#使用-Redis" class="headerlink" title="使用 Redis"></a>使用 Redis</h2><p>当存在跨域问题时，即多个服务都需要用到 Session 判断登录状态时，就需要将 Session 在每个服务中复制一份，或做成分布式 Session。一般使用 Redis 实现。</p><p>下面使用 Redis 来维护这个 SessionId - Session 的键值对，或者说维护一个 SessionId - Attributes 的键值对。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE_TIME = <span class="number">1800</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes attrs = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="keyword">return</span> attrs.getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span> </span>&#123;</span><br><span class="line">        String sessionId = getRequest().getSession().getId();</span><br><span class="line">        Map&lt;String, Object&gt; attributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        attributes.put(name, value);</span><br><span class="line">        RedisUtils.setKey(sessionId, JsonUtils.getJson(attributes), EXPIRE_TIME, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String sessionId = getRequest().getSession().getId();</span><br><span class="line">        String attributesJson = RedisUtils.getKey(sessionId);</span><br><span class="line">        Map&lt;String, Object&gt; attributes = JsonUtils.fromJson(attributesJson, Map.class);</span><br><span class="line">        <span class="keyword">return</span> attributes.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> User <span class="title">getKeyUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Object user = getAttribute(name);</span><br><span class="line">        <span class="keyword">return</span> JsonUtils.fromJson(user.toString(), User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String sessionId = getRequest().getSession().getId();</span><br><span class="line">        String attributesJson = RedisUtils.getKey(sessionId);</span><br><span class="line">        Map&lt;String, Object&gt; attributes = JsonUtils.fromJson(attributesJson, HashMap.class);</span><br><span class="line">        attributes.remove(name);</span><br><span class="line">        RedisUtils.setKey(sessionId, JsonUtils.getJson(attributes), EXPIRE_TIME, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 RedisUtils，使用静态方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate autowiredStringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate = <span class="keyword">this</span>.autowiredStringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key, String value, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(addKeyPrefix(key), value, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForValue().get(addKeyPrefix(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">deleteKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForValue().getOperations().delete(addKeyPrefix(key));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">incrementKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.opsForValue().increment(addKeyPrefix(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">addKeyPrefix</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"session:%s"</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserController </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/signin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doSignin</span><span class="params">(@RequestParam(<span class="string">"email"</span>)</span> String email, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user = userService.signin(email, password);</span><br><span class="line">setAttribute(KEY_USER, user);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"signin.html"</span>, Map.of(<span class="string">"email"</span>, email, <span class="string">"error"</span>, <span class="string">"Signin failed"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/profile"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/profile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">profile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = getKeyUser(KEY_USER);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/signin"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"profile.html"</span>, Map.of(<span class="string">"user"</span>, user));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/signout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">signout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">removeAttribute(KEY_USER);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/signin"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此部分代码对应 <a href="https://github.com/DeppWang/springboot-demos/tree/master/springboot-session/src/main/java/wang/depp/session/web/v2" target="_blank" rel="noopener">v2</a></p><h2 id="自定义-Session"><a href="#自定义-Session" class="headerlink" title="自定义 Session"></a>自定义 Session</h2><!--为什么要自定义 Session？ 转发后的请求就包含了 Session，不用传输参数？--><p>上面这种方式实现了一个简单的分布式 Session，我们可以自定义 Session 来对其进行一定优化，使其具有以下特点：</p><ul><li>封装 Attribute 的设置与获取的实现细节</li><li>可以自定义 Cookie</li><li>Attributes 做一个二级缓存，自定义 Session 中存放一份，Redis 再存放一份。</li></ul><p>需要利用下面这几个原生类：</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HttpSession</span></span><br><span class="line"><span class="attribute">HttpServletRequestWrapper</span></span><br><span class="line"><span class="attribute">HttpServletResponseWrapper</span></span><br></pre></td></tr></table></figure><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>1、设置自定义 Session、Request 和 Response</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperSession</span> <span class="keyword">implements</span> <span class="title">HttpSession</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;StoreType, SessionStore&gt; sessionStores;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperSessionServletRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WrapperSession wrapperSession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperSessionServletResponse</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WrapperSession session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用 session-config.xml 配置 cookie 和 cache，一个 entry 对应一个 SessionConfigEntry。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sessionConfig</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">name</span>=<span class="string">"sessionId"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>js<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">httponly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">httponly</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readonly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readonly</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">encrypt</span>&gt;</span>false<span class="tag">&lt;/<span class="name">encrypt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">storeType</span>&gt;</span>cookie<span class="tag">&lt;/<span class="name">storeType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">       <span class="tag">&lt;<span class="name">entry</span> <span class="attr">name</span>=<span class="string">"__user__"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">storeType</span>&gt;</span>cache<span class="tag">&lt;/<span class="name">storeType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>wang.depp.session.entity.User<span class="tag">&lt;/<span class="name">type</span>&gt;</span> <span class="comment">&lt;!--类型用于 String 转换 对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entries</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">sessionConfig</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionConfigEntry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> StoreType storeType;</span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、使用 CookieStore 存放 Cookie。使用 CacheStore 存放 attributes，获取 attribute 时默认直接从 CacheStore 中取（CacheStore 从 Redis 缓存中读取）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span> <span class="keyword">implements</span> <span class="title">SessionStore</span>, <span class="title">SessionCacheContainerAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WrapperSessionServletRequest wrapperRequest;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; attributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieStore</span> <span class="keyword">implements</span> <span class="title">SessionStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; undecodedCookies = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Attribute&gt; attributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链路调用"><a href="#链路调用" class="headerlink" title="链路调用"></a>链路调用</h3><p>1、项目启动时根据 session-config.xml 中初始化 SessionConfigEntry</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperSessionFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">         WrapperSessionServletRequest krqRequest = <span class="keyword">new</span> WrapperSessionServletRequest((HttpServletRequest) request);</span><br><span class="line">         WrapperSessionServletResponse krqResponse = <span class="keyword">new</span> WrapperSessionServletResponse((HttpServletResponse) response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initSessionStore();</span><br><span class="line">        <span class="keyword">this</span>.sessionId = getSessionId(); <span class="comment">// 从 CookieStore 的 attributes 中获取 sessionId</span></span><br><span class="line">        generateTrackId();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSessionStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (SessionStore sessionStore : sessionStores.values()) &#123;</span><br><span class="line">            sessionStore.init(); <span class="comment">// 分别调用子类的 init() 方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、请求时，拦截，查找 SessionId 在 Redis 是否有对应的 Attributes，设置时先设置到 SessionStore</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span> <span class="keyword">implements</span> <span class="title">SessionStore</span>, <span class="title">SessionCacheContainerAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WrapperSessionServletRequest wrapperRequest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; attributes;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(SessionConfigEntry sessionConfigEntry, Object value)</span> </span>&#123;</span><br><span class="line">        value = RedisUtils.getKey(wrapperRequest.getSession().getId());; <span class="comment">// 设置前，先从 Redis 写入 attributes</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == value) &#123; <span class="comment">// 如果不存在，删除</span></span><br><span class="line">            attributes.remove(sessionConfigEntry.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            attributes.put(sessionConfigEntry.getName(), value);  <span class="comment">// 如果存在，将更新</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、返回前端前，将 Attributes 更新到 Redis</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperSessionServletResponse</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        getSession().commit(); <span class="comment">// 延长 session 的时间</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getWriter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        writeToCache();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeToCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (attributes.entrySet().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            String value = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                value = mapper.writeValueAsString(attributes);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            RedisUtils.setKey(wrapperRequest.getSession().getId(), value, wrapperRequest.getSession().getMaxInactiveInterval());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4、获取时，直接从 SessionStore 中获取，默认将从 Redis 中读取一次，读取后将不再读取，因为以后都就将写入 Attributes</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(SessionConfigEntry sessionConfigEntry)</span> </span>&#123;</span><br><span class="line">    loadCache(); <span class="comment">// 先从 Redis 写入 attributes，当 readFromCache() 方法调用后，此时将不再从 Redis 中获取。如果当前对象一直存活，直接写入到 attribute，将不用从 Redis 中读取</span></span><br><span class="line">    <span class="keyword">return</span> attributes.get(sessionConfigEntry.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>UserController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/signin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doSignin</span><span class="params">(@RequestParam(<span class="string">"email"</span>)</span> String email, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user = userService.signin(email, password);</span><br><span class="line">setAttribute(KEY_USER, user);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"signin.html"</span>, Map.of(<span class="string">"email"</span>, email, <span class="string">"error"</span>, <span class="string">"Signin failed"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/profile"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/profile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">profile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = (User) getAttribute(KEY_USER);</span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/signin"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"profile.html"</span>, Map.of(<span class="string">"user"</span>, user));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/signout"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">signout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">removeAttribute(KEY_USER);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/signin"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BaseController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前 HttpServletRequest</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes attrs = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="keyword">return</span> attrs.getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object value)</span> </span>&#123;</span><br><span class="line">        getRequest().getSession().setAttribute(name, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getRequest().getSession().getAttribute(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        getRequest().getSession().removeAttribute(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此部分代码对应 <a href="https://github.com/DeppWang/springboot-demos/tree/master/springboot-session/src/main/java/wang/depp/session/web/v3" target="_blank" rel="noopener">v3</a>。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>自定义分布式 Session 一般实现在网关中，网关接口对外暴露，请求先调用网关，网关请求只能内网访问的业务系统接口。网关和业务系统规定相应的调用规则（如：添加指定 Header），网关来负责验证登录状态。</p><p>Redis 可以实现集群保证可用性。当不使用分布式 Session 时，可以使用 <a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JSON Web Token</a></p>]]></content:encoded>
      
      <comments>https://depp.wang/2020/10/26/java-implements-a-custom-distributed-session/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HashMap 常问的 9 个问题</title>
      <link>https://depp.wang/2020/08/20/hashmap-9-question/</link>
      <guid>https://depp.wang/2020/08/20/hashmap-9-question/</guid>
      <pubDate>Thu, 20 Aug 2020 17:58:35 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-111236.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;!--[img](https://javabynataraj.files.wordpress.com/2014/06/types_of_hashmapiteration_javabynataraj.png)--&gt;

&lt;h2 id=&quot;1、HashMap-的数据结构是什么？&quot;&gt;&lt;a href=&quot;#1、HashMap-的数据结构是什么？&quot; class=&quot;headerlink&quot; title=&quot;1、HashMap 的数据结构是什么？&quot;&gt;&lt;/a&gt;1、HashMap 的数据结构是什么？&lt;/h2&gt;&lt;p&gt;HashMap 我们知道 HashMap 的数据结构是数组+链表，所以这个问题可以理解为数组+链表有什么优点？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果只是数组，就存在数组的缺点，如：需要更长的连续内存空间；扩容更加频繁；并且删除操作需要移动其他元素位置，等等&lt;/li&gt;
&lt;li&gt;如果只是链表，就存在链表的缺点，如：查找复杂度 O(n) 太高，等等&lt;/li&gt;
&lt;li&gt;而数组+链表是一个折中的方案&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-22-111236.png" alt="img"></p><!--[img](https://javabynataraj.files.wordpress.com/2014/06/types_of_hashmapiteration_javabynataraj.png)--><h2 id="1、HashMap-的数据结构是什么？"><a href="#1、HashMap-的数据结构是什么？" class="headerlink" title="1、HashMap 的数据结构是什么？"></a>1、HashMap 的数据结构是什么？</h2><p>HashMap 我们知道 HashMap 的数据结构是数组+链表，所以这个问题可以理解为数组+链表有什么优点？</p><ul><li>如果只是数组，就存在数组的缺点，如：需要更长的连续内存空间；扩容更加频繁；并且删除操作需要移动其他元素位置，等等</li><li>如果只是链表，就存在链表的缺点，如：查找复杂度 O(n) 太高，等等</li><li>而数组+链表是一个折中的方案</li></ul><a id="more"></a><h2 id="2、为什么数组的默认长度是-16？"><a href="#2、为什么数组的默认长度是-16？" class="headerlink" title="2、为什么数组的默认长度是 16？"></a>2、为什么数组的默认长度是 16？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The default ∞initial capacity - MUST be a power of two. 默认初始容量必须是 2 的幂次方。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><p>这跟计算数组下标有关，计算数组下标的代码为 <code>index = hash &amp; (n-1)</code>，当 n 为 2 的幂，如 16，n-1 = 15，转换为二进制为 <code>1111</code>，通过按位与 <code>&amp;</code> ，数组下标就由 hash 二进制的低 4 位决定。比起传统的取模（余）操作，效率更高。</p><h2 id="3、为什么-HashMap-没有直接用-Key-的-hashCode，而是生成一个新的-hash？"><a href="#3、为什么-HashMap-没有直接用-Key-的-hashCode，而是生成一个新的-hash？" class="headerlink" title="3、为什么 HashMap 没有直接用 Key 的 hashCode，而是生成一个新的 hash？"></a>3、为什么 HashMap 没有直接用 Key 的 hashCode，而是生成一个新的 hash？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br></pre></td></tr></table></figure><p>同样跟数组下标有关，HashMap 没有用取模（余）运算，而是直接使用低 4 位作为数组下标，如果使用 hashCode 低 4 位，碰撞几率很大，将 hashCode 的低位和高位异或生成 hash，取 hash 的低 4 位作为数组下标，可以增加低位的随机性，减少碰撞。<code>&gt;&gt;&gt;</code> 为<a href="https://depp.wang/2020/01/11/java-operator/#gt-gt-gt-无符号右移运算符">无符号右移</a>，<code>h &gt;&gt;&gt; 16</code>：舍弃右边 16 位，将高位向右移动 16 位，左边用 0 补齐。</p><p>当 key == null 时，hash 为 0，所以 key 可以为 null。</p><h2 id="4、扩容因子为-0-75，有什么好处？"><a href="#4、扩容因子为-0-75，有什么好处？" class="headerlink" title="4、扩容因子为 0.75，有什么好处？"></a>4、扩容因子为 0.75，有什么好处？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the HashMap class, including get and put).</span></span><br><span class="line"><span class="comment">// 作为一般的规则，默认扩容因子（.75）在时间和空间成本之间提供了一个很好的折中。较高的值减少了空间开销，但增加了查找成本（反映在 HashMap 类的大多数操作中，包括 get 和 put）。 </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><ul><li>如果是 0.5 的话，空间利用率不高，扩容太频繁。</li><li>如果是 1 的话，因为不是均匀分布，碰撞产生链表，扩容后，链表将更长，查找和修改的时间复杂度将更高。</li><li>0.75 是一个折中的方案。</li><li>注意：扩容触发条件 0.75，不是指数组 75% 的区域被占用时，而是指当前 Map 的容量，包括链表上的元素。</li></ul><h2 id="5、HashMap-如何扩容？"><a href="#5、HashMap-如何扩容？" class="headerlink" title="5、HashMap 如何扩容？"></a>5、HashMap 如何扩容？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="keyword">int</span> threshold = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line"><span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">    resize();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// 创建一个容量为原来的 2 倍的新数组</span></span><br><span class="line">    newCap = oldCap &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 当只有一个元素时，根据节点原来的 hash 和新的数组长度得到新的数组下标</span></span><br><span class="line">            <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">            newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// oldCap 初始为 16，即 10000，最高位始终为 1，通过 1 来随机判断使用原数组下标还是加上原数组长度的新数组下标</span></span><br><span class="line">                <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>)</span><br><span class="line">                    loHead = e</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                    hiHead = e</span><br><span class="line">            <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    newTab[j] = loHead;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    newTab[j + oldCap] = hiHead;</span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先，HashMap 需要扩容，否则，链表长度过长，查找和修改的复杂度都将变高。</li><li>扩容时，创建一个容量为原来的 2 倍的新数组，遍历原数组，如果当前位置只有一个元素，则根据节点原来的 hash 和新的数组长度得到新的数组下标，如果是一个链表，则通过 oldCap 来随机判断使用原数组下标还是加上原数组长度的新数组下标</li><li>因为需要扩容，需要额外的性能，在能估算容量的情况下，可以直接设置初始容量。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="6、HashMap-为什么线程不安全？"><a href="#6、HashMap-为什么线程不安全？" class="headerlink" title="6、HashMap 为什么线程不安全？"></a>6、HashMap 为什么线程不安全？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;p&gt;&lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HashMap 不是线程安全的，它的线程安全版本是 HashTable 和 ConcurrentHashMap</li><li>它的线程不安全是因为 HashMap 存在变量，如 DEFAULT_INITIAL_CAPACITY 等，对象在方法中使用这些共享变量时，没有加锁。共享变量在并发操作，值容易被覆盖，存在丢失数据的问题。</li><li>在 jdk 1.7 中，并发操作下，扩容时，还可能造成死循环，<a href="https://stackoverflow.com/questions/35534906/java-hashmap-getobject-infinite-loop/44180452#44180452" target="_blank" rel="noopener">Java HashMap.get(Object) infinite loop</a></li></ul><h2 id="7、为什么如果对象作为-HashMap-的-Key，对象需要重写-hashCode-和-equals-方法？"><a href="#7、为什么如果对象作为-HashMap-的-Key，对象需要重写-hashCode-和-equals-方法？" class="headerlink" title="7、为什么如果对象作为 HashMap 的 Key，对象需要重写 hashCode 和 equals 方法？"></a>7、为什么如果对象作为 HashMap 的 Key，对象需要重写 hashCode 和 equals 方法？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 HashMap 通过 Key 对象的 hashCode 计算 hash，还通过 equals 方法比较对象是否相同，如果不重写，相同内容的两个对象，其 hashCode 将不同，也不会相等。</p><p>String 常作为 Map 的 Key，String 如何重写：</p><ul><li>hashCode() - 如果字符串已经存在，那么 hash 不变；如果不存在，通过每个字符的 ASSCII 码计算</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>equals() - 依次比较每个字符是否相同</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：HashSet 是特殊的 HashMap，存放在 HashSet 的对象都需要重写 hashCode() 和 equals() 方法</p><h2 id="8、get-和-containsKey-的时间复杂度是多少？"><a href="#8、get-和-containsKey-的时间复杂度是多少？" class="headerlink" title="8、get() 和 containsKey() 的时间复杂度是多少？"></a>8、get() 和 containsKey() 的时间复杂度是多少？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This implementation provides constant-time performance for the basic operations (get and put)</span></span><br><span class="line"><span class="comment">// 这个实现为基本操作（get 和 put）提供了常量时间性能，假设散列函数将元素正确地分散在存储桶中。</span></span><br></pre></td></tr></table></figure><p>时间复杂度为 O(1)，因为链表的长度不会过长，基本不会达到 8 个</p><h2 id="9、当链表长度大于-8-个时，将链表转换为红黑树，有什么好处？"><a href="#9、当链表长度大于-8-个时，将链表转换为红黑树，有什么好处？" class="headerlink" title="9、当链表长度大于 8 个时，将链表转换为红黑树，有什么好处？"></a>9、当链表长度大于 8 个时，将链表转换为红黑树，有什么好处？</h2><ul><li>链表查找的时间复杂度时 O(n)</li><li>红黑树查找的时间复杂度时 O(logN)</li><li>所以好处是查找和修改的时间复杂度更低</li></ul><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://www.javarticles.com/2012/11/hashmap-faq.html" target="_blank" rel="noopener">HashMap Interview Questions</a></li><li><a href="https://www.quora.com/Why-is-the-load-factor-set-to-0-75-for-a-HashMap-in-Java" target="_blank" rel="noopener">Why is the load factor set to 0.75 for a HashMap in Java?</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/08/20/hashmap-9-question/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在 macOS 中，如何自动压缩截屏图片大小</title>
      <link>https://depp.wang/2020/08/07/how-to-automatically-compress-screenshot-size-in-macos/</link>
      <guid>https://depp.wang/2020/08/07/how-to-automatically-compress-screenshot-size-in-macos/</guid>
      <pubDate>Fri, 07 Aug 2020 14:25:08 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;一、错误的误会&quot;&gt;&lt;a href=&quot;#一、错误的误会&quot; class=&quot;headerlink&quot; title=&quot;一、错误的误会&quot;&gt;&lt;/a&gt;一、错误的误会&lt;/h2&gt;&lt;p&gt;我是这样在 Markdown 中插入截屏图片的：截屏到剪贴板后，直接在 &lt;a href=&quot;https://typora.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typora&lt;/a&gt; 中粘贴，&lt;a href=&quot;https://apps.apple.com/us/app/ipic-image-file-upload-tool/id1101244278?mt=12&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iPic&lt;/a&gt; 将自动将图片上传到阿里云图床（对象存储）。我一直使用 &lt;a href=&quot;https://www.alfredapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alfred&lt;/a&gt; 的 &lt;a href=&quot;https://www.alfredapp.com/help/features/clipboard/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Clipboard History&lt;/a&gt; 功能查看截图大小，发现图片占内存都很大，全屏截图有 10 多 MB，就想着一定要找到一种方法来缩小截屏大小，不然我的&lt;a href=&quot;https://cn.aliyun.com/price/detail/oss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里云图床费用&lt;/a&gt;得嗖嗖涨。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="一、错误的误会"><a href="#一、错误的误会" class="headerlink" title="一、错误的误会"></a>一、错误的误会</h2><p>我是这样在 Markdown 中插入截屏图片的：截屏到剪贴板后，直接在 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a> 中粘贴，<a href="https://apps.apple.com/us/app/ipic-image-file-upload-tool/id1101244278?mt=12" target="_blank" rel="noopener">iPic</a> 将自动将图片上传到阿里云图床（对象存储）。我一直使用 <a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred</a> 的 <a href="https://www.alfredapp.com/help/features/clipboard/" target="_blank" rel="noopener">Clipboard History</a> 功能查看截图大小，发现图片占内存都很大，全屏截图有 10 多 MB，就想着一定要找到一种方法来缩小截屏大小，不然我的<a href="https://cn.aliyun.com/price/detail/oss" target="_blank" rel="noopener">阿里云图床费用</a>得嗖嗖涨。</p> <a id="more"></a><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-02-024029.png" alt="image" style="zoom:50%;"></p><p>昨天，我将截图不保存到剪贴板，而直接保存到本地，发现图片根本没有 10 多 MB，就几百 KB。想着我这个高分辨率超高清 Retain 全屏截图 🐶 ，不能只有几百 KB 呀 ，一定是我电脑显示有问题。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-02-023939.png" alt="image" style="zoom:50%;"></p><p>最后我打开阿里云对象存储在线检查了一下，发现真的只有几百 KB，开始心里默默对 Alfred ***。遂在 Alfred 论坛发<a href="https://www.alfredforum.com/topic/15361-the-copyed-image-in-the-clipboard-that-size-is-a-error-data-between-with-the-actual-size-its-too-large/" target="_blank" rel="noopener">讨论帖</a>，网友回复说，对于剪贴板图片来说，其数据格式是 <a href="https://en.wikipedia.org/wiki/TIFF" target="_blank" rel="noopener">TIFF</a> 数据格式，不是图片本身的内存大小，所以 Clipboard History 数据显示较大。喔霍，原来是个错误的误会呀。</p><p>虽然几百 KB 相对 10 多 MB 是小多了，现在我这小博客无人问津，图床费用每月也就几毛几分钱，图片大点也无所谓。但为了长远考虑，图片当然越小越好。</p><p>正好搜到一篇关于压缩图片的<a href="https://about.gitlab.com/blog/2020/01/30/simple-trick-for-smaller-screenshots/" target="_blank" rel="noopener">优质教程</a>，还包含视频教程，简单的方式就能实现自动压缩图片，那还等什么，得赶快用起来。<strong>强烈推荐看原文</strong>，很通俗易懂。</p><!--下面是基于这篇文章的总结--><h2 id="二、图片压缩"><a href="#二、图片压缩" class="headerlink" title="二、图片压缩"></a>二、图片压缩</h2><h3 id="2-1、压缩时机"><a href="#2-1、压缩时机" class="headerlink" title="2.1、压缩时机"></a>2.1、压缩时机</h3><p>图片压缩有三个时间点，1、截屏时由截屏软件压缩；2、上传到图床时由上传软件压缩；2、上传到图床后由图床压缩。</p><p>下面要介绍的这种方式可以类似看作是第 1 条。</p><p>对于第 2 条，如果你使用 iPic，iPic 有提供可选的有损压缩的功能，先压缩再上传，我大概测试了一下，一般能压缩 60% 多吧（具体视情况而定）。但如果在 Typora 中复制，<a href="https://toolinbox.net/iPic/#comment-4743566071" target="_blank" rel="noopener">不支持压缩</a>，曲线救国的方式是先使用快捷键上传，再在 Typora 中粘贴返回的 URL。个人觉得体验有分裂，没有截屏时就压缩方便，所以才用第 1 种实现。</p><!--，具体损失效果没有对比。--><p>对于第 3 条，七牛云对象存储提供自动图片压缩功能，不过是收费功能。</p><h3 id="2-2、压缩原理"><a href="#2-2、压缩原理" class="headerlink" title="2.2、压缩原理"></a>2.2、压缩原理</h3><p>macOS 默认截屏生成图片的格式为 <a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics" target="_blank" rel="noopener">PNG</a>，更准确的说，是 PNG-32，即每个像素点占 32 位，每个像素点由 4 部分构成，分别是红色（Red）、绿色（Green）、蓝色（Blue）和透明度（Alpha (Transparency)）（简写 RGBA）。所以每种颜色有 2^8（256）个级别，所以图片可以显示 1600 万种颜色（256  ×  256  ×  256, 2^24）。</p><p>截屏一般对颜色要求没那么高，显示 1600 万种颜色与 256 种颜色差别不大，截屏图片基于<a href="https://en.wikipedia.org/wiki/Palette_(computing)" target="_blank" rel="noopener">调色板</a>，可以利用工具将图片显示颜色<a href="http://en.wikipedia.org/wiki/Color_quantization" target="_blank" rel="noopener">更改</a>为 256 种，来实现压缩图片的功能。此时单位像素由 32 位变为 8 位（4 个字节变为 1 个字节），所以大约能压缩 75% 的容量。</p><p>注意：除了 256，还可以选择 128、64、24、16、8、4 等级别，原作者测试 64 跟 256 差不多。这里我选择了 256。</p><h3 id="2-2、pngquant"><a href="#2-2、pngquant" class="headerlink" title="2.2、pngquant"></a>2.2、pngquant</h3><p><a href="https://pngquant.org/" target="_blank" rel="noopener">pngquant</a> 就是一个可以几乎不损害图片质量，通过减少像素大小来压缩 PNG 图片的命令行程序（库），属于有损压缩。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用 HomeBrew 安装 pngquant</span></span><br><span class="line">brew install pngquant</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 32 位的 RGBA PNG 数字转换为 8 位（或更小）的 RGBA 调色板</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pngquant [颜色数量] [参数] input.png</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   --skip-if-larger  仅保存转化后比原文件小的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   --strip           去除可选的元数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   --ext=.png        设置压缩后图片名和原图片名一样</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   --force           覆盖原文件</span></span><br><span class="line">pngquant 256 --skip-if-larger --strip --ext=.png --force example.png</span><br></pre></td></tr></table></figure><p>当 pngqunt 压缩后，还可以通过 <a href="https://github.com/google/zopfli" target="_blank" rel="noopener">zopfli</a> 进一步无损压缩，但耗时较长，压缩比例也不高，我就没做这步操作。</p><!--zopfli 的原理使用 [DEFLATE](https://en.wikipedia.org/wiki/DEFLATE) 算法来实现无损压缩--><p><a href="https://pngmini.com/" target="_blank" rel="noopener">ImageAlpha</a> 是一个集成 <a href="https://pngquant.org/" target="_blank" rel="noopener">pngquant</a> 的 macOS 客户端，可以图形化调整图片显示颜色数量。</p><h3 id="2-4、压缩效果"><a href="#2-4、压缩效果" class="headerlink" title="2.4、压缩效果"></a>2.4、压缩效果</h3><table><thead><tr><th align="left">PNG-32 (465KB)</th><th align="left">256 colors (117KB)</th></tr></thead><tbody><tr><td align="left"><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-04-073500.png" alt="Xnip2020-08-02_20-55-07"></td><td align="left"><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-04-073506.png" alt="image-20200802205551304"></td></tr></tbody></table><p>压缩效果：74.8%</p><h3 id="2-5、自动压缩"><a href="#2-5、自动压缩" class="headerlink" title="2.5、自动压缩"></a>2.5、自动压缩</h3><p>现在，只有在本地执行一个命令，就能将图片压缩了。可以将命令作为一个脚本，交给工作流来自动执行，工作流可以选择 Alfred 工作流（<a href="https://www.alfredapp.com/workflows/" target="_blank" rel="noopener">Workflow</a>）、系统自带的 <a href="https://support.apple.com/en-au/guide/automator/welcome/mac" target="_blank" rel="noopener">Automator</a> 和专业工作流软件 <a href="https://www.noodlesoft.com/" target="_blank" rel="noopener">Hazel（</a>试用结束后软件收费）。Alfred 工作流需要关键字或快捷键触发，不符合我们自动压缩的 feelstyle，pass。下面分别演示如何使用 Hazel 和 Automator。 </p><p>Hazel 设置工作流：</p><ol><li>添加指定文件夹，设置触发条件，条件为对文件夹中最近一分钟新增的 PNG 文件执行脚本</li><li>设置脚本，脚本为压缩图片，并复制压缩后的图片到剪贴板</li><li>通知压缩完成</li></ol><p>Automator 设置工作流：</p><ol><li>添加 Folder Action，选择指定文件夹，添加 Run  Shell Script</li><li>设置脚本，将新加入图片作为参数，遍历执行脚本</li><li>没有通知功能</li></ol><p>设置完成后，我们使用截图工具（如： <a href="https://xnipapp.com/" target="_blank" rel="noopener">Xnip</a>）将截图保存到指定文件夹时，将会触发工作流，完成自动压缩。</p><table><thead><tr><th align="center">Hazel</th><th align="center">Automator</th></tr></thead><tbody><tr><td align="center"><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-07-092800.png" alt="image-20200807172759510"></td><td align="center"><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-07-102228.png" alt="image-20200807182227731"></td></tr><tr><td align="center"><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-04-073544.png" alt="image-20200803133233959"></td><td align="center"><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-07-135926.png" alt="image-20200807215926183"></td></tr><tr><td align="center"><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-04-073539.png" alt="image-20200802211111073"></td><td align="center"></td></tr></tbody></table><!--可以选择开源免费的 [fswatch](https://github.com/emcrisostomo/fswatch) 把.--><ul><li>使用 Automator，需在 Security &amp; Privay（安全与隐私）-&gt; Accessibility（辅助功能）里面开启权限。</li></ul><p>脚本：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pngquant 256 --skip-if-larger --strip --ext=.png --force "$1"</span><br><span class="line">osascript -e "set the clipboard to (read (POSIX file \"$(perl -e "print glob('$1')")\") as &#123;«class PNGf»&#125;)"</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">The compressed image `<span class="built_in">file</span>` has been copied <span class="keyword">to</span> <span class="built_in">the clipboard</span>.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for f in "$@"</span><br><span class="line">do</span><br><span class="line">/usr/local/bin/pngquant 256 --skip-if-larger --strip --ext=.png --force "$f"</span><br><span class="line">osascript -e "set the clipboard to (read (POSIX file \"$(perl -e "print glob('$f')")\") as &#123;«class PNGf»&#125;)"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>ps：Hazel 官方 UI 真心好看。<code>/usr/local/bin/pngquan</code> 与 <code>pnguant</code> 作用一样。</p><!--试用期过了我还是老老实实切换回系统自带的 Automator 吧。--><!--复制到剪贴板--><!--你可能注意到了 `cat "$1" | ./impbcopy -` 这行命令，这是一个从命令行复制图片到剪贴板的命令，由于 Hazel  不提供复制到剪贴板功能（反正我没找到），网上很多办法也不好使，找到一个小哥用 objective-c 写的[复制图片代码](http://www.alecjacobson.com/weblog/?p=3816)，挺好使。--><!--在保存截屏图片的文件夹中，新建文件 `impbcopy.m`，复制代码到 `impbcopy.m`，保存--><!--编译文件，你会看到生成了两个文件，`impbcopy` 和 `impbcopy.dSYM`，命令行执行将用到 `impbcopy`--> <h2 id="三、像素与分辨率"><a href="#三、像素与分辨率" class="headerlink" title="三、像素与分辨率"></a>三、像素与分辨率</h2><!--**像素**--><p>上面一直说像素，所以深入了解一下。</p><p><a href="https://en.wikipedia.org/wiki/Pixel" target="_blank" rel="noopener">像素</a>（Pixel，简写 px）分为物理像素和图片像素。</p><p><strong>物理像素</strong>是物理设备上显示颜色的物理点。物理设备如电脑、手机、电视等。</p><ul><li>以 <a href="https://support.apple.com/kb/SP754?locale=en_AU" target="_blank" rel="noopener">MacBook Pro 2017 13.3-inch</a>（后面简称 MacBook Pro）为例，屏幕尺寸是 13.3 英寸，即屏幕斜对角长为 13.3 英寸（1 英寸 = 2.54 cm）。（斜对角长约 34.0 cm，长约 28.8 cm，宽约 18.0 cm），像素个数为  2560 × 1600，所以每个像素点的面积约为 0.01125 cm × 0.01125 cm。</li><li><a href="https://www.apple.com/iphone-xr/specs/" target="_blank" rel="noopener">iPhone XR</a>，屏幕尺寸为 6.06-inch。（斜对角长约 15.4 cm，长约 14 cm，宽约 6.5 cm），像素个数为：1792 × 828，所以每个像素点的面积约为 0.00785cm × 0.00785 cm。</li></ul><p>我们可以看出，MacBook Rro 和 iPhone XR 屏幕的像素点为正方形。</p><p><strong>图片像素</strong>是图片中最小的单位。同样大小的照片，包含的像素可能不同。小米 10 有一个颗 1 亿像素的摄像头，如果全输出，拍出来的照片，包含像素个数为 12032 × 9024 ，乘积结果为 1.08 亿。iPhone XR 是 1200 万像素，照片像素为 3024  ×  4032。摄像头一般说多少多少像素，对于屏幕，我们一般称分辨率。</p><!--**分辨率 **--><p><a href="https://en.wikipedia.org/wiki/Dispute_resolution" target="_blank" rel="noopener">分辨率</a>，也叫显示分辨率（Display Resolution），分辨率指像素的总和，比如我们说 MacBook Pro 屏幕的分辨率是  2560 × 1600 px。分辨率和屏幕大小尺寸没有关系，MacBook Pro 的分辨率是  2560 × 1600 px，一台 75 英寸的 <a href="https://www.mi.com/mitv5/75/specs" target="_blank" rel="noopener">小米电视 5</a> 的分辨率也才 3840 × 2160 px。小米电视 5 自称是 <a href="https://en.wikipedia.org/wiki/4K_resolution" target="_blank" rel="noopener">4K</a>，其实只是接近 4K，4K 的标准是横向像素达到 4000。衡量屏幕显示的是像素密度。</p><!--**像素密度**--><p><a href="https://en.wikipedia.org/wiki/Pixel_density" target="_blank" rel="noopener">像素密度</a> ，英语为 Pixel Density，也叫 Pixels Per Inch（PPI），即单位英寸像素的多少（个数）。计算公式为 ppi = 像素/英寸。</p><ul><li>以 MacBook Pro 2017 13.3-inch 为例，ppi = √(2560^2 × 1600^2) / 13.3 ≈ 227，即斜对角每英寸有 227 个像素</li><li>以 iPhone XR 为例，ppi = √(1792^2 × 828^2) / 6.06 ≈ 326</li><li>以 <a href="https://www.apple.com/iphone-11-pro/specs/" target="_blank" rel="noopener">iPhone 11 PRO</a> 为例，ppi = √(2436^ × 1125^) / 5.8 ≈ 458</li></ul><p>对于屏幕来说，ppi 越高，显示就越清晰，就越不容易看见颗粒感。</p><h3 id="3-1、像素的内存大小"><a href="#3-1、像素的内存大小" class="headerlink" title="3.1、像素的内存大小"></a>3.1、像素的内存大小</h3><p>上面那张截图占内存太小，找张占内存大一点的分析。</p><table><thead><tr><th>未压缩前</th><th>压缩后</th></tr></thead><tbody><tr><td><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-07-101445.png" alt="image-20200807181444442"></td><td><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-07-101336.png" alt="image-20200807181336766"></td></tr><tr><td><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-07-101537.png" alt="image-20200807181537056"></td><td><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-08-07-101616.png" alt="image-20200807181616576"></td></tr></tbody></table><ul><li>1KB = 1000 Bytes（字节）（十进制换算）；1KB = 1024 Bytes（二进制换算）</li></ul><p>这张全屏壁纸截图未压缩前大小为 2880 × 1800，所以有 5,184,000 个像素点，图片内存为 8.7 MB（8,738,825 bytes），有 69,910,600 位（bit），每个像素点约占 13.5 位。</p><p>压缩后分辨率不变，内存为 2.8 MB，为 23,488,102 位，每个像素点约占 4.3 位。</p><p>可以看出，截屏图片的像素没有达到默认的 32 位，我认为是图片颜色没有特别丰富，所以用不了 32 位表示。测试截颜色单一的屏幕，所需要的内存更低。个人认为这跟 UTF-8 类似，像素点的大小为可变，不常见的颜色更占内存。</p><p>值得注意的是，虽然 MacBook Pro 的屏幕分辨率是 2560 × 1600 px，但系统默认做了一定缩放，缩放为了 2880  ×  1800 px，而屏幕显示为 1440  ×  900 pt（point，1pt = 2px），即将 4 个像素压缩为 1 个像素显示，来实现更好的显示效果，这被称为 Retain 技术。所以在 macOS 中，浏览器前端样式 1 px 对应 1 pt。</p><h2 id="四、PNG-vs-JPEG-JPG"><a href="#四、PNG-vs-JPEG-JPG" class="headerlink" title="四、PNG vs JPEG(JPG)"></a>四、PNG vs JPEG(JPG)</h2><p><a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics" target="_blank" rel="noopener">PNG</a>：<strong>P</strong>ortable <strong>N</strong>etwork <strong>G</strong>raphics，便携式网络图形。是一种支持<a href="https://en.wikipedia.org/wiki/Lossless_compression" target="_blank" rel="noopener">无损压缩</a>的<a href="https://zh.wikipedia.org/wiki/位图" target="_blank" rel="noopener">位图</a>图形格式。PNG 更适合保存截屏。</p><p>无损压缩一方面指压缩后对图片质量没有损失，另一方面指压缩后还可以还原（如压缩包解压）。PNG 图片可以无损压缩，但也可以有损压缩，就像前面的 pngquant 一样。</p><p><a href="https://en.wikipedia.org/wiki/JPEG" target="_blank" rel="noopener">JPEG</a>：<strong>J</strong>oint <strong>P</strong>hotographic <strong>E</strong>xperts <strong>G</strong>roup，联合图像专家小组。一种用于<a href="https://en.wikipedia.org/wiki/Lossy_compression" target="_blank" rel="noopener">有损压缩</a>的图片格式。更适合保存照片。</p><!--对于色彩和阴影复杂的图像是一个很好的选择。--><p>有损压缩的原理一般是变换数据编码方法，变换编码方法为用不精确逼近和部分数据丢弃来表示内容。有损压缩后不能还原。</p><ul><li>JPG：JPG 是  JPEG 图片的一种文件后缀，可以认为两者没有区别。ps：一个号称可以无损压缩 JPEG 图片的网站：<a href="https://www.picdiet.com/zh-cn" target="_blank" rel="noopener">picdiect</a></li></ul><!--修改截屏图片类型：defaults write com.apple.screencapture type PNG--><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><p>关于图片大小的错觉，来自一次我公众号不能显示文章图片的经历，那张图片是我用 iPhone 拍摄的图片，有几 MB，这造成了我认为苹果设备图片会很大的错觉，所以认为 Clipboard History 显示截屏图片大小就是正确的。我还通过将图片上传到阿里云后，在线打开链接，复制图片到剪贴板，再通过 Clipboard History 来查看图片大小来验证图片是不是真的这么大，这种错误的方式进一步加深了我认为图片确实很大的错觉。汗颜。</p><p>友情提示：使用阿里云对象储存作为图床时，建议设置<a href="https://help.aliyun.com/document_detail/31869.html" target="_blank" rel="noopener">防盗链</a>，避免别人使用你图片链接造成你图床费用大幅增加的问题。</p><p>这篇文章实现自动压缩截屏用时不多，但为了正确表述出「像素与分辨率」却用时不少，而关于为什么 PNG 适合保存截图，JPEG 适合保存照片，也还没彻底搞懂，后面有机会再深入研究一下。</p><p>最后，如果你有更好的方法实现截屏压缩，请一定留言告诉我。</p><h2 id="六、延伸阅读"><a href="#六、延伸阅读" class="headerlink" title="六、延伸阅读"></a>六、延伸阅读</h2><ul><li><a href="https://about.gitlab.com/blog/2020/01/30/simple-trick-for-smaller-screenshots/" target="_blank" rel="noopener">One simple trick to make your screenshots 80% smaller</a></li><li><a href="https://undsgn.com/jpg-vs-png/" target="_blank" rel="noopener">JPG vs PNG: Which to Choose for Your Website?</a></li><li><a href="http://screen-size.info/" target="_blank" rel="noopener">Screen Size Calculator</a></li><li><a href="https://www.piliapp.com/actual-size/cm-ruler/" target="_blank" rel="noopener">What is my monitor size?</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/08/07/how-to-automatically-compress-screenshot-size-in-macos/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一道算法题：水流过几个格子</title>
      <link>https://depp.wang/2020/07/01/how-many-the-grids-does-water-flow-through/</link>
      <guid>https://depp.wang/2020/07/01/how-many-the-grids-does-water-flow-through/</guid>
      <pubDate>Wed, 01 Jul 2020 20:48:37 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/07/01/how-many-the-grids-does-water-flow-through&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目来源&quot;&gt;&lt;a href=&quot;#题目来源&quot; class=&quot;headerlink&quot; title=&quot;题目来源&quot;&gt;&lt;/a&gt;题目来源&lt;/h2&gt;&lt;p&gt;一道做智能的对话机器人公司的算法测试题&lt;/p&gt;
&lt;!--[爱因互动](https://einplus.cn/) Python 职位测试题--&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/07/01/how-many-the-grids-does-water-flow-through">原文地址</a></p></blockquote><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p>一道做智能的对话机器人公司的算法测试题</p><!--[爱因互动](https://einplus.cn/) Python 职位测试题--><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一个矩形的水槽被分为了 N * M 个格子，每个格子内的高度都不同，每个格子和直接相邻的格子相通（对角相邻的不相通）。从最左上角的格子注入水，水会向相通的较低的或同样高的格子流动，但不会流向较高的格子。请写程序计算水一共会流经多少个格子？</p><p> 例如如果格子高度如下分布：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">3 | 5 | 1</span><br><span class="line">---------</span><br><span class="line">2 | 1 | 5  </span><br><span class="line">---------</span><br><span class="line">4 | 2 | 1</span><br></pre></td></tr></table></figure><p>则水会从左上角流经 3、2、1 三个格子，答案为 3。</p><h2 id="解题方案"><a href="#解题方案" class="headerlink" title="解题方案"></a>解题方案</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>需要利用广度优先搜索（队列）的思路</li><li>将元素位置作为队列元素，而不使用元素值作为队列元素</li><li>将 [0, 0] 加入队列，依次遍历队列，将四周小于当前数值的元素加入队列，直到遍历完</li></ul><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">3 | 5 | 1</span><br><span class="line">---------</span><br><span class="line">2 | 1 | 5  </span><br><span class="line">---------</span><br><span class="line">4 | 2 | 1</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">   <span class="number">3</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">   <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">   ↑     </span><br><span class="line">   <span class="number">3</span>     <span class="number">2</span>     <span class="number">1</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">         ↑</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">5 | 5 | 1</span><br><span class="line">---------</span><br><span class="line">2 | 1 | 5  </span><br><span class="line">---------</span><br><span class="line">4 | 2 | 1</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">   <span class="number">5</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">   </span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>    <span class="number">2</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">   ↑</span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>     <span class="number">2</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">         ↑</span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>     <span class="number">2</span>     <span class="number">1</span>     <span class="number">1</span>     </span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>]]  [<span class="number">1</span>,<span class="number">1</span>] 已存在，跳过</span><br><span class="line">               ↑</span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>     <span class="number">2</span>     <span class="number">1</span>     <span class="number">1</span>     </span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">                     ↑</span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>     <span class="number">2</span>     <span class="number">1</span>     <span class="number">1</span>     </span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">                           ↑</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N^2)。N 为格子数量，因需要判断元素在队列中是否已经存在，所以需要跟其他元素比较</li><li>空间复杂度：O(N)。N 为格子数量，最长需要长度为 N 的额外队列</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printGridNumber</span><span class="params">(self, height_arr)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">judge_contain</span><span class="params">(key, queue)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> queue:</span><br><span class="line">                <span class="keyword">if</span> x == key:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(queue, i, j)</span>:</span></span><br><span class="line">            xlen = len(height_arr)</span><br><span class="line">            ylen = len(height_arr[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> height_arr[i - <span class="number">1</span>][j] &lt;= height_arr[i][j] <span class="keyword">and</span> <span class="keyword">not</span> judge_contain([i - <span class="number">1</span>, j], queue):</span><br><span class="line">                queue.append([i - <span class="number">1</span>, j])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> height_arr[i][j - <span class="number">1</span>] &lt;= height_arr[i][j] <span class="keyword">and</span> <span class="keyword">not</span> judge_contain([i, j - <span class="number">1</span>], queue):</span><br><span class="line">                queue.append([i, j - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; xlen <span class="keyword">and</span> height_arr[i + <span class="number">1</span>][j] &lt;= height_arr[i][j] <span class="keyword">and</span> <span class="keyword">not</span> judge_contain([i + <span class="number">1</span>, j], queue):</span><br><span class="line">                queue.append([i + <span class="number">1</span>, j])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j + <span class="number">1</span> &lt; ylen <span class="keyword">and</span> height_arr[i][j + <span class="number">1</span>] &lt;= height_arr[i][j] <span class="keyword">and</span> <span class="keyword">not</span> judge_contain([i, j + <span class="number">1</span>], queue):</span><br><span class="line">                queue.append([i, j + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        queue = [[<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">        append(queue, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> queue:</span><br><span class="line">            append(queue, x[<span class="number">0</span>], x[<span class="number">1</span>])</span><br><span class="line">            <span class="comment"># print(queue)</span></span><br><span class="line">        <span class="keyword">return</span> len(queue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    height_arr = [[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]]</span><br><span class="line">    print(solution.printGridNumber(height_arr))</span><br></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[[<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]]  # input</span><br><span class="line"><span class="number">3</span>                                  # expect value</span><br><span class="line"></span><br><span class="line">[[<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h2><ul><li>直接遍历所有元素，如果当前值小于左上角、小于周围的值、周围的值小于左上角，则将结果加 1</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printGridNumber</span><span class="params">(self, height_arr)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(i, j)</span>:</span></span><br><span class="line">            left_top_height = height_arr[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            xlen = len(height_arr)</span><br><span class="line">            ylen = len(height_arr[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> left_top_height &gt;= height_arr[i - <span class="number">1</span>][j] &gt;= height_arr[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> left_top_height &gt;= height_arr[i][j - <span class="number">1</span>] &gt;= height_arr[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; xlen <span class="keyword">and</span> left_top_height &gt;= height_arr[i + <span class="number">1</span>][j] &gt;= height_arr[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j + <span class="number">1</span> &lt; ylen <span class="keyword">and</span> left_top_height &gt;= height_arr[i][j + <span class="number">1</span>] &gt;= height_arr[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(height_arr) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> len(height_arr[<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        left_top_height = height_arr[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(left_top_height)</span></span><br><span class="line">        number = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height_arr)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(height_arr[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> height_arr[i][j] &lt;= left_top_height <span class="keyword">and</span> judge(i, j):</span><br><span class="line">                    number += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    height_arr = [[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line">    print(solution.printGridNumber(height_arr))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://depp.wang/2020/07/01/how-many-the-grids-does-water-flow-through/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一个发布文章到博客园的 Python 脚本</title>
      <link>https://depp.wang/2020/06/20/a-python-script-to-edit-and-add-cnblogs-posts/</link>
      <guid>https://depp.wang/2020/06/20/a-python-script-to-edit-and-add-cnblogs-posts/</guid>
      <pubDate>Sat, 20 Jun 2020 20:48:37 GMT</pubDate>
      <description>
      
        &lt;!--一个自动发布、更新本地文章到博客园的 Python 脚本--&gt;

&lt;!--一个可自动发布本地文章到博客园及更新博客园文章的 Python 脚本--&gt;

&lt;!--一个可编辑与新增博客园文章的 Python 脚本--&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://depp.wang/2020/06/20/a-python-script-to-edit-and-add-cnblogs-posts&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的&lt;a href=&quot;https//depp.wang&quot;&gt;个人独立博客&lt;/a&gt;是基于 Hexo 搭建的，因为小站，Google 搜索引擎收录文章比较慢，还搜不到&lt;/p&gt;
&lt;p&gt;为了解决这个问题，希望把文章也顺便发布到博客平台&lt;a href=&quot;https://www.cnblogs.com/deppwang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客园&lt;/a&gt;上。但不想每次手动复制粘贴，打算利用脚本实现，希望除了发布，并且还能更新文章。原来打算&lt;a href=&quot;https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/&quot;&gt;找到博客园接口&lt;/a&gt;，模拟操作接口实现。搜索发现博客园提供了 &lt;a href=&quot;https://rpc.cnblogs.com/metaweblog/deppwang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MetaWeblog 接口&lt;/a&gt;，所以利用接口，开发了这个脚本。&lt;a href=&quot;https://github.com/DeppWang/cnblogs-post&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源码地址&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!--一个自动发布、更新本地文章到博客园的 Python 脚本--><!--一个可自动发布本地文章到博客园及更新博客园文章的 Python 脚本--><!--一个可编辑与新增博客园文章的 Python 脚本--><blockquote><p><a href="https://depp.wang/2020/06/20/a-python-script-to-edit-and-add-cnblogs-posts">原文地址</a></p></blockquote><p>我的<a href="https//depp.wang">个人独立博客</a>是基于 Hexo 搭建的，因为小站，Google 搜索引擎收录文章比较慢，还搜不到</p><p>为了解决这个问题，希望把文章也顺便发布到博客平台<a href="https://www.cnblogs.com/deppwang" target="_blank" rel="noopener">博客园</a>上。但不想每次手动复制粘贴，打算利用脚本实现，希望除了发布，并且还能更新文章。原来打算<a href="https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/">找到博客园接口</a>，模拟操作接口实现。搜索发现博客园提供了 <a href="https://rpc.cnblogs.com/metaweblog/deppwang" target="_blank" rel="noopener">MetaWeblog 接口</a>，所以利用接口，开发了这个脚本。<a href="https://github.com/DeppWang/cnblogs-post" target="_blank" rel="noopener">源码地址</a></p><a id="more"></a><h2 id="如何使用这个脚本"><a href="#如何使用这个脚本" class="headerlink" title="如何使用这个脚本"></a>如何使用这个脚本</h2><p>博客园 -&gt; 管理 -&gt; 设置 -&gt; 允许 MetaWeblog 博客客户端访问</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-20-105444.png" alt="image-20200620185444059"></p><p>在 <code>cnblogs-post.py</code> 中配置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">config = &#123;</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'https://rpc.cnblogs.com/metaweblog/deppwang'</span>,               <span class="comment"># 你的 MetaWeblog 访问地址</span></span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'DeppWangXQ'</span>,                                           <span class="comment"># 你的登录用户名，可能跟上面的不一致</span></span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'12345678'</span>                                              <span class="comment"># 你的登录密码</span></span><br><span class="line">    <span class="string">'local_post_path'</span>: <span class="string">'/Users/yanjie/GitHub/HexoBlog/source/_posts/'</span>   <span class="comment"># 你的本地博文路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在文章开头，添加文章信息块，至少需要包括 title 和 tags，格式如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 一个可编辑与新增博客园文章的 Python 脚本</span><br><span class="line">english_title: a-python-script-to-edit-and-add-cnblogs-posts</span><br><span class="line">date: 2020-06-20 20:48:37</span><br><span class="line">tags: 博客园</span><br><span class="line">categories: Tools</span><br><span class="line">---</span><br><span class="line">正文开始 ...</span><br></pre></td></tr></table></figure><p>脚本根据文章名称来判断是否已经发布，如果已经发布，更新，否则新增。默认只操作最近修改文章，但也可以指定文章数量（count）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 cnblogs-post.py [count]   <span class="comment"># macOS/Linux</span></span><br><span class="line">python cnblogs-post.py [count]    <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><p>删除最近发布文章</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 cnblogs-post.py delete    <span class="comment"># macOS/Linux</span></span><br><span class="line">python cnblogs-post.py delete     <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpc.client</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'https://rpc.cnblogs.com/metaweblog/deppwang'</span>,</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">''</span>, </span><br><span class="line">    <span class="string">'password'</span>: <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetaWeblog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, username, password)</span>:</span></span><br><span class="line">        self.url, self.username, self.password = url, username, password</span><br><span class="line">        self.proxy = xmlrpc.client.ServerProxy(self.url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRecentPosts</span><span class="params">(self, count)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.proxy.metaWeblog.getRecentPosts(<span class="string">''</span>, self.username, self.password, count)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    metaWeblog = MetaWeblog(config[<span class="string">'url'</span>], config[<span class="string">'username'</span>], config[<span class="string">'password'</span>])</span><br><span class="line">    posts = metaWeblog.getRecentPosts(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="一文多发"><a href="#一文多发" class="headerlink" title="一文多发"></a>一文多发</h2><p>脚本只实现发布、更新文章到博客园。如果想实现一文多发，可使用 OpenWrit，或自己开发相应脚本，方法为<a href="https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/">找到相应接口</a>，使用模拟操作接口的方式实现</p><p>我个人没有一文多发的需求，感兴趣的同学可以做做</p><!--一文多发更多是面向自媒体工作者，他们需要图形化页面，统计数据等功能。--><!--ArtiPub 使用 [Puppeteer](https://github.com/puppeteer/puppeteer)，太重量级了，稳定性也比较差。一文多发的目的是扩散，最重要是方便、快速（命令行运行即可），除了发布，最好还有更新功能，像阅读统计之类的功能其实可有可无。--><!--OpenWrit 应该也就是使用模拟操作接口的方式实现的，其实我们自己可以找到相应接口，写脚本实现，找接口可参考[这篇文章](https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/)--><!--我个人没有一文多发的需求，感兴趣的同学可以做做--><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://extendswind.top/posts/technical/python3_publish_blog/" target="_blank" rel="noopener">https://extendswind.top/posts/technical/python3_publish_blog/</a></li><li><a href="https://github.com/Whistle1988/auto_post_article" target="_blank" rel="noopener">https://github.com/Whistle1988/auto_post_article</a></li><li><a href="https://rpc.cnblogs.com/metaweblog/deppwang" target="_blank" rel="noopener">https://rpc.cnblogs.com/metaweblog/deppwang</a></li><li><a href="http://samwirch.com/blog/recursively-find-the-last-modified-file-in-python" target="_blank" rel="noopener">http://samwirch.com/blog/recursively-find-the-last-modified-file-in-python</a></li><li><a href="https://github.com/executablebooks/markdown-it-py" target="_blank" rel="noopener">https://github.com/executablebooks/markdown-it-py</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/06/20/a-python-script-to-edit-and-add-cnblogs-posts/#disqus_thread</comments>
    </item>
    
    <item>
      <title>快速排序的几种实现方式</title>
      <link>https://depp.wang/2020/06/18/several-implementations-of-quick-sort/</link>
      <guid>https://depp.wang/2020/06/18/several-implementations-of-quick-sort/</guid>
      <pubDate>Thu, 18 Jun 2020 20:48:37 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://depp.wang/2020/06/18/several-implementations-of-quick-sort/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;快速排序（quick sort）的特点是分块排序，也叫划分交换排序（partition-exchange sort）&lt;/p&gt;
&lt;p&gt;代码实现方式可以有这么几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拼接结果&lt;/li&gt;
&lt;li&gt;左右相互交换&lt;/li&gt;
&lt;li&gt;快慢指针&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p><a href="https://depp.wang/2020/06/18/several-implementations-of-quick-sort/">原文地址</a></p></blockquote><p>快速排序（quick sort）的特点是分块排序，也叫划分交换排序（partition-exchange sort）</p><p>代码实现方式可以有这么几种：</p><ol><li>拼接结果</li><li>左右相互交换</li><li>快慢指针</li></ol><a id="more"></a><h2 id="1-拼接结果"><a href="#1-拼接结果" class="headerlink" title="1. 拼接结果"></a>1. 拼接结果</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="comment"># 当为 0 个或 1 个时，肯定有序，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 选择第一位作为中位数</span></span><br><span class="line">            mid = nums[<span class="number">0</span>]</span><br><span class="line">            less = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:] <span class="keyword">if</span> num &lt;= mid]</span><br><span class="line">            greater = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:] <span class="keyword">if</span> num &gt; mid]</span><br><span class="line">            <span class="keyword">return</span> self.quicksort(less) + [mid] + self.quicksort(greater)</span><br></pre></td></tr></table></figure><p>这种方式最直观，最好理解，但效率不高。为了找出大于和小于中位数的元素，循环遍历了 2 次</p><p>做一点小小的修改，改为一次遍历：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = nums[<span class="number">0</span>]</span><br><span class="line">            less, greater = self.partition(nums, mid)[<span class="number">0</span>], self.partition(nums, mid)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">return</span> self.quicksort(less) + [mid] + self.quicksort(greater)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, nums, mid)</span>:</span></span><br><span class="line">        less, greater = [], []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> num &lt;= mid:</span><br><span class="line">                less.append(num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                greater.append(num)</span><br><span class="line">        <span class="keyword">return</span> less, greater</span><br></pre></td></tr></table></figure><p>优化后，运行时间降低了，但空间使用还很高，每次递归都额外需要 2 个平均长度为  &frac14; n 的数组</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> ... + n<span class="number">-1</span> + n = ((n + <span class="number">1</span>) * n ) / <span class="number">2</span></span><br><span class="line">平均值 = ((n + <span class="number">1</span>) * n ) / <span class="number">2</span> / n = (n + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">两个数组平分平均值： (n + <span class="number">1</span>) / <span class="number">2</span> / <span class="number">2</span> ≈ <span class="number">1</span>/<span class="number">4</span> n</span><br></pre></td></tr></table></figure><h2 id="2-左右相互交换"><a href="#2-左右相互交换" class="headerlink" title="2. 左右相互交换"></a>2. 左右相互交换</h2><p>其实可以不使用额外空间，直接操作原数组。选择一个基准值，将小于它和大于它的元素相互交换。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.quick_sort(nums, <span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(self, nums, start, end)</span>:</span></span><br><span class="line">        <span class="comment"># end - start &lt; 1</span></span><br><span class="line">        <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 每次使用最后一个数作为基准值</span></span><br><span class="line">        pivot_index = end</span><br><span class="line">        pivot = nums[pivot_index]</span><br><span class="line">        </span><br><span class="line">        left, right = start, end - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="comment"># 左边跳过所有小于基准值的元素</span></span><br><span class="line">            <span class="keyword">while</span> nums[left] &lt;= pivot <span class="keyword">and</span> left &lt; right:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 右边跳过所有大于基准值的元素</span></span><br><span class="line">            <span class="keyword">while</span> nums[right] &gt; pivot <span class="keyword">and</span> left &lt; right:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 交换</span></span><br><span class="line">            nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此时左右指针重合（left == right），其指向元素可能大于基准值</span></span><br><span class="line">        <span class="keyword">if</span> nums[left] &gt; pivot:</span><br><span class="line">            nums[left], nums[pivot_index] = nums[pivot_index], nums[left]</span><br><span class="line">        <span class="comment"># 使 left 始终作为较大区间的第 1 个元素</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        self.quick_sort(nums, start, left - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># pivot 不一定在中间，所以包含 left</span></span><br><span class="line">        self.quick_sort(nums, left, end)</span><br></pre></td></tr></table></figure><p>使用此种方式，最好要将开头（或末尾）的元素设为基准值。如果使用中间元素，也最好先交换到开头（或末尾），否则将考虑大量场景。</p><p>排序过程：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="number">6</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> ↑                 ↑  ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">4</span>]</span><br><span class="line">    ↑     ↑           ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">4</span>]</span><br><span class="line">          ↑↑          ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br><span class="line">          ^           </span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>][<span class="number">4</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>nums[left] &lt;= pivot 时：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="number">6</span>  <span class="number">7</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>]</span><br><span class="line"> ↑                 ↑  ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">7</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">1</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br><span class="line">    ↑           ↑     ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br><span class="line">          ↑↑          ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span>][<span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h2 id="3-快慢指针"><a href="#3-快慢指针" class="headerlink" title="3. 快慢指针"></a>3. 快慢指针</h2><p>上面这种方式其实使用两个相向指针，也可以使用同向快慢指针实现元素交换。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> random</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(left, right)</span>:</span></span><br><span class="line">            <span class="comment"># right - left &lt; 1</span></span><br><span class="line">            <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 随机选择一个元素作为 pivot</span></span><br><span class="line">            pivot_index = random.randint(left, right)</span><br><span class="line">            pivot = nums[pivot_index]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 1. 将中位数与末尾数交换，便于操作</span></span><br><span class="line">            nums[pivot_index], nums[right] = nums[right], nums[pivot_index]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 使用快慢指针，将所有小于中位数的元素移动到左边</span></span><br><span class="line">            store_index = left</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(left, right):</span><br><span class="line">                <span class="keyword">if</span> nums[i] &lt;= pivot:</span><br><span class="line">                    nums[store_index], nums[i] = nums[i], nums[store_index]</span><br><span class="line">                    store_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3. store_index 位置元素肯定大于等于 pivot，所以交换</span></span><br><span class="line">            nums[right], nums[store_index] = nums[store_index], nums[right]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 因为 pivot 在中间，所以减 1</span></span><br><span class="line">            quick_sort(left, store_index - <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 因为 pivot 在中间，所以加 1</span></span><br><span class="line">            quick_sort(store_index + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        quick_sort(<span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>排序过程：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="number">6</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> ↑↑                   ^</span><br><span class="line">[<span class="number">6</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> ↑     ↑              ^</span><br><span class="line">[<span class="number">3</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line">    ↑     ↑           ^</span><br><span class="line">[<span class="number">3</span>  <span class="number">1</span>  <span class="number">6</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line">       ↑           ↑  ^</span><br><span class="line">[<span class="number">3</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">4</span>]</span><br><span class="line">          ↑           ^</span><br><span class="line">[<span class="number">3</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br><span class="line">          ^     </span><br><span class="line">[<span class="number">3</span>  <span class="number">1</span>  <span class="number">2</span>][<span class="number">4</span>][<span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>随机选择可以增加每次选择的基准值为中位数的几率</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="最坏时间复杂度"><a href="#最坏时间复杂度" class="headerlink" title="最坏时间复杂度"></a>最坏时间复杂度</h3><p>每次基准值都是最大 （或最小）值时，所需递归次数最多，有两种情况：</p><ol><li>数组有序时，每次使用最后 1 位（或第 1 位）作为基准值</li></ol><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line">                      ^</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span> [<span class="number">8</span>]</span><br><span class="line">                   ^</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span> [<span class="number">7</span>]</span><br><span class="line">                ^</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span> [<span class="number">6</span>]</span><br><span class="line">             ^  </span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span> [<span class="number">5</span>]</span><br><span class="line">          ^  </span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> [<span class="number">4</span>]</span><br><span class="line">       ^  </span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span> [<span class="number">3</span>]</span><br><span class="line">    ^ </span><br><span class="line"> <span class="number">1</span> [<span class="number">2</span>]</span><br><span class="line"> ^ </span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>随机选择时，每次选择到最大（或最小）的一位</li></ol><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"> <span class="number">6</span>  <span class="number">7</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span></span><br><span class="line">             ^</span><br><span class="line"> <span class="number">6</span>  <span class="number">7</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span> [<span class="number">8</span>]</span><br><span class="line">    ^         </span><br><span class="line"> <span class="number">6</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span> [<span class="number">7</span>] <span class="number">8</span></span><br><span class="line"> ^ </span><br><span class="line"> <span class="number">3</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span> [<span class="number">6</span>] <span class="number">7</span>  <span class="number">8</span></span><br><span class="line">             ^ </span><br><span class="line"> <span class="number">3</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">2</span> [<span class="number">5</span>] <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line">    ^ </span><br><span class="line"> <span class="number">3</span>  <span class="number">1</span>  <span class="number">2</span> [<span class="number">4</span>] <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"> ^</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span> [<span class="number">3</span>] <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line">    ^</span><br><span class="line"> <span class="number">1</span> [<span class="number">2</span>] <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"> ^</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br></pre></td></tr></table></figure><p>此时递归次数为 n + 1，平均每次排序  &frac12; n 个数。所以最坏时间复杂度：O(n^2)。</p><h3 id="最好时间复杂度"><a href="#最好时间复杂度" class="headerlink" title="最好时间复杂度"></a>最好时间复杂度</h3><p>如果每次选择中位数作为基准值，递归次数会减少么？其实不会减少，但递归中遍历的次数会减少。如果每层遍历看成 n 次的话，可以用下面的这个图表示：</p><!--[图片来自《算法图解》](https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-18-124518.png)--><p><figure>  <img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-18-124518.png" alt="图片来自《算法图解》">  <figcaption style="text-align: center">图片来自《算法图解》</figcaption></figure></p><p>所以最好时间复杂度为：O(n * log n)</p><h3 id="平均时间复杂度"><a href="#平均时间复杂度" class="headerlink" title="平均时间复杂度"></a>平均时间复杂度</h3><p>最坏时间复杂度的情况很少见，所以平均时间复杂度就是最好时间复杂度 O(n * log n)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>每次递归均会使用额外空间，所以空间复杂度跟递归次数有关。</p><p>最坏时间复杂度时，最坏空间复杂度也为 O(n)。最好时间复杂度时时，虽然递归没有减少，但当只有 1 个或 0 个元素时，没有使用额外空间，直接返回，所以最好空间复杂度为 O(log n)。平均时间复杂度也为 O(log n)。</p><p>第 1 种实现因为使用额外数组，最坏空间复杂度为 O(n^2)，最好空间复杂度为 O(n * log n)，</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># nums = [3, 2, 1, 5, 6, 4]</span></span><br><span class="line">    <span class="comment"># 针对第 1 种</span></span><br><span class="line">    print(Solution().quicksort(nums))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 针对第 2、3 种</span></span><br><span class="line">    <span class="comment"># Solution().quicksort(nums)</span></span><br><span class="line">    <span class="comment"># print(nums)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">Quicksort</a></li><li><a href="https://zh.wikipedia.org/wiki/中位數" target="_blank" rel="noopener">中位数</a></li><li><a href="http://en.wikipedia.org/wiki/Pivot_element" target="_blank" rel="noopener">Pivot element</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/06/18/several-implementations-of-quick-sort/#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何查找某个网站的（如：有道云笔记）的接口</title>
      <link>https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/</link>
      <guid>https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/</guid>
      <pubDate>Thu, 11 Jun 2020 20:48:37 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开发了个 《一键导出 / 备份「有道云笔记」所有笔记》的&lt;a href=&quot;https://github.com/DeppWang/youdaonote-pull&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;脚本&lt;/a&gt;。主要原理是利用有道云笔记本身的接口。下面是根据正常用户操作逻辑，找到需要的接口，主要是登录和「下载」。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com">原文地址</a></p></blockquote><p>开发了个 《一键导出 / 备份「有道云笔记」所有笔记》的<a href="https://github.com/DeppWang/youdaonote-pull" target="_blank" rel="noopener">脚本</a>。主要原理是利用有道云笔记本身的接口。下面是根据正常用户操作逻辑，找到需要的接口，主要是登录和「下载」。</p><a id="more"></a><h2 id="一、登录"><a href="#一、登录" class="headerlink" title="一、登录"></a>一、登录</h2><p>登录的目的是获取 Cookie</p><h3 id="1-1-找登录接口"><a href="#1-1-找登录接口" class="headerlink" title="1.1 找登录接口"></a>1.1 找登录接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-150019.png" alt="image-20200610230018739" style="zoom:50%;"></p><p>接口应该在登录时执行。使用<strong>错误密码</strong>测试，可得到登录 post 请求接口。注意过滤条件是 <strong>All</strong></p><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">https://note.youdao.com/login/acc/urs/verify/<span class="meta">check</span>?app=web<span class="variable">&amp;product</span>=YNOTE<span class="variable">&amp;tp</span>=urstoken<span class="variable">&amp;cf</span>=6<span class="variable">&amp;fr</span>=1<span class="variable">&amp;systemName</span>=<span class="variable">&amp;deviceType</span>=<span class="variable">&amp;ru</span>=</span><br><span class="line">https://note.youdao.com/signIn//loginCallback.html<span class="variable">&amp;er</span>=</span><br><span class="line">https://note.youdao.com/signIn//loginCallback.html&amp;</span><br><span class="line">vcode=dman9<span class="variable">&amp;systemName</span>=mac<span class="variable">&amp;deviceType</span>=MacPC<span class="variable">&amp;timestamp</span>=1591770253472</span><br></pre></td></tr></table></figure><h3 id="1-2-推导密码加密规则"><a href="#1-2-推导密码加密规则" class="headerlink" title="1.2 推导密码加密规则"></a>1.2 推导密码加密规则</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-062936.png" alt="image-20200610142935436"></p><p>本地测试使用同样错误密码用不同加密算法加密，看加密结果是否一致</p><p>发现使用 md5 加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Python3</span></span><br><span class="line">password=hashlib.md5(password.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br></pre></td></tr></table></figure><h3 id="1-3-找返回验证登录状态-Cookie-的接口"><a href="#1-3-找返回验证登录状态-Cookie-的接口" class="headerlink" title="1.3 找返回验证登录状态 Cookie 的接口"></a>1.3 找返回验证登录状态 Cookie 的接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-091312.png" alt="image-20200610171312277" style="zoom:50%;"></p><p>登录成功后，会返回验证登录状态的 Cookie。接口应该在登录成功后执行。发现跳转首页后第一个 XHR 接口中包含验证登录状态的 Cookie，YNOTE_CSTK</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">https://note.youdao.com/yws/mapi/<span class="keyword">user</span>?<span class="keyword">method</span>=<span class="keyword">get</span>&amp;multilevelEnable=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><!--只需要有 YNOTE_CSTK 和 YNOTE_SESS 两个即可登录，两个都需要登录成功后的值，不一定要一起返回的。只暴露 YNOTE_CSTK 不用担心账号被登录--><h2 id="二、「下载」"><a href="#二、「下载」" class="headerlink" title="二、「下载」"></a>二、「下载」</h2><h3 id="2-1-找返回根目录-id-的接口"><a href="#2-1-找返回根目录-id-的接口" class="headerlink" title="2.1 找返回根目录 id 的接口"></a>2.1 找返回根目录 id 的接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-11-054205.png" alt="image-20200611134205218" style="zoom:50%;"></p><p>我们根据一个笔记 URL 可以看出，URL 里包含了父文件夹 id 和当前文件 id。「我的文件夹」下的 test.md 的 URL：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/note.youdao.com/web</span><span class="regexp">/#/file</span><span class="regexp">/F83DF1ADA69344D194C7CE861D09B1A1/note</span><span class="regexp">/WEB4aa8bf8074d61befea1dd20f5593f01c/</span></span><br></pre></td></tr></table></figure><p>「我的文件夹」 是根目录，它的 id 是 <code>F83DF1ADA69344D194C7CE861D09B1A1</code>，下面称它为 root_id。</p><p>我们推测，有道云笔记是设计是根据文件夹 id，获取文件夹下的所有文件信息（打开文件夹，可看到文件夹下的文件）。所以我们需要先得到 root_id。当登录成功后，跳转到首页时，应该有接口能得到 root_id。</p><p>测试发现下面接口返回值包含 root_id：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>note.youdao.com<span class="regexp">/yws/</span>api<span class="regexp">/personal/</span>file?method=getByPath&amp;keyfrom=web&amp;cstk=<span class="number">01</span>PvSwwu</span><br></pre></td></tr></table></figure><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-11-070108.png" alt="image-20200611150107522" style="zoom:50%;"></p><p>接口返回格式类似这样：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"fileEntry"</span>:&#123;</span><br><span class="line">        <span class="attr">"userId"</span>:<span class="string">"m17191082115@163.com"</span>,</span><br><span class="line">        "id":"F83DF1ADA69344D194C7CE861D09B1A1", // root_id</span><br><span class="line">        "version":22888,</span><br><span class="line">        "name":"ROOT",</span><br><span class="line">        "parentId":"0",</span><br><span class="line">        "createTimeForSort":1497860357,</span><br><span class="line">        "modifyTimeForSort":1497860357,</span><br><span class="line">        ....</span><br><span class="line">    &#125;,</span><br><span class="line">    "fileMeta":&#123;</span><br><span class="line">        "chunkList":"None",</span><br><span class="line">        "sharedCount":0,</span><br><span class="line">        "title":"ROOT",</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root_id = response.content[<span class="string">'fileEntry'</span>][<span class="string">'id'</span>]</span><br></pre></td></tr></table></figure><h3 id="2-2-找获取目录下所有文件信息的接口"><a href="#2-2-找获取目录下所有文件信息的接口" class="headerlink" title="2.2 找获取目录下所有文件信息的接口"></a>2.2 找获取目录下所有文件信息的接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-11-052343.png" alt="image-20200611132342543" style="zoom:50%;"></p><p>有了 root_id，需要找到根据 id 获取目录下所有文件信息的接口。</p><p>接口应该在打开文件夹时执行。点击某一个文件夹，测试发现包含当前目录所有文件信息的接口为：</p><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">https://note.youdao.com/yws/api/personal/<span class="meta">file</span>/9d8a2385eeec77338211b4f04bbf844d?all=true<span class="variable">&amp;f</span>=true<span class="variable">&amp;len</span>=30<span class="variable">&amp;sort</span>=1<span class="variable">&amp;isReverse</span>=false<span class="variable">&amp;method</span>=listPageByParentId<span class="variable">&amp;keyfrom</span>=web<span class="variable">&amp;cstk</span>=01PvSwwu</span><br></pre></td></tr></table></figure><p>接口返回格式跟上面差不多，只是数量更多，属性多了 parentId（父文件夹 id）。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"fileEntry"</span>:&#123;</span><br><span class="line">            <span class="attr">"userId"</span>:<span class="string">"m17191082115@163.com"</span>,</span><br><span class="line">            <span class="attr">"id"</span>:<span class="string">"9d8a2385eeec77338211b4f04bbf844d"</span>,</span><br><span class="line">            <span class="attr">"version"</span>:<span class="number">14168</span>,</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"来自手机"</span>,</span><br><span class="line">            "parentId":"F83DF1ADA69344D194C7CE861D09B1A1", // 父文件夹的 id，此时是 root_id</span><br><span class="line">            "createTimeForSort":1550712995,</span><br><span class="line">            "modifyTimeForSort":1550713003,</span><br><span class="line">            ....</span><br><span class="line">        &#125;,</span><br><span class="line">        "fileMeta":&#123;</span><br><span class="line">            "chunkList":null,</span><br><span class="line">            "sharedCount":0,</span><br><span class="line">            "title":"来自手机",</span><br><span class="line">            "fileSize":0,</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-3-找到获取文件内容的接口"><a href="#2-3-找到获取文件内容的接口" class="headerlink" title="2.3 找到获取文件内容的接口"></a>2.3 找到获取文件内容的接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-095111.png" alt="image-20200610175111568" style="zoom:50%;"></p><p>通过文件夹 id 得到了文件 id（fileId），需要找到根据 fileId 获取文件内容的接口。</p><p>接口应该在点击笔记标题得到笔记内容时执行。点击某一篇笔记标题，可以找到获取文件内容的接口：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>note.youdao.com<span class="regexp">/yws/</span>api<span class="regexp">/personal/</span>sync?method=download&amp;keyfrom=web&amp;cstk=<span class="number">01</span>PvSwwu</span><br></pre></td></tr></table></figure><h2 id="三、模拟浏览器操作"><a href="#三、模拟浏览器操作" class="headerlink" title="三、模拟浏览器操作"></a>三、模拟浏览器操作</h2><h3 id="3-1-设置请求头"><a href="#3-1-设置请求头" class="headerlink" title="3.1 设置请求头"></a>3.1 设置请求头</h3><p>随便哪个页面（如：首页 <code>https://note.youdao.com/</code>）可以看到请求头包含下面这些内容：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-102800.png" alt="image-20200610182800122" style="zoom:50%;"></p><p>取一部分设置即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YoudaoNoteSession</span><span class="params">(requests.Session)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">            <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-模拟「进入网页版」"><a href="#3-2-模拟「进入网页版」" class="headerlink" title="3.2 模拟「进入网页版」"></a>3.2 模拟「进入网页版」</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-113424.png" alt="image-20200610193423993" style="zoom: 50%;"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.get(<span class="string">'https://note.youdao.com/web/'</span>)</span><br></pre></td></tr></table></figure><p>点击「进入网页版」，会重定向到登录页面</p><h3 id="3-3-模拟打开登录页"><a href="#3-3-模拟打开登录页" class="headerlink" title="3.3 模拟打开登录页"></a>3.3 模拟打开登录页</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-060620.png" alt="image-20200610140619564" style="zoom: 67%;"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.get(<span class="string">'https://note.youdao.com/signIn/index.html?&amp;callback=https%3A%2F%2Fnote.youdao.com%2Fweb%2F&amp;from=web'</span>)</span><br></pre></td></tr></table></figure><p>跳转登录页后，要执行下面 3 个接口：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.get(<span class="string">'https://note.youdao.com/login/acc/pe/getsess?product=YNOTE&amp;_='</span> + timestamp())</span><br><span class="line">self.get(<span class="string">'https://note.youdao.com/auth/cq.json?app=web&amp;_='</span> + timestamp())</span><br><span class="line">self.get(<span class="string">'https://note.youdao.com/auth/urs/login.json?app=web&amp;_='</span> + timestamp())</span><br></pre></td></tr></table></figure><h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h2><p>根据找到的接口，模拟用户操作也有不少应用场景。除了开发像这种导出文件的脚本，可以开发一切你想自动化执行的操作。比方 cnblogs、juejin 发文章等。比较麻烦的就是像上面这样找接口了，可以先看看有没有人有过总结。</p><p>也可以利用一些浏览器的 API，如 <a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noopener">Puppeteer</a>，它提供一个真实的浏览器环境，可以真正模拟用户操作，不需要找到所有接口，只需要设置网页 url，以及设置需要操作的「按钮」属性。因为提供浏览器环境，它属于重量级操作。可以看看 <a href="https://github.com/crawlab-team/artipub" target="_blank" rel="noopener">ArtiPub</a> 如何使用 Puppeteer。这种方式有点不好的地方就是平台可能改前端属性，需要注意更新。</p><!--有什么不明白的看看[源码](http://github.com/DeppWang/youdaonote-pull/blob/master/pull.py)就知道了。--><p>全文完。</p><!--cnblogs.com 发布文章是用 i.cnblogs.com/api/posts 接口。所以 ArtiPub 没有接口？-->]]></content:encoded>
      
      <comments>https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/#disqus_thread</comments>
    </item>
    
    <item>
      <title>iTranswarp 部署记录</title>
      <link>https://depp.wang/2020/05/26/itranswarp-deploy-record/</link>
      <guid>https://depp.wang/2020/05/26/itranswarp-deploy-record/</guid>
      <pubDate>Tue, 26 May 2020 17:58:35 GMT</pubDate>
      <description>
      
        &lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/05/26/itranswarp-deploy-record/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目的：使用 &lt;a href=&quot;https://github.com/michaelliao/itranswarp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iTranswarp&lt;/a&gt; 学习 nginx 配置&lt;/p&gt;
&lt;p&gt;如果你只想本地启动，直接修改 ip，使用 docker-compose 即可&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/05/26/itranswarp-deploy-record/">原文地址</a></p><p>目的：使用 <a href="https://github.com/michaelliao/itranswarp" target="_blank" rel="noopener">iTranswarp</a> 学习 nginx 配置</p><p>如果你只想本地启动，直接修改 ip，使用 docker-compose 即可</p><a id="more"></a><h2 id="Google-Cloud-Platform-配置"><a href="#Google-Cloud-Platform-配置" class="headerlink" title="Google Cloud Platform 配置"></a>Google Cloud Platform 配置</h2><p>本地部署耗资源，服务器部署</p><p>腾讯云 clone GitHub 项目太慢，使用 <a href="https://console.cloud.google.com/" target="_blank" rel="noopener">Google Cloud Platform</a>，招商银行国际信用卡注册</p><p>Compute Engine 新建「虚拟机实例」 CentOS7</p><p>实例配置（防火墙）入站端口</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> tcp:<span class="number">13306</span>,<span class="number">16379</span>,<span class="number">443</span>,<span class="number">80</span></span><br></pre></td></tr></table></figure><p>「元数据」添加公钥 id_rsa.pub，使用 SSH 公钥登录，原理请看<a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH 原理与运用（一）：远程登录</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa(私钥) your_user_name@ip</span><br><span class="line"></span><br><span class="line">ssh -i ~/.ssh/id_rsa_4 deppwxq@35.201.176.108 # 示例</span><br></pre></td></tr></table></figure><p>安装 Git、配置别名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install git-core</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.unstage <span class="string">'reset HEAD'</span></span><br><span class="line">git config --global alias.last <span class="string">'log -1'</span></span><br><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'% Cred% h% Creset -% C(yellow)% d% Creset % s % Cgreen(% cr) % C(bold blue)&lt;% an&gt;% Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><p>切换为 ohmyzsh（个人习惯）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update &amp;&amp; sudo yum -y install zsh</span><br><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换 zsh 失败时，重新切换</span></span><br><span class="line">sudo chsh -s /bin/zsh your_user_name</span><br><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><ul><li>可能需要输入用户密码，用户密码为 Google 账号密码</li><li>未生效时重启实例，重启 ip 会变！</li></ul><p>语言设置为英文（默认就是英文，为何 Git 显示中文）</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">localectl</span></span><br></pre></td></tr></table></figure><p>安装 <a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Docker</a>，<a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 教程</a></p><p>安装 <a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">Docker-Compose</a>，<a href="https://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html" target="_blank" rel="noopener">Docker-Compose 教程</a></p><p>重启实例，ip 会变！需要重启 docker daemon</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>docker start</span><br></pre></td></tr></table></figure><h2 id="服务器运行项目"><a href="#服务器运行项目" class="headerlink" title="服务器运行项目"></a>服务器运行项目</h2><p>先 fork 项目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/your-name/itranswarp.git <span class="comment"># 使用 HTTPS</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> itranswarp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp .env.example .env</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim .env <span class="comment"># 修改为服务器公网 ip</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up <span class="comment"># 启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose stop <span class="comment"># 停止</span></span></span><br></pre></td></tr></table></figure><p>修改服务器 hosts，相当于 DNS</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure><p>使用 <a href="https://zh.wikipedia.org/wiki/Lynx" target="_blank" rel="noopener">lynx</a> 模拟服务器本地浏览器打开 <code>https://www.local.itranswarp.com/</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install lynx</span><br><span class="line">lynx https://www.local.itranswarp.com/</span><br></pre></td></tr></table></figure><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-05-25-143614.png" alt="image-20200525223613874"></p><p>远程连接 Redis</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 远程连接</span></span><br><span class="line">redis-cli -h XXX.XXX.XXX.XXX(ip) -p port -a password</span><br><span class="line">redis-cli -h ip -p 16379 -a JFPRJ</span><br></pre></td></tr></table></figure><p>远程连接 Mysql 使用 Navicat Premium</p><p>进入容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container exec -it [containerId] /bin/bash # 启动容器实例 bash</span><br><span class="line">or</span><br><span class="line">docker exec -it [containerId] /bin/bash</span><br></pre></td></tr></table></figure><h2 id="使用自定义域名"><a href="#使用自定义域名" class="headerlink" title="使用自定义域名"></a>使用自定义域名</h2><h3 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h3><p>（例：万网）配置域名解析</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">A www.xingquan.wang ip</span><br><span class="line">A static.xingquan.wang ip</span><br><span class="line">A source.xingquan.wang ip</span><br><span class="line">A @xingquan.wang ip</span><br></pre></td></tr></table></figure><h3 id="申请数字证书"><a href="#申请数字证书" class="headerlink" title="申请数字证书"></a>申请数字证书</h3><p><a href="https://freessl.org/" target="_blank" rel="noopener">freessl</a> 申请免费数字证书</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">www<span class="selector-class">.xingquan</span><span class="selector-class">.wang</span></span><br><span class="line">static<span class="selector-class">.xingquan</span><span class="selector-class">.wang</span></span><br><span class="line">source<span class="selector-class">.xingquan</span><span class="selector-class">.wang</span></span><br><span class="line">xingquan.wang</span><br></pre></td></tr></table></figure><p>可四个域名同时申请同一个数字证书，也可分开申请</p><p>离线申请，使用 <a href="https://keymanager.org/" target="_blank" rel="noopener">KeyManager</a>，最后「导出证书」，解压可得到两个文件：<code>**</code>.crt，<code>**</code>.key。crt 为数字证书，key 为服务器私钥，深入理解请看<a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&mid=2665513779&idx=1&sn=a1de58690ad4f95111e013254a026ca2&chksm=80d67b70b7a1f26697fa1626b3e9830dbdf4857d7a9528d22662f2e43af149265c4fd1b60024&scene=21#wechat_redirect" target="_blank" rel="noopener">一个故事讲完 https</a></p><h3 id="修改项目配置文件"><a href="#修改项目配置文件" class="headerlink" title="修改项目配置文件"></a>修改项目配置文件</h3><p>clone fork 项目到本地，（切换分支）修改配置。</p><p>全局将 local.itranswarp.com 修改为你的域名（如：xingquan.wang）</p><p>修改 local.itranswarp.com.crt / local.itranswarp.com.key 为 xingquan.wang.crt、xingquan.wang.key，使用「导出证书」的 crt、key 替换。local-conf 文件夹下可不修改</p><p>修改配置后，只重启 docker-compose（容器），配置是否生效？生效</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://www.xingquan.wang" target="_blank" rel="noopener">https://www.xingquan.wang</a></p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-05-26-084417.png" alt="image-20200526164417094" style="zoom:50%;"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习到</p><ul><li>HTTPS、证书</li><li>nginx 配置</li></ul><p>问题：</p><ul><li>Docker 如何进入容器操作，如查看日志、修改数据库</li><li>iTranswarp 作为博客，没有订阅地址？</li></ul><p>admin 默认密码为 123456</p>]]></content:encoded>
      
      <comments>https://depp.wang/2020/05/26/itranswarp-deploy-record/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一个一键导出/备份「有道云笔记」所有笔记的脚本</title>
      <link>https://depp.wang/2020/05/18/export-youdaonote-all-notes/</link>
      <guid>https://depp.wang/2020/05/18/export-youdaonote-all-notes/</guid>
      <pubDate>Mon, 18 May 2020 13:26:55 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/05/18/export-youdaonote-all-notes/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;出发点&quot;&gt;&lt;a href=&quot;#出发点&quot; class=&quot;headerlink&quot; title=&quot;出发点&quot;&gt;&lt;/a&gt;出发点&lt;/h2&gt;&lt;p&gt;原来一直是有道云笔记的忠实用户，后面接触到了所见即所得的 &lt;a href=&quot;https://typora.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typora&lt;/a&gt;，有点用不惯有道云笔记了，想着有什么法子能电脑本地文件和有道云笔记同步，这样电脑使用 Typora，手机使用有道云笔记。发现有道云笔记有 &lt;a href=&quot;http://note.youdao.com/open/developguide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Open API&lt;/a&gt; ，打算利用提供的 API，写两个脚本，一个 pull 所有文件到本地，一个 push 本地文件到云笔记。但 API 太难用了，N 多年没更新了，问客服也没更新的意思，开发到最后发现竟然没有 Markdown 文件的接口，醉了。遂放弃。&lt;/p&gt;
&lt;p&gt;现在我使用 Typora + &lt;a href=&quot;https://www.dropbox.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dropbox&lt;/a&gt; + &lt;a href=&quot;https://www.mweb.im/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MWeb&lt;/a&gt; 实现同步笔记和手机查看编辑的功能，很香。&lt;/p&gt;
&lt;p&gt;最近给朋友推荐此方式，但发现有道云笔记最新的 Mac 客户端和网页端去除了导出所有笔记的功能！这是什么逻辑，怕用户跑了么。所以在原来 pull 脚本的基础上修改得到此脚本。&lt;/p&gt;
&lt;p&gt;脚本地址：&lt;a href=&quot;https://github.com/DeppWang/youdaonote-pull&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/DeppWang/youdaonote-pull&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/05/18/export-youdaonote-all-notes/">原文地址</a></p></blockquote><h2 id="出发点"><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h2><p>原来一直是有道云笔记的忠实用户，后面接触到了所见即所得的 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>，有点用不惯有道云笔记了，想着有什么法子能电脑本地文件和有道云笔记同步，这样电脑使用 Typora，手机使用有道云笔记。发现有道云笔记有 <a href="http://note.youdao.com/open/developguide.html" target="_blank" rel="noopener">Open API</a> ，打算利用提供的 API，写两个脚本，一个 pull 所有文件到本地，一个 push 本地文件到云笔记。但 API 太难用了，N 多年没更新了，问客服也没更新的意思，开发到最后发现竟然没有 Markdown 文件的接口，醉了。遂放弃。</p><p>现在我使用 Typora + <a href="https://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a> + <a href="https://www.mweb.im/" target="_blank" rel="noopener">MWeb</a> 实现同步笔记和手机查看编辑的功能，很香。</p><p>最近给朋友推荐此方式，但发现有道云笔记最新的 Mac 客户端和网页端去除了导出所有笔记的功能！这是什么逻辑，怕用户跑了么。所以在原来 pull 脚本的基础上修改得到此脚本。</p><p>脚本地址：<a href="https://github.com/DeppWang/youdaonote-pull" target="_blank" rel="noopener">https://github.com/DeppWang/youdaonote-pull</a></p><a id="more"></a><h2 id="使用提示"><a href="#使用提示" class="headerlink" title="使用提示"></a>使用提示</h2><ol><li>脚本单纯本地运行，不用担心你的账号密码泄露。但注意，如果你自己修改脚本，注意不要将 config.json 文件 push 到 GitHub</li><li>.note 格式笔记下载后为 xml 格式，<strong>默认将 .note 格式笔记转换为 Markdown 格式</strong>，table 等未转换，需要手动复制</li><li>有道云笔记图床图片在有道云笔记外不显示，<strong>默认下载到本地，使用本地图片链接，可设置上传到免费的 <a href="https://sm.ms" target="_blank" rel="noopener">SM.MS</a> 上</strong></li><li>如果你不是开发者，可能对下面的命令行操作有所陌生，建议按步骤慢慢操作一遍。后续我会更加完善此文档，并根据需求看是否应该提供网页下载</li><li>请确认代码是否为最新，有问题请提交 issue</li></ol><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><!--针对普通用户--><h3 id="一、导出前的准备工作"><a href="#一、导出前的准备工作" class="headerlink" title="一、导出前的准备工作"></a>一、导出前的准备工作</h3><h4 id="1、安装-Git、clone-项目"><a href="#1、安装-Git、clone-项目" class="headerlink" title="1、安装  Git、clone 项目"></a>1、安装  <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>、clone 项目</h4><ul><li>可根据 <a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496" target="_blank" rel="noopener">廖雪峰 Git 教程</a> 安装 Git，测试是否安装成功</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><ul><li>打开命令行软件，如 Terminal (macOS)、PowerShell(Windows)，clone 项目，里面包含脚本</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd</span><br><span class="line">git clone https://github.com/DeppWang/youdaonote-pull.git</span><br><span class="line">cd youdaonote-pull</span><br></pre></td></tr></table></figure><h4 id="2、安装-Python3、安装依赖模块（包）"><a href="#2、安装-Python3、安装依赖模块（包）" class="headerlink" title="2、安装 Python3、安装依赖模块（包）"></a>2、安装 Python3、安装依赖模块（包）</h4><ul><li>可根据 <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1016959856222624" target="_blank" rel="noopener">廖雪峰 Python 教程</a> 安装 Python3，测试是否安装成功</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 --version  # macOS/Linux</span><br><span class="line">python --version  # Windows</span><br></pre></td></tr></table></figure><ul><li>安装 requests 依赖包</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> macOS/Linux</span></span><br><span class="line">sudo easy_install pip3 # 安装 Python3 Package Installer</span><br><span class="line">pip3 install requests # 安装 requests 包，脚本依赖 requests</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Windows</span></span><br><span class="line">pip install requests # 安装 requests 包，脚本依赖 requests</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有问题可参考 https://www.liaoxuefeng.com/wiki/1016959663602400/1017493741106496</span></span><br></pre></td></tr></table></figure><h4 id="3、设置脚本参数配置文件"><a href="#3、设置脚本参数配置文件" class="headerlink" title="3、设置脚本参数配置文件"></a>3、设置脚本参数配置文件</h4><p>config.json</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"username"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"password"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"local_dir"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"ydnote_dir"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"smms_secret_token"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>username：<strong>必填</strong>，你的有道云笔记用户名</li><li>password：<strong>必填</strong>，你的有道云笔记密码</li><li>local_dir：选填，本地存放导出文件的文件夹，不填则默认为当前文件夹</li><li>ydnote_dir：选填，有道云笔记指定导出文件夹名，不填则导出所有文件</li><li>smms_secret_token：选填， <a href="https://sm.ms" target="_blank" rel="noopener">SM.MS</a> 的 Secret Token（注册后 -&gt; Dashboard -&gt; API Token），用于上传笔记中有道云图床图片到 SM.MS 图床，不填则只下载到本地（youdaonote-images 文件夹），Markdown 使用本地链接</li><li>建议使用 <a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">Sublime</a> 编辑 config.json</li></ul><p>示例：</p><ul><li>macOS</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"username"</span>: <span class="string">"deppwang@163.com"</span>,</span><br><span class="line">   <span class="attr">"password"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">   <span class="attr">"local_dir"</span>: <span class="string">"/Users/yanjie/Dropbox/youdaonote/test"</span>,</span><br><span class="line">   <span class="attr">"ydnote_dir"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"smms_secret_token"</span>: <span class="string">"SGSLk9yWdTe4RenXYqEPWkqVrx0Yexample"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Windows</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"username"</span>: <span class="string">"deppwang@163.com"</span>,</span><br><span class="line">   <span class="attr">"password"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">   <span class="attr">"local_dir"</span>: <span class="string">"D:/Dropbox/youdaonote/test"</span>,</span><br><span class="line">   <span class="attr">"ydnote_dir"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"smms_secret_token"</span>: <span class="string">"SGSLk9yWdTe4RenXYqEPWkqVrx0Yexample"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、运行导出脚本"><a href="#二、运行导出脚本" class="headerlink" title="二、运行导出脚本"></a>二、运行导出脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 pull.py # macOS/Linux</span><br><span class="line">python pull.py  # Windows</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-09-130325.jpg" alt=""></p><!--[](https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-07-140101.jpg)--><h3 id="三、多次导出"><a href="#三、多次导出" class="headerlink" title="三、多次导出"></a>三、多次导出</h3><p>多次导出时，同样使用以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 pull.py # macOS/Linux</span><br><span class="line">python pull.py # Windows</span><br></pre></td></tr></table></figure><p>根据有道云笔记的最后修改时间是否大于本地文件最后修改时间来判断是否更新。再次导出时，只会导出有道云笔记上次导出后新增、修改的笔记，不会覆盖本地已经修改的文件。<strong>但有道云笔记和本地不要同时修改同一个文件，这样会导致本地修改丢失</strong>！</p><p>导出是根据最后修改时间来判断，所以被更新文件和新导出一样，会重复下载图片</p><h2 id="后续开发计划"><a href="#后续开发计划" class="headerlink" title="后续开发计划"></a>后续开发计划</h2><ul><li><input checked disabled type="checkbox"> 将 .note 文件转换为 MarkDown 文件</li><li><input checked disabled type="checkbox"> 解决有道云图床图片不能显示问题，实现方式为默认下载到本地，使用本地图片链接，也可上传到 SM.MS 图床</li><li><input checked disabled type="checkbox"> 首次导出使用账号密码登录，再次导出时使用 Cookie 登录（Cookie 保存在 cookies.json 中），避免频繁操作时因为需要输入验证码导致登录不上的情况</li><li><input disabled type="checkbox"> 优化如果同一目录存在同名的 .md 和 .note 文件，.md 文件将被覆盖的情况</li><li><input disabled type="checkbox"> 并发执行以加快速度</li><li><input disabled type="checkbox"> 针对非开发者用户，提供网页输入账号密码直接下载所有笔记压缩包的方式</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>正常用户操作时，浏览器（前端）调用服务器（后端）接口，接口返回文件内容由前端渲染显示。</li><li>原理是利用有道云笔记本身的接口，模拟操作接口，将前端显示改为存放到本地。可以看看<a href="https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com">如何找到有道云笔记的接口</a></li><li>Xml 转换为 Markdown：使用了 <a href="http://docs.python.org/3.7/library/xml.etree.elementtree.html" target="_blank" rel="noopener">xml.etree.ElementTreeI</a></li></ul><h2 id="感谢（参考）"><a href="#感谢（参考）" class="headerlink" title="感谢（参考）"></a>感谢（参考）</h2><ul><li><a href="https://github.com/wesley2012/YoudaoNoteExport" target="_blank" rel="noopener">YoudaoNoteExport</a></li></ul>]]></content:encoded>
      
      <comments>https://depp.wang/2020/05/18/export-youdaonote-all-notes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>从虚拟机角度理解，为什么静态块函数先于构造函数执行</title>
      <link>https://depp.wang/2020/05/06/static-block-method-and-constructor-method/</link>
      <guid>https://depp.wang/2020/05/06/static-block-method-and-constructor-method/</guid>
      <pubDate>Wed, 06 May 2020 15:02:25 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/05/06/static-block-method-and-constructor-method/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;常常有关于静态块函数、构造函数执行顺序的面试题，如果死记硬背，往往容易混淆。需要从虚拟角度来理解，当真正理解后，其实很简单。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/05/06/static-block-method-and-constructor-method/">原文地址</a></p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>常常有关于静态块函数、构造函数执行顺序的面试题，如果死记硬背，往往容易混淆。需要从虚拟角度来理解，当真正理解后，其实很简单。</p><a id="more"></a><p>一个面试题栗子，请输出下面代码的运行结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"super static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticSuper() &#123;</span><br><span class="line">        System.out.println(<span class="string">"super constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> <span class="keyword">extends</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticTest() &#123;</span><br><span class="line">        System.out.println(<span class="string">"constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in main"</span>);</span><br><span class="line">        StaticTest s = <span class="keyword">new</span> StaticTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">super <span class="keyword">static</span> <span class="keyword">block</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">block</span></span><br><span class="line"><span class="keyword">in</span> main</span><br><span class="line">super <span class="function"><span class="keyword">constructor</span></span></span><br><span class="line"><span class="function"><span class="title">constructor</span></span></span><br></pre></td></tr></table></figure><h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>当执行 StaticTest.main() 时，类加载器加载 StaticTest.class 文件到虚拟机，新建一个与之对应的 Class 对象，如果有类变量，为类变量设置初始值。</p><p>执行 StaticTest.main()，其实是执行 invokestatic 指令，Java 虚拟机规范规定，执行 invokestatic 指令时，需要先初始化类，初始化类时，执行类构造器 <code>&lt;clinit&gt;()</code> 方法， <code>&lt;clinit&gt;()</code> 方法为类变量赋值以及执行静态代码块，虚拟机保证执行 <code>&lt;clinit&gt;()</code> 方法前先执行父类 <code>&lt;clinit&gt;()</code> 方法。</p><p>执行完 <code>&lt;clinit&gt;()</code> 方法后执行 main() 方法</p><p>执行 new 指令时，实例化生成对象，并为实例变量设置初始值（如果没有初始值），再调用实例构造方法  <code>&lt;init&gt;()</code>  为实例变量赋值。</p><h2 id="三、加入构造代码块"><a href="#三、加入构造代码块" class="headerlink" title="三、加入构造代码块"></a>三、加入构造代码块</h2><p>有时候，为了加大难度，里面还会加上构造代码块</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"super static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"super constructor block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticSuper() &#123;</span><br><span class="line">        System.out.println(<span class="string">"super constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> <span class="keyword">extends</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"constructor block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticTest() &#123;</span><br><span class="line">        System.out.println(<span class="string">"constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in main"</span>);</span><br><span class="line">        StaticTest s = <span class="keyword">new</span> StaticTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造代码块可以看成一个公共构造函数，使用任何构造函数前都需要先执行构造代码块。所以执行结果为：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">super <span class="keyword">static</span> <span class="keyword">block</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">block</span></span><br><span class="line"><span class="keyword">in</span> main</span><br><span class="line">super <span class="function"><span class="keyword">constructor</span> <span class="title">block</span></span></span><br><span class="line"><span class="function"><span class="title">super</span> <span class="title">constructor</span></span></span><br><span class="line"><span class="function"><span class="title">constructor</span> <span class="title">block</span></span></span><br><span class="line"><span class="function"><span class="title">constructor</span></span></span><br></pre></td></tr></table></figure><h2 id="四、应用"><a href="#四、应用" class="headerlink" title="四、应用"></a>四、应用</h2><p>静态代码块属于类构造函数的范畴，所以常用于设置静态变量。如，Integer 里面的 IntegerCache。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            ...</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>1、我们<strong>将静态代码块看成类构造方法</strong>，类构造方法肯定先于实例构造方法执行。</p><p>2、构造代码块可以看成公共构造函数，先于构造函数执行</p><p>这方面的内容可以<a href="https://weread.qq.com/web/reader/cf1320d071a1a78ecf19254k283328802332838023a7529" target="_blank" rel="noopener">《深入理解 Java 虚拟机》（第 3 版）- 7.3 类加载的过程</a>，会比看博文理解得更深刻。</p><!--当运行 StaticTest.main() 后，类加载器就会寻找已经编译的 StaticTest.class 文件，将其加载到虚拟机中，--><blockquote><!--静态块函数也叫静态初始化函数（static initializer）是一段在加载类时会执行的程序代码，它会在其他程序可以使用该类之前就执行。--></blockquote><blockquote><!--构造函数的作用是用于给对象进行初始化。不建立对象，构造函数时不会执行。--></blockquote><!--运行过程如下：--><!--当运行 StaticTest.main()(这是一个 static 方法) 后，类装载器就会寻找已经编译的 StaticTest.class 文件。在装载的过程中，装载器注意到它有一个基类（StaticSuper.class），于是它再装载基类。不管创不创建基类对象，这个过程总会发生。如果基类还有基类，那么第二个基类也会被装载，依此类推。--><!--所有基类装载完成后，先执行根基类的 static 初始化函数，然后是下一个派生类的 static 初始化函数，依此类推。这个顺序非常重要，因为派生类的 “static 初始化函数” 有可能要依赖基类成员的正确初始化。所以依次输出 `super static block`,`static  block`--><!--当所有必要的类都已经装载结束，开始执行 main() 方法体，先输出 `in main`，再用 new StaticSuperTest() 创建对象。--><!--类 StaticTest 存在父类 StaticSuper，先调用 StaticSuper 的构造函数，输出 `super constructor`，最后调用 StaticSuperTest 的构造函数输出 `constructor`。--><!--可以使用 super 显式来指定调用哪个构造函数。基类的构造过程以及构造顺序，同派生类的相同。--><!--五、延伸阅读--><!--[Java 提高篇 ---- 静态代码块、构造代码块、构造函数以及 Java 类初始化顺序](http://www.cnblogs.com/Qian123/p/5713440.html)-->]]></content:encoded>
      
      <comments>https://depp.wang/2020/05/06/static-block-method-and-constructor-method/#disqus_thread</comments>
    </item>
    
    <item>
      <title>一道算法题：查找数组 arr 中第 k 小的奇数</title>
      <link>https://depp.wang/2020/05/06/find-the-k-th-smallest-odd-number-in-the-array-arr/</link>
      <guid>https://depp.wang/2020/05/06/find-the-k-th-smallest-odd-number-in-the-array-arr/</guid>
      <pubDate>Wed, 06 May 2020 08:09:37 GMT</pubDate>
      <description>
      
        &lt;!--题目来源--&gt;

&lt;!--「北京波粒子科技有限公司」面试题--&gt;

&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;查找数组 arr 中第 k 小的奇数，如果不存在则返回 0。&lt;/p&gt;
&lt;p&gt;计算出时间复杂度（注意代码注释，尽可能不用全排序，不要使⽤库函数或脚本中已经实现好的排序算法和⼯具，需要⾃⼰实现数据结构和所需要的算法）&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!--题目来源--><!--「北京波粒子科技有限公司」面试题--><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>查找数组 arr 中第 k 小的奇数，如果不存在则返回 0。</p><p>计算出时间复杂度（注意代码注释，尽可能不用全排序，不要使⽤库函数或脚本中已经实现好的排序算法和⼯具，需要⾃⼰实现数据结构和所需要的算法）</p><a id="more"></a><h2 id="解题方案"><a href="#解题方案" class="headerlink" title="解题方案"></a>解题方案</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>属于 Top K 问题</li><li>假设数组中数据范围有限，使用一个额外数组，存放每个数字出现的次数，数组下标位置就是数字大小，此种方式为「计数排序法」</li><li>时间复杂度：O(N)，N 为第 k 小的奇数的大小</li><li>最坏时间复杂度：当不存在时，需要遍历完 counter 数组，O(M)，M 为指定数组的范围</li><li>空间复杂度：O(M)，需要长度为 M 的额外数组。</li><li>标签：<code>计数排序</code></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计每个数字出现的次数</span></span><br><span class="line">        <span class="keyword">int</span>[] counter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10001</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            counter[num] = counter[num] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历 counter，查找第 k 小的奇数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; counter.length; num++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (counter[num] &gt; <span class="number">0</span> &amp;&amp; x &lt; k &amp;&amp; num % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x == k) &#123;</span><br><span class="line">                <span class="keyword">return</span> num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">12</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">3</span>;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Solution().findKth(arr, k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--参考：https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/solution/3chong-jie-fa-miao-sha-topkkuai-pai-dui-er-cha-sou/-->]]></content:encoded>
      
      <comments>https://depp.wang/2020/05/06/find-the-k-th-smallest-odd-number-in-the-array-arr/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring 中的反射与反射的原理</title>
      <link>https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/</link>
      <guid>https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/</guid>
      <pubDate>Tue, 05 May 2020 08:09:37 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-29-154427.jpg&quot; alt=&quot;image source: https://coderius.biz.ua/blog/article/vvedenie-v-php-reflection-api&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://depp.wang/2020/04/19/realize-a-simple-spring-ioc-container/&quot;&gt;造轮子：实现一个简易的 Spring IoC 容器&lt;/a&gt;一文中提到 Spring 在创建 Bean 实例和依赖注入时使用了反射，本文来具体分析一下 Spring 中的反射以及反射的原理。&lt;/p&gt;
&lt;!--[造轮子：实现一个简易的 Spring IoC 容器](https://mp.weixin.qq.com/s/0kfeHOK6FjbGQ0PwzWe58A)--&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/">原文地址</a></p></blockquote><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-29-154427.jpg" alt="image source: https://coderius.biz.ua/blog/article/vvedenie-v-php-reflection-api"></p><p>在<a href="https://depp.wang/2020/04/19/realize-a-simple-spring-ioc-container/">造轮子：实现一个简易的 Spring IoC 容器</a>一文中提到 Spring 在创建 Bean 实例和依赖注入时使用了反射，本文来具体分析一下 Spring 中的反射以及反射的原理。</p><!--[造轮子：实现一个简易的 Spring IoC 容器](https://mp.weixin.qq.com/s/0kfeHOK6FjbGQ0PwzWe58A)--><a id="more"></a><h2 id="一、Spring-中的反射"><a href="#一、Spring-中的反射" class="headerlink" title="一、Spring 中的反射"></a>一、Spring 中的反射</h2><h3 id="1-1、创建-Bean-实例时的反射"><a href="#1-1、创建-Bean-实例时的反射" class="headerlink" title="1.1、创建 Bean 实例时的反射"></a>1.1、创建 Bean 实例时的反射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过类加载器，根据 class 路径，得到其类对象</span></span><br><span class="line">Class&lt;?&gt; clz = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">"org.deppwang.litespring.v1.service.PetStoreService"</span>);</span><br><span class="line"><span class="comment">// 根据类对象生成 Bean 实例</span></span><br><span class="line"><span class="keyword">return</span> clz.newInstance();</span><br></pre></td></tr></table></figure><p>反射体现在 <code>clz.newInstance();</code> 中，核心代码可分为两部分：</p><p>1、<strong>利用反射</strong>获取当前类 PetStoreService 的所有构造方法信息（Constructor 对象）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Class.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，此时 publicOnly 为 false</span></span><br><span class="line">res = getDeclaredConstructors0(publicOnly);</span><br><span class="line"><span class="comment">// native 方法，从 jvm 中的 class 文件中获取构造方法信息，再转换为 Constructor 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> Constructor&lt;T&gt;[] getDeclaredConstructors0(<span class="keyword">boolean</span> publicOnly);</span><br></pre></td></tr></table></figure><p>2、<strong>利用反射</strong>通过默认构造方法生成实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.NativeConstructorAccessorImpl.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，var1 代表构造方法的参数，此时为 null</span></span><br><span class="line"><span class="keyword">return</span> newInstance0(<span class="keyword">this</span>.c, var1);</span><br><span class="line"><span class="comment">// native 方法，真正生成实例的方法，执行 class 文件的构造方法 &lt;init&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">newInstance0</span><span class="params">(Constructor&lt;?&gt; var0, Object[] var1)</span></span>;</span><br></pre></td></tr></table></figure><!--new 指令--><h3 id="1-2、构造方法依赖注入时的反射"><a href="#1-2、构造方法依赖注入时的反射" class="headerlink" title="1.2、构造方法依赖注入时的反射"></a>1.2、构造方法依赖注入时的反射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射获取当前类所有的构造方法信息（Constructor 对象）</span></span><br><span class="line">Constructor&lt;?&gt;[] candidates = beanClass.getDeclaredConstructors();</span><br><span class="line"><span class="comment">// 设置构造方法参数实例</span></span><br><span class="line">Object[] argsToUse = <span class="keyword">new</span> Object[parameterTypes.length];</span><br><span class="line">argsToUse[i] = getBean(beanNames.get(i));</span><br><span class="line"><span class="comment">// 使用带有参数的 Constructor 对象实现实例化 Bean。此时使用反射跟上面一样（newInstance0），只是多了参数</span></span><br><span class="line"><span class="keyword">return</span> constructorToUse.newInstance(argsToUse);</span><br></pre></td></tr></table></figure><h3 id="1-3、setter-方法依赖注入时的反射"><a href="#1-3、setter-方法依赖注入时的反射" class="headerlink" title="1.3、setter() 方法依赖注入时的反射"></a>1.3、setter() 方法依赖注入时的反射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射获取当前类所有的方法信息（Method 对象）</span></span><br><span class="line">Method[] methods = bean.getClass().getDeclaredMethods();</span><br><span class="line"><span class="comment">// 获得方法参数实例</span></span><br><span class="line">Object propertyBean = getBean(propertyName);</span><br><span class="line"><span class="comment">// 通过反射执行调用 setter() 方法。invoke：调用方法，propertyBean 作为方法的参数</span></span><br><span class="line">method.invoke(bean, propertyBean);</span><br></pre></td></tr></table></figure><p>bean.getClass().getDeclaredMethods(); 中的核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Class.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，publicOnly 为 false</span></span><br><span class="line">getDeclaredMethods0(publicOnly);</span><br><span class="line"><span class="comment">// native 方法，从 jvm 中的 class 文件中获取方法信息，再转换为 Method</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> Method[]      getDeclaredMethods0(<span class="keyword">boolean</span> publicOnly);</span><br></pre></td></tr></table></figure><p>method.invoke(bean, propertyBean); 中的核心代码：</p><!--根据 var0 找到 class 文件的 setter() 方法，执行 setter() 方法？--><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.NativeMethodAccessorImpl.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，var1: bean、var2: propertyBean</span></span><br><span class="line"><span class="keyword">return</span> invoke0(<span class="keyword">this</span>.method, var1, var2);</span><br><span class="line"><span class="comment">// native 方法，运行 class 文件中的字节码指令</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">invoke0</span><span class="params">(Method var0, Object var1, Object[] var2)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-4、-Autowired-依赖注入时的反射"><a href="#1-4、-Autowired-依赖注入时的反射" class="headerlink" title="1.4、@Autowired 依赖注入时的反射"></a>1.4、@Autowired 依赖注入时的反射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射得到当前类所有的字段信息（Field 对象）</span></span><br><span class="line">Field[] fields = bean.getClass().getDeclaredFields();</span><br><span class="line"><span class="comment">// 判断字段是否有 @Autowired 注解</span></span><br><span class="line">Annotation ann = field.getAnnotation(Autowired.class);</span><br><span class="line"><span class="comment">// 设置字段可连接，相当于将非 public（private、default、protect）更改为 public</span></span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 通过反射设置字段的值</span></span><br><span class="line">field.set(bean, getBean(field.getName()));</span><br></pre></td></tr></table></figure><p>bean.getClass().getDeclaredFields(); 中的核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Class.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，此时 publicOnly 为 false</span></span><br><span class="line">getDeclaredFields0(publicOnly);</span><br><span class="line"><span class="comment">// native 方法，从 jvm 中获取 class 文件的字段信息，再转换为 Field</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> Field[]       getDeclaredFields0(<span class="keyword">boolean</span> publicOnly);</span><br></pre></td></tr></table></figure><p>field.set(bean, getBean(field.getName())); 中的核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.UnsafeObjectFieldAccessorImpl.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，将目标对象 var1 指定偏移量 fieldOffset 处的字段值设置（修改）为 var2。var1 为 bean, var2 为参数实例</span></span><br><span class="line">unsafe.putObject(var1, <span class="keyword">this</span>.fieldOffset, var2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sun.misc.Unsafe.java</span></span><br><span class="line"><span class="comment">// native 方法，直接修改堆中对象字段的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object var1, <span class="keyword">long</span> var2, Object var4)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="二、class-文件与类对象"><a href="#二、class-文件与类对象" class="headerlink" title="二、class 文件与类对象"></a>二、class 文件与类对象</h2><p>class 文件由 java 文件编译而来，class 文件包含字段表、方法表、<code>&lt;init&gt;</code> 方法（构造方法）等。</p><p>当类加载器将 class 文件加载进虚拟机元空间（Meta-space，jdk 1.8）时，虚拟机在元空间中创建一个与之对应的类对象（Class 实例）。并将 class 文件由存放在磁盘的静态结构转换为存放在内存的运行时结构。</p><!--（在元数据中？）--><p>我们可以认为一个类（class 文件）对应一个类对象，当前类的所有对象共用一个类对象。<strong>类对象作为访问存放在 jvm 的 class 文件的入口。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> Field[]       getDeclaredFields0(<span class="keyword">boolean</span> publicOnly);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> Method[]      getDeclaredMethods0(<span class="keyword">boolean</span> publicOnly);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> Constructor&lt;T&gt;[] getDeclaredConstructors0(<span class="keyword">boolean</span> publicOnly);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ReflectionData 缓存反射对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionData</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> Field[] declaredFields;</span><br><span class="line">        <span class="keyword">volatile</span> Field[] publicFields;</span><br><span class="line">        <span class="keyword">volatile</span> Method[] declaredMethods;</span><br><span class="line">        <span class="keyword">volatile</span> Method[] publicMethods;</span><br><span class="line">        <span class="keyword">volatile</span> Constructor&lt;T&gt;[] declaredConstructors;</span><br><span class="line">        <span class="keyword">volatile</span> Constructor&lt;T&gt;[] publicConstructors;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1、获得类对象的方式"><a href="#2-1、获得类对象的方式" class="headerlink" title="2.1、获得类对象的方式"></a>2.1、获得类对象的方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、通过对象</span></span><br><span class="line">Class cls = object.getClass();</span><br><span class="line"><span class="comment">// Object.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、通过类加载器</span></span><br><span class="line">Class cls = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">"org.deppwang.litespring.v1.service.PetStoreService"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、通过 Class 类，本质上也是通过类加载器</span></span><br><span class="line">Class cls = Class.forName(<span class="string">"org.deppwang.litespring.v1.service.PetStoreService"</span>);</span><br><span class="line"><span class="comment">// Class.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; forName0(String name, <span class="keyword">boolean</span> initialize,</span><br><span class="line">                                            ClassLoader loader,</span><br><span class="line">                                            Class&lt;?&gt; caller)</span><br></pre></td></tr></table></figure><!--// 4、直接用类名Class cls = String.class;--><h2 id="三、反射方法"><a href="#三、反射方法" class="headerlink" title="三、反射方法"></a>三、反射方法</h2><p>以下是常用的反射方法。</p><h3 id="3-1、Feild-相关"><a href="#3-1、Feild-相关" class="headerlink" title="3.1、Feild 相关"></a>3.1、Feild 相关</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fields = cls.getFields(); <span class="comment">// 获取所有公共的 Field（包括父类）</span></span><br><span class="line">Field[] fields = cls.getDeclaredFields(); <span class="comment">// 获取当前类的所有 Field（不包括父类），包括公共和非公共</span></span><br><span class="line">Field field = cls.getDeclaredField(<span class="string">"fieldName"</span>); <span class="comment">// 指定获取当前类某个 Field</span></span><br><span class="line">field.set(Object, Object); <span class="comment">// 设置（修改）字段值</span></span><br><span class="line">field.get(Object); <span class="comment">// 获取字段值</span></span><br></pre></td></tr></table></figure><p>field.get(Object) 核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用 native 方法，获取字段对应的值</span></span><br><span class="line"><span class="keyword">return</span> unsafe.getObject(var1, <span class="keyword">this</span>.fieldOffset);</span><br><span class="line"></span><br><span class="line"><span class="comment">// native 方法，从堆中获取对象指定位置的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title">getObject</span><span class="params">(Object var1, <span class="keyword">long</span> var2)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="3-2、Method-相关"><a href="#3-2、Method-相关" class="headerlink" title="3.2、Method 相关"></a>3.2、Method 相关</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] methods = cls.getMethods(); <span class="comment">// 获取所有公共的 Method（包括父类）</span></span><br><span class="line">Method[] methods = cls.getDeclaredMethods(); <span class="comment">// 获取当前类的所有 Method（不包括父类），包括公共和非公共</span></span><br><span class="line">method.invoke(Object instance, Object... parameters); <span class="comment">// 运行方法</span></span><br></pre></td></tr></table></figure><p>运行方法使用场景：要么是修改对象的数据，如 void setter() 方法；要么是获得执行方法的返回结果。</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">result</span> = <span class="function"><span class="keyword">method</span>.<span class="title">invoke</span><span class="params">()</span>.<span class="title">toString</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure><h3 id="3-3、Constructor-相关"><a href="#3-3、Constructor-相关" class="headerlink" title="3.3、Constructor 相关"></a>3.3、Constructor 相关</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] constructors = cls.getConstructors(); <span class="comment">// 获取所有公共的 Constructor（包括父类）</span></span><br><span class="line">Constructor&lt;?&gt;[] constructors = cls.getDeclaredConstructors(); <span class="comment">// 获取当前类的所有Constructor（不包括父类），包括公共和非公共</span></span><br><span class="line">constructor.newInstance(Object... parameters); <span class="comment">// 运行构造方法</span></span><br></pre></td></tr></table></figure><!--默认包含一个无参公有构造方法，当存在自定义构造方法时，就没有默认构造方法--><p>当没有明确编写构造方法，Java 编译器将为该类构建一个默认构造函数 <code>&lt;init&gt;</code></p><h2 id="四、native-方法"><a href="#四、native-方法" class="headerlink" title="四、native 方法"></a>四、native 方法</h2><p>Java 1.1 新增「Java 本地接口」(Java Native Interface，JNI)，JNI 是一种包容极广的编程接口，允许我们从 Java 应用程序里调用 native 方法，native 方法由其它语言（C 、C++ 或汇编语言等）编写。native 方法用于实现 Java 无法处理的功能。</p><h3 id="4-1、简单示例"><a href="#4-1、简单示例" class="headerlink" title="4.1、简单示例"></a>4.1、简单示例</h3><p>一个在 Java 中使用 Java 本地接口（JNI）的简单示例。</p><ul><li>环境：<strong>jdk8、macOS 10.15</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">intMethod</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 启动时载入 libMain.dylib</span></span><br><span class="line">        System.loadLibrary(<span class="string">"Main"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Main().intMethod(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.c:</span></span><br><span class="line"><span class="comment">// 将 Main.h 引入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Main.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于继承 "Main.h" 的 Java_Main_intMethod</span></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_Main_intMethod</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    JNIEnv *env, jobject obj, jint i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i * i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译与运行:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同时生成 Main.class 和 Main.h</span></span><br><span class="line">javac Main.java -h .</span><br><span class="line"><span class="comment">// 根据 Main.c 生成 libMain.dylib</span></span><br><span class="line">gcc -dynamiclib -O3 \</span><br><span class="line">    -I/usr/include \</span><br><span class="line">    -I$JAVA_HOME/include \</span><br><span class="line">    -I$JAVA_HOME/include/darwin \</span><br><span class="line">    Main.c -o libMain.dylib</span><br><span class="line"><span class="comment">// 指定 library 的路径为当前路径</span></span><br><span class="line">java -cp . -Djava.library.path=$(pwd) Main</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Main.h .h 作为头文件*/</span></span><br><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class Main */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_Main</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_Main</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     Main</span></span><br><span class="line"><span class="comment"> * Method:    intMethod</span></span><br><span class="line"><span class="comment"> * Signature: (I)I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jint JNICALL Java_Main_intMethod</span><br><span class="line">  (JNIEnv *, jobject, jint);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac Main.java -h .</span><br><span class="line"><span class="comment">// 可拆分为两个命令</span></span><br><span class="line">javac Main.java</span><br><span class="line">javah -jni Main</span><br></pre></td></tr></table></figure><h3 id="4-2、原理"><a href="#4-2、原理" class="headerlink" title="4.2、原理"></a>4.2、原理</h3><p>运行 Main.class 时，将 libMain.dylib 载入虚拟机，JVM 调用 libMain.dylib 的 Java_Main_intMethod，传入参数，libMain.dylib 由系统直接运行，返回结果。</p><ul><li>*env 用于将 java 类型数据与本地（此处为 C 语言）类型数据之间的转换</li><li>jint 还是 Java 数据类型，Java 基本数据类型可以映射（使用），不用通过 *env 转换</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*C code*/</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_ClassName_MethodName</span><br><span class="line">  (JNIEnv *env, jobject obj, jstring javaString)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*Get the native string from javaString*/</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *nativeString = (*env)-&gt;GetStringUTFChars(env, javaString, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Do something with the nativeString*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*DON'T FORGET THIS LINE!!!*/</span></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, javaString, nativeString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--Unsafe 类--><!-- - 存放 native 方法的类？--><h3 id="4-3、参考"><a href="#4-3、参考" class="headerlink" title="4.3、参考"></a>4.3、参考</h3><ul><li><a href="https://medium.com/@bschlining/a-simple-java-native-interface-jni-example-in-java-and-scala-68fdafe76f5f" target="_blank" rel="noopener">A Simple Java Native Interface (JNI) example in Java and Scala</a></li><li><a href="https://www.codejava.net/java-core/the-java-language/native-keyword#" target="_blank" rel="noopener">Java native keyword example</a></li><li><a href="https://www.protechtraining.com/blog/post/java-native-interface-jni-example-65" target="_blank" rel="noopener">Java Native Interface: JNI Example</a></li><li><a href="https://depp.wang/Java-Books/docs/Java编程思想.pdf">Java 编程思想 - 附录<strong>A</strong> 使用非<strong>JAVA</strong>代码</a></li><li><a href="https://zh.wikipedia.org/wiki/Java本地接口" target="_blank" rel="noopener">Java本地接口 - WiKi</a></li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>反射反射，哪里体现反射字面意思？</p><p>可以这么理解，通过 native 方法得到反射对象，操作反射对象，像镜子一样，将反射到原对象上。</p><p>我们发现，反射和 native 方法的关系：</p><ul><li>获取字段、方法、构造方法对象，native() 方法实现</li><li>获取字段值、设置修改字段值，native() 方法实现</li><li>运行方法，native() 方法实现</li><li>运行构造方法，native() 方法实现</li></ul><p>我们可以得出结论，<strong>反射由 native 方法实现</strong>。</p><p>我们说通过反射实现一个功能，我们也可以说：</p><ul><li>通过反射方法实现</li><li>通过反射 API 实现</li><li>通过 native 方法实现</li></ul><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-05-05-123303.png" alt=""></p><p>反射是一种非常规（native 方法实现）方式获取 class 文件信息、运行 class 文件字节码指令和操作对象数据的能力。</p><!--我们可以认为反射就是 native() 方法，可以把它看做一组 API，通过反射 API，可以运行时获取对象的信息，如字段、方法和构造函数，也可以修改字段值和运行方法和构造方法。--><p>一句话总结 ：反射是一种运行时<strong>获取和修改</strong>对象数据的能力。</p><p>关于运行时：Java 是静态语言，先编译，后运行。编译时不执行代码，代码都是运行时执行。</p><h2 id="六、延伸阅读"><a href="#六、延伸阅读" class="headerlink" title="六、延伸阅读"></a>六、延伸阅读</h2><ul><li><a href="https://www.cnblogs.com/techspace/p/6931397.html" target="_blank" rel="noopener">JAVA 反射原理</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512" target="_blank" rel="noopener">廖雪峰 Java 教程 - 反射</a></li><li><a href="https://www.geeksforgeeks.org/reflection-in-java/" target="_blank" rel="noopener">Reflection in Java</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html" target="_blank" rel="noopener">oracle reflect docs</a></li><li><a href="https://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful" target="_blank" rel="noopener">What is reflection and why is it useful?</a></li><li><a href="https://dzone.com/articles/understanding-sunmiscunsafe" target="_blank" rel="noopener">Understanding sun.misc.Unsafe</a></li><li><a href="https://www.baeldung.com/java-unsafe" target="_blank" rel="noopener">Guide to sun.misc.Unsafe</a></li></ul><!--运行期类型鉴定 (RTTI)--><!--全限定名：指编译后的 class 文件在 jar 包中的路径，package 路径的 . 转换为 /-->]]></content:encoded>
      
      <comments>https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
