<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DeppWang&#39;s Blog</title>
  
  <subtitle>这是副标题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://depp.wang/"/>
  <updated>2020-07-09T02:33:05.091Z</updated>
  <id>https://depp.wang/</id>
  
  <author>
    <name>DeppWang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://depp.wang/2020/07/09/undefined/"/>
    <id>https://depp.wang/2020/07/09/undefined/</id>
    <published>2020-07-09T02:33:05.087Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">144. 二叉树的前序遍历</a></h1><h2 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>标签：<code>递归</code></li><li>先序（根）遍历：根左右。先打印根节点，再递归左右子树，递归可结合函数调用栈理解<ul><li>默认方法没有 list 参数，新增带有参数的方法解决</li><li>不用基准条件，当左右子树执行完成之后，自动跳出递归</li></ul></li><li>时间复杂度：</li><li>空间复杂度：</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        helper(root, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用 helper，加 list 条件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            helper(root.left, list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            helper(root.right, list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归解法"><a href="#非递归解法" class="headerlink" title="非递归解法"></a>非递归解法</h2><!--[image-20191215085413300](https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2019-12-22-020725.jpg)--><svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 1282.3433498894026 375.3916139240506">  <!-- svg-source:excalidraw -->  <defs>    <style>      @font-face {        font-family: "Virgil";        src: url("https://excalidraw.com/FG_Virgil.woff2");      }      @font-face {        font-family: "Cascadia";        src: url("https://excalidraw.com/Cascadia.woff2");      }    </style>  </defs>  <rect x="0" y="0" width="1282.3433498894026" height="375.3916139240506" fill="#ffffff"/><g transform="translate(131.625 49.38750988924045) rotate(0 27.65234375 28.146484375)"><path d="M19.826495420055963 0.691490797404704 C25.305190678123154 -1.424215015394886, 33.19488509053586 0.3560074957937549, 38.597542605516225 2.548370152460926 C44.00020012049659 4.740732809128097, 49.53006533419688 8.770440744903581, 52.242440509938135 13.84566673740773 C54.95481568567939 18.920892729911877, 56.110849216701745 26.87874814129374, 54.871793659963785 32.99972610748582 C53.632738103225826 39.1207040736779, 49.49396865108818 46.592516985671566, 44.80810716951039 50.5715345345602 C40.122245687932605 54.550552083448835, 32.69118915833219 57.135630923160186, 26.75662477049706 56.87383140081764 C20.822060382661924 56.6120318784751, 13.654181580019062 53.21319232696511, 9.200720842499575 49.00073740050496 C4.7472601049800875 44.78828247404481, 0.8559247835843967 37.639650229826664, 0.035860345380136494 31.599101842056754 C-0.7842040928241237 25.558553454286844, 0.1458455395208178 17.936182868344922, 4.280334213274013 12.757447073885503 C8.41482288702721 7.578711279426086, 20.794570690468078 2.498076980888838, 24.842792387899312 0.5266870753002522 C28.891014085330546 -1.4447028302883334, 28.780316036683374 0.39826525918009226, 28.56966439786142 0.9291076403539904 M21.083570393248618 0.6533172866061427 C26.670724127230823 -0.8982687763276511, 34.77362469668704 1.7071196780716789, 40.05255357440093 4.25380200062315 C45.33148245211483 6.80048432317462, 50.444158456096346 10.440245212026717, 52.75714365953199 15.933411221914968 C55.070128862967636 21.42657723180322, 55.472530584486464 31.486581405916855, 53.9304647950148 37.21279805995266 C52.388399005543135 42.93901471398846, 48.15518658377488 46.893718779201095, 43.50474892270202 50.290711146129794 C38.854311261629164 53.687703513058494, 32.05161924722608 57.89017779038877, 26.027838828577657 57.59475226152486 C20.004058409929236 57.29932673266095, 11.897483263701389 53.1581220056324, 7.362066410811487 48.51815797294635 C2.8266495579215833 43.878193940260296, -1.0556252425861956 36.046380216217216, -1.1846622887617642 29.75496806540854 C-1.3136993349373327 23.463555914599862, 3.0120447068810994 15.34912430652868, 6.587844133758075 10.769685068094287 C10.163643560635052 6.190245829659893, 17.784616071208454 3.9148964832935205, 20.27013427250009 2.278332634802176 C22.755652473791727 0.6417687863108317, 21.259663692216918 0.9870666633589599, 21.5009533415079 0.9503019771462213" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(71.078125 145.61993176424045) rotate(0 27.65234375 28.146484375)"><path d="M29.39523648482607 0.6180061990243004 C35.34339071346173 0.44547120645577465, 42.93207293163884 3.491327166331265, 47.293379641899534 7.322119425938006 C51.654686352160226 11.152911685544746, 55.03626069279043 17.551888760926367, 55.563076746390216 23.602759756664746 C56.089892799990004 29.653630752403124, 53.73738895721823 38.28332357280853, 50.45427596349825 43.62734540036827 C47.171162969778266 48.97136722792801, 41.29565495369893 53.97627724284572, 35.864398784070346 55.66689072202318 C30.43314261444176 57.35750420120065, 23.368391634577307 56.06782961887298, 17.86673894572673 53.771026275433044 C12.365086256876154 51.47422293199311, 5.6920381627291565 47.31117941787515, 2.8544826509668937 41.886070661383584 C0.016927139204630848 36.46096190489202, -0.658664469586902 27.376521675642447, 0.8414058751531535 21.220373736483644 C2.3414762198932086 15.064225797324841, 6.797791004028645 8.517724302044858, 11.854904719407227 4.949183026430756 C16.912018434785807 1.380641750816654, 27.41969432249556 0.5005525701361092, 31.18408816742464 -0.19087391720096747 C34.94848201235372 -0.8823004045380441, 34.50822652801076 0.21304691026430278, 34.44126778898171 0.8006241024082961 M20.55347881921376 1.6207028213788277 C25.590001475077344 -0.09064609019002101, 32.060489420984524 0.09504866237796872, 37.37235427233665 2.430851114151796 C42.68421912368878 4.7666535659256235, 49.36503000852483 10.178909093556205, 52.42466792732651 15.635517532021792 C55.48430584612819 21.09212597048738, 57.04319868313169 29.124687093897975, 55.730181785146726 35.17050174494532 C54.41716488716176 41.21631639599266, 49.47587577106881 48.26944997004533, 44.546566539416716 51.91040543830585 C39.617257307764625 55.55136090656637, 32.09681117276262 57.736125355916485, 26.154326395234197 57.01623455450846 C20.21184161770577 56.29634375310043, 13.164112530694641 52.092711760514334, 8.891657874246157 47.59106062985769 C4.619203217797673 43.08940949920104, 1.3716919602402928 36.046284108028104, 0.5195984565432923 30.006327770568593 C-0.33249504715370826 23.966371433109085, 0.547057523025289 16.21830580588463, 3.7790968520641535 11.351322605100645 C7.0111361811030175 6.4843394043166604, 16.99511410689687 2.540711558456726, 19.91183443077648 0.8044285658646864 C22.82855475465609 -0.9318544267273534, 20.946872293857535 0.19450637637384938, 21.2794187953418 0.9336246495484062" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(186.2265625 146.79180676424045) rotate(0 27.65234375 28.146484375)"><path d="M15.470909994024817 4.075508544054237 C20.21897854202117 1.1169545725287677, 27.977574648195976 0.07359543113295786, 33.50448080968747 1.1508404028264785 C39.03138697117897 2.228085374519999, 44.95620667920007 5.8384409096177885, 48.6323469629738 10.538978374215361 C52.308487246747525 15.239515838812935, 55.55171311826383 23.10408813933735, 55.56132251232982 29.354065190411912 C55.570931906395806 35.604042241486475, 52.79745314019296 43.62745623283797, 48.69000332736972 48.038840680662744 C44.58255351454649 52.45022512848752, 36.76216287671513 55.15350658386154, 30.91662363539043 55.82237187736057 C25.071084394065732 56.49123717085959, 18.680792173255327 55.092850887377814, 13.616767879421529 52.05203244165688 C8.55274358558773 49.01121399593594, 2.586676421430503 43.37351157169443, 0.5324778723876342 37.57746120303495 C-1.5217206766552347 31.781410834375468, -1.4933944149112581 23.062058459810313, 1.2915765851643144 17.275730229699988 C4.0765475852398865 11.489401999589663, 14.069736918147914 5.5156809436564025, 17.24230387284107 2.859491822373002 C20.414870827534227 0.20330270108960136, 20.038189761429955 1.1555390239690382, 20.32697831332325 1.3385955019995848 M29.652053599729964 -1.4357347114385348 C35.515658234643794 -1.5925008473951952, 42.33771114760609 2.960132050158416, 46.55931617183161 7.530758718923202 C50.78092119605713 12.101385387687989, 54.226128645693464 19.892474714947788, 54.98168374508307 25.988025301150184 C55.73723884447267 32.08357588735258, 54.13506626398373 39.19377631228543, 51.09264676816923 44.10406223613759 C48.05022727235473 49.014348159989744, 42.3091404947949 53.72565872315003, 36.72716677019609 55.44974084426313 C31.14519304559728 57.17382296537623, 23.36280839006195 56.81474283376043, 17.600804420576374 54.448554962816175 C11.838800451090798 52.08236709187192, 5.158830439045614 46.850703864660545, 2.155142953282642 41.25261361859761 C-0.8485445324803305 35.65452337253467, -1.7184907769495947 26.80552980600429, -0.4213204940014599 20.860013486438525 C0.875849788946675 14.91449716687276, 5.061981344601906 8.857905054730582, 9.938164650971451 5.5795157012030145 C14.814347957340996 2.301126347675447, 25.759729186072303 1.8253550243174241, 28.835779344215812 1.1896773652731198 C31.91182950235932 0.5539997062288157, 28.130772183380476 1.3276046005785538, 28.394465599832515 1.7654497469371897" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(10 248.83868176424045) rotate(0 27.65234375 28.146484375)"><path d="M39.291465527272194 3.634540450035818 C44.73655347363741 5.768915695264164, 50.7386778595196 10.233121939163178, 53.15487384761671 15.448677175239784 C55.57106983571383 20.66423241131639, 55.56424005126621 28.80137818467261, 53.78864145585487 34.92787186649545 C52.013042860443534 41.054365548318295, 47.254484936230796 48.736160092185266, 42.50128227514868 52.20763926617683 C37.74807961406657 55.67911844016839, 31.056504096979204 56.56176061644676, 25.269425489362177 55.756746910444825 C19.48234688174515 54.95173320444289, 11.847889630216825 51.5313323121442, 7.778810629446522 47.37755703016522 C3.7097316286762183 43.22378174818624, 1.4583679269629717 36.79547898299966, 0.8549514847403579 30.83409521857093 C0.25153504251774395 24.8727114541422, 0.9849590500354952 16.642294903168082, 4.158311976110838 11.609254443592832 C7.33166490218618 6.576213984017582, 13.5788812589259 2.022106384859841, 19.895069041192414 0.635852461119434 C26.21125682345893 -0.7504014626209727, 37.815748367044705 2.2119706996209008, 42.055438669709915 3.291730901150391 C46.295128972375124 4.371491102679881, 45.645973525172636 6.403666452287265, 45.33321085718367 7.114413670296376 M33.789845330545496 0.9625252478189701 C39.43415659905089 2.166255145639691, 47.29972962987803 6.161348533800313, 50.717974316716365 11.238190079432552 C54.1362190035547 16.31503162506479, 55.16670572903635 25.384195176860846, 54.299313451575514 31.42357452161241 C53.43192117411468 37.46295386636397, 49.582694834400144 43.31218570835939, 45.51362065195133 47.474466147941925 C41.44454646950251 51.63674658752446, 35.466229621218844 55.776040204463314, 29.884868356882606 56.39725715910764 C24.303507092546365 57.018474113751964, 16.972286034800824 54.96990271749924, 12.025453065933888 51.20176787580786 C7.0786200970669535 47.43363303411648, 1.9243253790725146 39.662071917643885, 0.2038705436809991 33.788448108959365 C-1.5165842917105163 27.914824300274848, -1.068637270836554 21.075904782283814, 1.7027240535847952 15.960025023700751 C4.474085378006144 10.844145265117689, 11.167772957101917 5.569730931925822, 16.832038490209094 3.093169557460989 C22.49630402331627 0.6166081829961563, 32.832869678379076 1.2931827087405694, 35.68831725222785 1.1006567769117552 C38.54376482607662 0.908130845082941, 34.38428006962079 1.6568909969662595, 33.96472393330173 1.9380139664881035" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(86.1875 249.68243176424045) rotate(0 27.65234375 28.146484375)"><path d="M16.835026605139188 3.0311450068695436 C21.786770577976508 0.21922547402496706, 28.32975051923434 -0.9270398505112094, 33.790041448939576 0.4149279313310821 C39.25033237864481 1.7568957131733736, 45.87692571634469 6.028993386050535, 49.596772183370604 11.082951697923292 C53.31661865039652 16.136910009796047, 56.56957422161804 24.6178804552275, 56.10912025109508 30.738677802567622 C55.648666280572115 36.859475149907745, 51.25648592357919 43.440051346399166, 46.834048360232806 47.80773578196403 C42.41161079688642 52.17542021752889, 35.338551897130706 56.5302053165087, 29.57449487101679 56.94478441595679 C23.810437844902875 57.35936351540488, 17.060760874534605 53.99896123327891, 12.249706203549316 50.29521037865256 C7.438651532564028 46.59145952402621, 2.368519140964497 40.411090761428355, 0.7081668451050618 34.7222792881987 C-0.9521854507543732 29.033467814969047, -0.9608183332592901 21.657810128591244, 2.2875924283927063 16.16234153927465 C5.536003190044703 10.666872949958055, 16.03492323017565 4.440155205896319, 20.19863141501704 1.749467752299136 C24.36233959985843 -0.9412197012980479, 26.849111671746382 -0.3706117071720681, 27.269841537441046 0.018216817691545373 M22.237225895571 0.7328385357984111 C27.68668528503787 -0.6378994487744236, 34.671632289410276 -0.000980702917928511, 39.949837218702164 2.64102677958525 C45.22804214799405 5.283034262088428, 51.73519881575017 10.782892539135986, 53.90645547132233 16.58488343081748 C56.0777121268945 22.386874322498976, 54.94276787890888 31.420384058567784, 52.97737715213513 37.45297212967423 C51.011986425361385 43.485560200780675, 47.01290835935137 49.80470719829097, 42.11411111067986 52.78041185745616 C37.215313862008344 55.75611651662135, 29.682209748216994 56.50357240478952, 23.58459366010604 55.30720008466535 C17.486977571995087 54.11082776454117, 9.450996515721988 49.950413243209155, 5.528414582014136 45.602177936711115 C1.605832648306285 41.253942630213075, -0.15366900321418994 34.98546010056606, 0.049102057858934955 29.2177882456771 C0.2518731189320599 23.45011639078814, 3.0239983873187444 15.95246495268994, 6.7450409484528855 10.996146807377354 C10.466083509587026 6.0398286620647665, 19.703307951275082 1.3393655471776995, 22.375357424663783 -0.5201206261984268 C25.047406898052483 -2.379606799574553, 22.85902884047578 -0.6563423164915989, 22.77733778878509 -0.16077023287940406" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(171.2421875 246.90899426424045) rotate(0 27.65234375 28.146484375)"><path d="M14.825203943908514 2.449404285358103 C19.548947584940834 -0.8663189705128302, 27.035948634684328 -1.621431719184173, 32.63548816214581 -0.10825791710936983 C38.23502768960729 1.4049158849654333, 44.612635731439994 6.765614366330026, 48.42244110867741 11.528447097806922 C52.23224648591483 16.291279829283816, 55.537247707784516 22.681963864378776, 55.49432042557031 28.468738471752005 C55.4513931433561 34.25551307912524, 51.996414047963306 41.59501796615528, 48.16487741539215 46.249094742046296 C44.33334078282099 50.90317151793731, 38.48873237544025 55.45195895541126, 32.505100630143374 56.3931991270981 C26.521468884846502 57.33443929878494, 17.57024445714216 55.16199487120983, 12.263086943610906 51.89653577216734 C6.955929430079654 48.63107667312485, 2.4093176996686845 42.630799585353515, 0.6621555489558588 36.80044453284317 C-1.0850066017569668 30.970089480332827, -0.897330339156619 22.481663519329086, 1.7801140393339523 16.914405457105268 C4.457558417824524 11.34714739488145, 14.228138023276488 5.6172349917429685, 16.726821819899286 3.3968961595002725 C19.22550561652208 1.176557327257576, 16.64124653908379 3.344645541791449, 16.772216819070735 3.592372463649088 M18.52414407077007 0.5828615468452867 C23.78730769663876 -1.5979574340094613, 31.08156135064522 0.06919159772099359, 36.366278586208786 2.1975310563665396 C41.650995821772355 4.3258705150120855, 47.118899687195494 8.16148251785565, 50.232447484151464 13.352898298718562 C53.345995281107434 18.544314079581476, 55.77662083661072 27.23704208198332, 55.04756536794463 33.346025741544025 C54.31850989927854 39.45500940110473, 50.55340583825238 46.39632406018548, 45.85811467215491 50.00680025608281 C41.16282350605744 53.617276451980146, 33.06319460197412 55.06558546396654, 26.875818371359806 55.00888291692801 C20.688442140745497 54.952180369889476, 13.057758392136556 53.24903535293432, 8.733857288469057 49.666584973851634 C4.409956184801557 46.08413459476895, 1.6717975320414968 39.458313168379426, 0.9324117493548059 33.5141806424319 C0.1930259666681149 27.57004811648438, 1.574413732445842 19.25562779235304, 4.297542592348911 14.001789818166484 C7.02067145225198 8.747951843979932, 15.109970944349238 4.12423525459091, 17.271184908773222 1.991152797312587 C19.432398873197208 -0.1419296599657356, 17.07401173128015 0.7688250514284007, 17.26482637889282 1.2032950744965483" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(253.8125 252.72540051424045) rotate(0 27.65234375 28.146484375)"><path d="M23.881511208906826 -0.3830395077513664 C29.17920363547025 -1.528907316570141, 37.29713982756152 0.48031524737978115, 42.51031633264668 3.988778795461265 C47.72349283773184 7.497242343542748, 53.50108274818804 14.753814991419965, 55.160570239417765 20.667741780737536 C56.82005773064749 26.581668570055108, 55.13507012840431 33.87610441484675, 52.467241280025036 39.472339531366686 C49.79941243164576 45.06857464788662, 44.349379125111355 51.74145397791517, 39.153597149142115 54.245152479857154 C33.957815173172875 56.74885098179914, 26.987564921509012 56.226115460015045, 21.29254942420959 54.4945305430186 C15.597533926910167 52.76294562602215, 8.566438069215302 48.612040338742204, 4.983504165345586 43.85564297787849 C1.4005702614758708 39.09924561701477, -0.5245549953482609 31.68439916663312, -0.20505399900870103 25.956146377836305 C0.11444699733085884 20.22789358903949, 2.4527000560646464 13.896010421474669, 6.900510143382945 9.48612624509759 C11.348320230701244 5.0762420687205125, 23.00582277358143 0.8901215688515496, 26.481806524901092 -0.5031586804261643 C29.957790276220756 -1.8964389297038782, 27.901669912616637 0.6789182148888315, 27.75641265130093 1.1264447494313075 M14.380890066070778 2.0224547050283874 C19.367676026577723 -1.101327445562203, 28.91764127557588 -2.2335087807671696, 34.710135591188106 -0.6180693167332478 C40.50262990680033 0.9973701473006737, 45.683398713991444 6.5203059830320145, 49.135855959744134 11.715091489231916 C52.588313205496824 16.90987699543182, 55.64428930838123 24.671975632208373, 55.424879065704246 30.550643720466162 C55.20546882302726 36.42931180872395, 52.1656217380291 42.898071767128286, 47.81939450368224 46.98710001877866 C43.47316726933538 51.07612827042904, 35.26620120099247 54.238308490627546, 29.347515659623085 55.084813230368425 C23.428830118253696 55.931317970109305, 16.914107201234618 55.16039739214956, 12.30728125546592 52.066128457223954 C7.700455309697223 48.971859522298345, 3.358143937680918 42.574366910254334, 1.7065599850109052 36.51919962081477 C0.054976032340892544 30.464032331375204, 0.05067398419131619 21.54675698870791, 2.397777539445844 15.735124720586569 C4.7448810947003714 9.92349245246523, 13.736230871306125 3.8454271663107042, 15.789181316538071 1.6494060120867253 C17.84213176177002 -0.5466151421372536, 14.519213006839802 1.7650727424690946, 14.715480210837526 2.5589977952426963" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(157.27734375 65.03399426424045) rotate(0 2 12.5)"><text x="2" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr">1</text></g><g transform="translate(90.94140625 160.11407238924045) rotate(0 7.5 12.5)"><text x="7.5" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr">2</text></g><g transform="translate(207.11328125 162.67266613924045) rotate(0 7 12.5)"><text x="7" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr">3</text></g><g transform="translate(31.65234375 264.48516613924045) rotate(0 6 12.5)"><text x="6" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr">4</text></g><g transform="translate(106.83984375 265.32891613924045) rotate(0 7 12.5)"><text x="7" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr">5</text></g><g transform="translate(193.89453125 262.55547863924045) rotate(0 5 12.5)"><text x="5" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr">6</text></g><g transform="translate(276.84765625 266.31719738924045) rotate(0 4 12.5)"><text x="4" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="middle" style="white-space: pre;" direction="ltr">7</text></g><g><g transform="translate(146.015625 100.66485363924045) rotate(0 -15.65315196197946 22.241715910816566)"><path d="M-0.8817307032644748 -0.42277727946639054 C-6.43687223965923 6.893765242646138, -27.186089932670196 37.221089243640506, -32.162525872141124 44.835500875860454 M0.8562219481822102 -1.6903392965253443 C-4.408849168006952 5.715456969772156, -24.479700938149666 38.12424374414918, -29.808651324892416 46.17377111815848" stroke="#000000" stroke-width="1" fill="none"/></g></g><g><g transform="translate(181.0625 108.61016613924045) rotate(0 9.159394510569996 17.089005320454007)"><path d="M-0.19250569716095933 0.3574923433363437 C3.062207909673452 6.003242222219705, 16.59511098489165 27.8285235799849, 20.071498938649892 33.116673818975684 M-1.7527099175099283 -0.5004281217511743 C1.3413300909753887 5.420055847996846, 15.687040617382152 29.113813528949393, 19.39272869906388 34.678438762659205" stroke="#000000" stroke-width="1" fill="none"/></g></g><g><g transform="translate(79.84375 203.62579113924045) rotate(0 -15.190113657084282 21.55932761051693)"><path d="M0.561330433934927 -0.018623527139425278 C-4.509245621909698 7.219037921975056, -24.994979377339284 35.622742080440126, -30.53096604719758 42.62465447559953 M-0.603109817588702 -1.0740048242267222 C-5.732724435313916 6.443236086998756, -25.985786638145022 36.84545572651861, -30.941557748103513 44.19266004526057" stroke="#000000" stroke-width="1" fill="none"/></g></g><g><g transform="translate(107.3203125 207.79375988924045) rotate(0 2.4029071130184434 21.952455638390973)"><path d="M0.1549413643777371 0.774599877744913 C1.1717740101118883 7.964309819291035, 5.376927960167328 36.794903778781496, 6.028667374700308 43.76925040856004 M-1.2228531486634164 0.13566086822189383 C-0.2605269183559963 6.946191746030624, 4.374584942177559 34.85508239461419, 5.663738689040765 42.13666493677534" stroke="#000000" stroke-width="1" fill="none"/></g></g><g><g transform="translate(210.87109375 203.94219738924045) rotate(0 -6.66742193326354 21.183108192258487)"><path d="M0.7414417661726473 -1.0645050801336764 C-1.478573227177064 6.100084269295136, -11.735438577582439 34.986088184763986, -14.076285632699728 42.266223951429126 M-0.3284400359261781 0.9910258074570448 C-2.0937224708466475 8.360943094786878, -9.458854106015837 36.30511517623749, -11.74481074099429 43.4307214646507" stroke="#000000" stroke-width="1" fill="none"/></g></g><g><g transform="translate(229.7421875 207.70391613924045) rotate(0 18.560144867780593 18.368997492576028)"><path d="M0.9816028319299221 -0.24969991073012354 C7.13955511674285 6.057618419080972, 31.008057709783312 30.516599575430153, 37.08248414620757 36.94769033566117 M0.037805589353665736 -1.426396309202537 C5.985309972381219 5.110254938835277, 29.79691132596694 31.859506375128404, 35.89063348433934 38.16439129435457" stroke="#000000" stroke-width="1" fill="none"/></g></g><g transform="translate(761.1650574786879 55.430193062193155) rotate(0 24.974609375 123.1953125)"><path d="M-1.7216312624514103 -0.8626697920262814 C15.705109485549475 -1.5353269632960291, 35.87821482705622 -0.37746823393354134, 49.548877861350775 -0.855035986751318 M0.38472344167530537 0.9852531086653471 C10.53594445165145 -1.2542710840472866, 22.08073731526529 0.08097363116648915, 50.86133201606572 0.619466258212924 M50.54458844185475 -1.0137164294991041 C49.97942223776304 80.32350650451932, 49.99275245968931 159.04759837231518, 51.525424913963654 246.1753388396348 M50.69379735468795 -0.0293151703248975 C50.45920036979962 67.72639349336261, 51.051769476579466 136.58006784479912, 49.22062081704678 246.1771458151741 M50.55462982878089 246.1888088323176 C35.1515077405762 244.87582317028276, 23.354857667752366 247.74842646751634, -1.3016386963427067 246.98911384120584 M50.931821243837476 245.59560502879322 C30.422490162468602 245.84988073328546, 11.800505348799923 246.44353685596994, 0.4613816309720278 245.7433336507529 M-1.5545399625470038 246.04418459358502 C0.0726507846901576 156.07973072255336, 1.330381137201761 67.7208385298747, 0.8779282472651807 -1.1684498374607 M0.6373646052127576 247.14880968752476 C-1.1130134508026717 192.38156983361216, -0.5911816336231204 138.49086701946499, 0.45266994728142573 -0.4010969907982343" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(439.1209741709183 56.33577200658732) rotate(0 24.974609375 123.1953125)"><path d="M0.788119699805975 -0.67397066578269 C13.784734349659267 0.16404370623793513, 30.15332394458092 1.556601684868001, 50.223244454711676 -0.5052078627049923 M0.8816780615597963 -0.5182904470711946 C17.361921912668187 -0.5906508248046884, 36.17195587913302 -0.8654620330528269, 49.189156310632825 -0.9740106929093599 M51.15265471984169 -1.2022027215588869 C49.486252360523686 63.5813890097902, 47.36401059775859 126.15463892982015, 49.515464594395084 246.7342840701584 M49.648429355609274 0.36951867766708946 C51.81068818926617 86.75965078707848, 51.904498367130294 173.85434870737922, 50.56888991253195 246.97944832995 M50.464229729026556 246.4855935908854 C31.976559425603043 245.21174127169266, 12.166283989122888 244.49311608381882, 1.8636412881314754 246.21924439445138 M49.367218093946576 246.63695664517581 C37.420512614488686 245.4228676577079, 22.762215414449745 245.34091609911798, -0.6635871957987547 246.37309659831226 M-0.4028374826782184 245.18040996471984 C-0.8885413391937866 174.7027933828694, -1.0708660480474301 104.94170998930463, -0.3528078395057196 -1.5300214055909582 M0.24219534485799848 245.89880661544478 C-0.4264887240597098 194.22576501830224, 0.028093869594281617 141.47089729600393, -0.26475237030772797 -0.8149166368375456" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(648.3931462517751 54.87902229720993) rotate(0 24.974609375 123.1953125)"><path d="M0.10783925279974937 1.5085718967020512 C13.57557591889854 -0.5341818855641032, 27.71435979569069 1.571945734179244, 51.946810748428106 1.7633561231195927 M0.6517709065228701 -0.3665712345391512 C11.635882893953386 -0.9281772766522045, 24.321733238927848 -0.9233597312382336, 50.02679600007832 0.7314385306090117 M49.32849991820394 1.4887404223533673 C51.36527046146154 56.257355311167565, 52.649257807987865 113.06525084914693, 48.59734083972336 245.78904621121853 M50.379514883438816 0.5547746251333623 C51.397959761509654 85.57340597739552, 51.30807767874854 170.51663202540496, 49.90375421339299 246.60246191830805 M48.56930389627814 244.52072099223733 C36.59091406710577 245.93171700636702, 18.792116370501752 246.72207161585646, -1.5058557726442814 245.22662368789315 M49.169316248968244 245.71699769608676 C33.07045860620783 246.07755918599003, 17.40539498505386 246.4048750529372, -0.24926446191966534 246.14578367583454 M-0.442947692781836 247.18410837799425 C-0.0317325400085578 189.06689512040336, -1.1062552816514792 134.7204240759379, -1.2763919945103746 0.48439068971599697 M-0.07389210840133326 246.5555210592427 C1.0373597510532746 186.3888950813629, 1.9439159987014687 127.52896016303882, -0.6870508863647253 -0.31695234915561354" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(1222.3941311394026 49.06558315573045) rotate(0 24.974609375 123.1953125)"><path d="M0.27402570471167564 -0.5052078627049923 C16.38576522090807 1.224159818695989, 32.54660370561032 1.3865961847772268, 48.91263785585761 -0.7963411472737789 M-0.7600624393671751 -0.9740106929093599 C14.056274034715171 -0.7860936796808529, 29.130440174935213 0.9145379984235478, 49.21852977760136 0.912613345310092 M49.515464594395084 0.34365907015839575 C50.0347554363439 93.8509561595297, 47.83264433514585 184.62461679602075, 50.688256105334176 247.06359691114938 M50.56888991253195 0.588823329950017 C51.53921716230157 77.75516581316315, 50.963963545923725 154.62723508360645, 49.98828171069114 246.48475699720544 M51.812860038131475 246.21924439445138 C37.12651656839662 246.54259778231463, 24.22437948904262 244.75962246626696, 0.49266329035162926 247.74031356349587 M49.285631554201245 246.37309659831226 C37.806349379262976 246.36394088966807, 25.641171284524898 245.80931210024318, -0.7355587910860777 246.23222048394382 M-0.3528078395057196 244.86060359440904 C-0.8816397868145183 180.87621231344917, -0.7307012001762518 116.01175826871581, -0.9836367691104205 -1.0569494041106493 M-0.26475237030772797 245.57570836316245 C0.8238671050561887 160.6803974011275, -0.5049876586490027 75.62929399982356, 0.03982994688014939 -0.7245825608089262" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(1089.5816311394017 49.44781104688701) rotate(0 24.974609375 123.1953125)"><path d="M1.1112593673169613 1.6009197570383549 C20.749957006851766 1.8895298133619507, 36.46814912270493 -0.6701674570314208, 49.765698697417974 1.3035418130457401 M-0.47015742771327496 -0.969193147495389 C13.23134819693296 1.2179492622586987, 25.57685292131064 1.399124076959779, 50.7080102134496 -0.377267824485898 M50.79945194092141 1.2378583671286014 C48.062976052244146 95.61012252332384, 50.15389131785496 193.09637453535996, 50.16894624191112 247.25121726687763 M50.479007829770836 0.5474667305139399 C51.43056586370024 90.7449909856557, 51.515093360998385 181.16044013190074, 49.475668928247536 245.8230314494849 M49.23600831255317 247.00959900394082 C38.128609568617684 245.18382205111288, 29.81237522287556 247.6975119267156, -1.1833514906466007 244.8308199979365 M49.83574088104069 246.70041246525943 C38.07990441899383 246.13702837613215, 25.973560220740907 246.22346518424143, -0.34439454786479473 246.12140501849353 M-1.427330581148641 246.30784102394927 C-0.8417492741068049 161.07508095940682, -0.5489940487068508 73.73380613527097, 0.7549037998432433 -0.1477842168026665 M0.6418038773404661 245.9025867266379 C-0.03472586646120002 167.21770950513863, 0.6921549667836747 87.95411614777956, -0.5328754826756575 0.19109798833668035" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(1021.6367969557284 47.70992839382569) rotate(0 24.974609375 123.1953125)"><path d="M1.9975919984281063 1.7633561231195927 C12.68644782843403 -1.1961646030013071, 27.262537392570813 0.9037183573182119, 49.2160762809217 -1.5201248787343502 M0.0775772500783205 0.7314385306090117 C9.388969336104493 1.396717750662574, 20.99810808045586 0.10683658086658399, 50.85406299121678 -0.2636322248727083 M48.59734083972336 -0.6015787887814561 C51.735703541868524 79.73659848895058, 51.21639367844547 158.98784542248, 51.058768000266724 247.62996732506392 M49.90375421339299 0.21183691830805643 C51.29363233552025 91.6470734074926, 50.781019553076646 182.53828927005924, 49.18008038466837 247.15718735184663 M48.44336297735572 245.22662368789315 C35.885132783154404 247.8948999031129, 19.65236874495895 244.9854063375535, -1.3472546078264713 245.0634506084025 M49.699954288080335 246.14578367583454 C34.316447330937805 246.38695690262634, 19.810398946182975 246.27614143717605, 0.48227270133793354 246.17619128338993 M-1.2763919945103746 246.875015689716 C0.774767600743714 194.32920198985505, 2.513308169697378 144.2338935711287, 0.3297921184854133 -0.5295047406154559 M-0.6870508863647253 246.07367265084437 C-1.5415146377732583 196.15629352673102, -2.114220067329065 147.56222516341657, -0.7072964876027179 -0.28404348329495055" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(961.7276770577698 51.53815968634285) rotate(0 24.974609375 123.1953125)"><path d="M-1.0365808941423893 -0.7963411472737789 C18.799480129693258 0.8631505094064778, 37.232857895472264 -1.9605161823736126, 48.00119736418128 -0.9403148554265499 M-0.7306889723986387 0.912613345310092 C10.902513034924779 -0.742615656161579, 21.19228738416714 -0.6289800565483893, 50.158091919496655 0.5167647730559111 M50.688256105334176 0.6729719111493839 C48.503496025727344 93.31522931080369, 49.393317784082946 186.14861641291603, 51.126865409900034 247.45020315954167 M49.98828171069114 0.09413199720542867 C49.36364857234818 89.74668292731619, 49.06806002876902 181.39511530750923, 49.87872561331812 246.09726367892787 M50.44188204035163 247.74031356349587 C32.23523823818323 244.54011521711791, 15.540706099833187 244.77274582758392, -0.03505680337548256 246.16366926208138 M49.21365995891392 246.23222048394382 C33.07269439031006 245.99910868989573, 17.367231827687647 246.05389495479213, -0.9299344848841429 245.52310515753925 M-0.9836367691104205 245.33367559588936 C2.3273589062052817 173.56537813366276, 1.902247224847452 100.5061949603154, -1.6298332736750911 1.2836077546809321 M0.03982994688014939 245.66604243919107 C1.159953490306429 187.2816921973717, 0.9855324853793688 127.50651993477513, -0.7763113680570529 0.03159241800078628" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(898.0165801189939 52.054422441444785) rotate(0 24.974609375 123.1953125)"><path d="M-0.18352005258202553 1.3035418130457401 C18.655536192314322 -1.3212417879103304, 36.82933593696653 -0.7414317646025301, 48.01083245500922 0.155154500156641 M0.7587914634495974 -0.377267824485898 C19.54308818297359 -0.719475461063339, 37.48536105301028 0.060921536865280346, 50.70157893188298 -0.8216603267937899 M50.16894624191112 0.8605922668776339 C51.9692273796624 66.14763451048886, 52.03732478929571 130.87616253039158, 51.04415221102788 246.299695926786 M49.475668928247536 -0.5675935505151195 C49.276327857658785 81.02844370205737, 49.97497308630853 160.2304013793494, 50.203818265053954 245.7712287943185 M48.7658672593534 244.8308199979365 C36.52424632535913 245.40053005491464, 25.758726312995712 246.50074870859353, 0.6195749305188656 245.89209607616067 M49.604824202135205 246.12140501849353 C36.66968911231597 246.09706946515516, 21.495679587071933 245.44398333930448, -0.05031542293727398 245.61484439484775 M0.7549037998432433 246.24284078319732 C1.5415865100558992 164.68997850370758, -0.41803888210460527 85.33194924332702, -0.9760765467241767 -1.3741017727294507 M-0.5328754826756575 246.58172298833668 C-0.8054337426578859 181.68238341892575, -0.8744486231122209 117.57382122244216, -0.1956876715457578 -0.3710732227751174" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(830.278378588381 56.008716659131835) rotate(0 24.974609375 123.1953125)"><path d="M-0.7331424690783024 -1.5201248787343502 C11.047913330941084 -1.2658693312745162, 24.05348313852883 -0.17039997569132537, 51.41209581121802 -1.4613779447972775 M0.9048442412167788 -0.2636322248727083 C19.752071156402963 0.7052071039817384, 39.83875615569559 -0.6332179958679626, 49.583584086969495 0.4491808544844389 M51.058768000266724 1.239342325063908 C51.39755938020836 85.05480300104242, 51.3148461813362 167.8995206097875, 50.37289258661611 246.46875092138228 M49.18008038466837 0.7665623518466226 C48.711943247815846 76.4431586567013, 49.03703589955168 152.85364374986534, 49.470435848460085 246.59326975407663 M48.60196414217353 245.0634506084025 C31.55860185650308 245.77411405580432, 13.857673500275993 245.5025408698836, -0.4896826483309269 244.91950741782784 M50.43149145133793 246.17619128338993 C34.82573682246366 245.3886318800579, 21.51180844175833 245.4803711173664, 0.29440869577229023 245.79277862422168 M0.3297921184854133 245.86112025938453 C-2.5598393689663492 189.58530700859475, -1.9060826420154346 128.8386717350982, -0.6339046983112271 0.07965989376029878 M-0.7072964876027179 246.10658151670506 C0.5366438641792665 194.20688696092168, 1.1172675606905615 141.58889086306664, 0.30787690980737276 -0.47050620080965805" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(579.8091916454082 56.04423820556701) rotate(0 24.974609375 123.1953125)"><path d="M-1.9480213858187199 -0.9403148554265499 C16.30192408848889 0.5347997506327374, 37.94349782817736 -1.0817326943211811, 51.774445440620184 1.5175829268991947 M0.20887316949665546 0.5167647730559111 C13.852702497624705 -0.6899780900966288, 25.83504996845295 0.5808630911816, 50.35824556834996 0.13354857079684734 M51.126865409900034 1.0595781595416716 C52.411064877235376 86.71398948615015, 51.73980525282361 173.68796304011062, 50.13748274441086 245.4435253564951 M49.87872561331812 -0.2933613210721229 C48.30873343959856 56.29788713155291, 47.57535102300469 114.03721142854543, 50.50437947008214 245.90388288524423 M49.91416194662452 246.16366926208138 C39.4795801182896 245.56063945613417, 27.281108977210533 244.58805079780134, -0.31680903211236 245.7018359042704 M49.01928426511586 245.52310515753925 C36.258870476876474 245.50773642866443, 22.963561745399783 245.68567065803836, -0.6424051951617002 246.8494493495673 M-1.6298332736750911 247.67423275468093 C-1.3823649776926519 173.3124665143757, -1.0401931292797024 103.06217146797064, -1.4491651216178525 -1.065750965351315 M-0.7763113680570529 246.4222174180008 C1.5470245648616265 166.3788188203173, 2.050589146214757 86.63865288537515, -0.08068593300377995 -0.36506903796219536" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(512.4279735331634 56.029729276995624) rotate(0 24.974609375 123.1953125)"><path d="M-1.938386294990778 0.155154500156641 C12.65119018145706 -1.2265379827594005, 24.20185293109826 1.7524228889370717, 49.194683101028204 1.8096884824335575 M0.7523601818829775 -0.8216603267937899 C13.302308594997886 0.19106088756780082, 27.74491333440674 -0.12457139611979073, 50.472279684618115 0.6743749510496855 M51.04415221102788 -0.09092907321400807 C51.82369806942577 92.55498585936597, 51.58828822722052 184.00662023246247, 48.81403164896976 244.85234826933674 M50.203818265053954 -0.619396205681497 C49.296747368407495 97.07901934200258, 50.33069099002955 193.26600706109616, 49.30763187466159 245.83646542686287 M50.568793680518866 245.89209607616067 C37.789336676934184 244.86282610882853, 26.292010868417854 245.6451545952711, -0.5384399630129337 247.35517040267587 M49.898903327062726 245.61484439484775 C36.3299414826055 245.3594592404113, 21.479441628504716 246.4161299657569, -0.08982203714549541 246.59106994979084 M-0.9760765467241767 245.01652322727054 C1.3739734964217816 180.482653531267, 0.5587130731151562 113.34961130966214, 0.3821959766733607 -1.4145929752054358 M-0.1956876715457578 246.01955177722488 C2.2206353415091957 180.51027249376517, 1.832072498698043 115.20586335118747, 0.563044614366716 0.012369808251172572" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(540.810546875 272.03985363924045) rotate(0 2 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">1</text></g><g transform="translate(463.24545599489795 260.994094710669) rotate(0 2 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">1</text></g><g transform="translate(540.7964764030612 240.58593144536286) rotate(0 7.5 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">2</text></g><g transform="translate(608.1434151785714 271.1981763433221) rotate(0 2 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">1</text></g><g transform="translate(602.0209661989795 246.70838042495473) rotate(0 7.5 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">2</text></g><g transform="translate(598.2996651785714 211.5926278739343) rotate(0 6 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">4</text></g><g transform="translate(783.3091104123612 266.3092587509686) rotate(0 2 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">1</text></g><g transform="translate(780.9716168706407 239.37116943296297) rotate(0 7 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">5</text></g><g transform="translate(851.9668215981008 265.1062104430379) rotate(0 2 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">1</text></g><g transform="translate(978.2119429061179 264.5747626582278) rotate(0 7 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">3</text></g><g transform="translate(1045.6377076740507 261.3087420886074) rotate(0 7 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">3</text></g><g transform="translate(1045.6377076740507 234.72646360759478) rotate(0 5 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">6</text></g><g transform="translate(1111.4604924841767 260.0429193037973) rotate(0 7 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">3</text></g><g transform="translate(1243.82454839135 257.10983649789017) rotate(0 4 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">7</text></g><g transform="translate(669.3768295094944 269.27946993670884) rotate(0 2 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">1</text></g><g transform="translate(671.9084750791146 240.1655458860759) rotate(0 7.5 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">2</text></g><g transform="translate(591.9187598892403 10) rotate(0 70.50000000000006 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">4 no left node</text></g><g transform="translate(739.1551127373418 11.184071729957793) rotate(0 59.5 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">, curr is null</text></g><g transform="translate(705.0424495648733 56.1883900316455) rotate(0 24.974609375 123.1953125)"><path d="M-1.1339263580739498 0.240769412368536 C10.717585160191085 1.6538931996883912, 26.61454116698151 0.539729920155005, 49.713532123714685 -0.8291374184191227 M0.45601494424045086 0.29737343080341816 C17.26503583081867 -0.8846251378705347, 34.34268579149357 0.9610259522745764, 50.21136189810932 -0.08809761516749859 M50.64346131329398 0.3080445639194941 C47.56322755790307 60.550115861641714, 48.21069835201383 120.60974388686083, 49.56751502331714 245.2418138667095 M49.3406426296262 0.25738762409966504 C50.477398212145424 57.381665572872464, 49.84616460685872 116.0497822781889, 49.795642010302736 246.81058059837588 M48.233371052891016 244.70643785223365 C33.97484072295119 245.13122750832736, 20.40555370966176 247.60126985623538, -0.9763527773320675 244.8657104037702 M50.69416303746402 245.59632517583668 C38.19590125311297 247.1804772748876, 26.314291003796097 247.08992154740577, -0.637438403442502 246.6014524269849 M1.1969471414014323 247.86382543853816 C0.7248432887110863 152.84247548257738, 0.5712733539813484 55.42198566654486, -0.10338394432540925 1.394468193170212 M-0.6606065373895468 245.81587713168943 C-0.04404772262025136 174.95709754984753, 0.726689010216678 102.31751352781846, 0.08307542203776044 0.5370793222340096" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(726.0261328225927 270.5888376711442) rotate(0 2 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">1</text></g><g><g transform="translate(608.4786227584387 31.827795358649723) rotate(0 -0.2702334214416169 9.822782581392786)"><path d="M-0.46943819895386696 0.5486982978880406 C-0.4869033740071245 3.617322965466144, -0.8221336087126475 15.439022148664604, -0.9805465071545769 18.42009112166263 M1.4849680172558872 -0.20883904105983686 C1.3699696743039746 3.046237990545767, -1.3590859331570755 16.543368891676455, -2.025434860139139 19.854404203845412" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(608.4786227584387 31.827795358649723) rotate(0 -0.2702334214416169 9.822782581392786)"><path d="M-3.0162429398658706 10.502792724724268 C-3.272451450584093 12.2577042076422, -2.9391432351611546 14.565104933050335, -2.0015617290160304 20.68348138951647 M-3.5379533673134897 10.20570491982051 C-2.722201617375304 12.948222151599666, -2.599090670759525 14.70469009272342, -1.9686118512634645 19.905390722995705" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(608.4786227584387 31.827795358649723) rotate(0 -0.2702334214416169 9.822782581392786)"><path d="M3.234271341292364 11.746436642234348 C1.5589822464915746 13.194563694103499, 0.4732963433795111 15.219631906518538, -2.0015617290160304 20.68348138951647 M2.7125609138447446 11.449348837330591 C2.1001430562537795 13.876366365344804, 0.7942902267914543 15.348518164064279, -1.9686118512634645 19.905390722995705" stroke="#000000" stroke-width="1" fill="none"/></g></g><g transform="translate(660.4444059862869 340.3916139240506) rotate(0 205.5 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">4 no right node, curr is null, so 2 will pop</text></g><g><g transform="translate(684.1967794040083 325.5156909282699) rotate(0 -4.176858544381503 -8.448716722637528)"><path d="M0.15813068524003038 1.1263072215020655 C-1.2668138369697772 -1.5206979969917278, -6.4156018926592875 -13.26882870086955, -7.971144101636673 -16.396771877127016 M-1.2179894343484192 0.6720145674515514 C-2.7836857120938294 -2.252982110113878, -7.020584718074496 -15.164794318420086, -8.51184777400289 -18.02374066677714" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(684.1967794040083 325.5156909282699) rotate(0 -4.176858544381503 -8.448716722637528)"><path d="M-1.0769310188161634 -10.202252197763283 C-3.4651302226951075 -13.672860062855651, -6.743838976796579 -16.436055392001713, -8.71438612961368 -17.727374610648308 M-2.012634281230366 -10.746081801059745 C-3.4450048986052466 -13.15903423484937, -5.664957210785481 -15.022690922889424, -8.612933496572218 -17.759881472850868" stroke="#000000" stroke-width="1" fill="none"/></g><g transform="translate(684.1967794040083 325.5156909282699) rotate(0 -4.176858544381503 -8.448716722637528)"><path d="M-7.227086684090315 -7.6920399849195356 C-7.462971062888193 -12.044833881561496, -8.600132559038864 -15.682110839509795, -8.71438612961368 -17.727374610648308 M-8.162789946504518 -8.235869588215998 C-7.985141028872359 -11.327657690064196, -8.578824980501986 -13.855082731654297, -8.612933496572218 -17.759881472850868" stroke="#000000" stroke-width="1" fill="none"/></g></g><g transform="translate(862.3815104166667 12.089332805907134) rotate(0 68.5 12.5)"><text x="0" y="18" font-family="Virgil" font-size="20px" fill="#000000" text-anchor="start" style="white-space: pre;" direction="ltr">, so 4 will pop</text></g><g transform="translate(1158.1464843750002 48.99297863924045) rotate(0 24.974609375 123.1953125)"><path d="M-1.3943859692662954 -0.4051224533468485 C17.1248374626015 0.9589874853487345, 35.414166256407775 1.2645292987223002, 48.5906924251467 -1.4242269936949015 M-0.775392827577889 -0.9871800122782588 C12.667547997433212 -1.4073936166878775, 25.803423812373513 0.26886408304013454, 50.72022477071732 -0.7683739541098475 M48.50120484163986 -1.4357430272669154 C50.132807842112136 70.99128972260755, 50.768556280562045 140.56797310064653, 50.46564000507423 244.97220888800288 M50.56831961380841 -0.6152629540620191 C48.33671906113076 62.06597981797562, 48.07982911904364 122.03535948346054, 50.06830990703805 246.36092390864297 M48.21192213334143 245.34564227424562 C40.51894129447428 247.5334318758929, 26.783687887858104 246.73161666411997, -1.4493732210248709 247.6958729084581 M48.992424610070884 246.98069648165256 C30.254588845701434 247.12103010631716, 12.665681723604933 245.2993000588528, 0.05558333080261946 245.45358617324382 M0.5728144515406105 245.801644041811 C0.15189386879493155 166.08021686987314, 1.3152519203334239 89.6251933316899, -0.7162043969555609 -0.8543803918815432 M0.061902265111871545 246.60967831515143 C-1.0430795066894407 183.4385872696405, 0.01758278638389399 119.1479611705252, 0.5083415513350877 0.1476552710191108" stroke="#000000" stroke-width="1" fill="none"/></g></svg><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul><li>标签：<code>栈</code></li><li>利用栈存储节点（不是存放值），相当于实现递归的函数调用栈<ul><li>获取当前节点的左子节点，如果节点不为空，压入栈；如果节点为空，弹出栈顶元素，并获取栈顶元素的右子节点，如果节点为空，再次弹出栈顶元素，如果节点不为空，压入栈</li><li>入栈：节点不为空；出栈：节点为空</li></ul></li><li>时间复杂度：</li><li>空间复杂度：</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        TreeNode curr = root;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span> || stack.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(curr);</span><br><span class="line">                list.add(curr.val);</span><br><span class="line">                curr = curr.left;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = stack.pop().right; <span class="comment">// 当没有左子树时，只删除最上面节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;144-二叉树的前序遍历&quot;&gt;&lt;a href=&quot;#144-二叉树的前序遍历&quot; class=&quot;headerlink&quot; title=&quot;144. 二叉树的前序遍历&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一道算法题：水流过几个格子</title>
    <link href="https://depp.wang/2020/07/01/how-many-the-grids-does-water-flow-through/"/>
    <id>https://depp.wang/2020/07/01/how-many-the-grids-does-water-flow-through/</id>
    <published>2020-07-01T20:48:37.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/07/01/how-many-the-grids-does-water-flow-through">原文地址</a></p></blockquote><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><p>一道做智能的对话机器人公司的算法测试题</p><!--[爱因互动](https://einplus.cn/) Python 职位测试题--><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一个矩形的水槽被分为了 N * M 个格子，每个格子内的高度都不同，每个格子和直接相邻的格子相通（对角相邻的不相通）。从最左上角的格子注入水，水会向相通的较低的或同样高的格子流动，但不会流向较高的格子。请写程序计算水一共会流经多少个格子？</p><p> 例如如果格子高度如下分布：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">3 | 5 | 1</span><br><span class="line">---------</span><br><span class="line">2 | 1 | 5  </span><br><span class="line">---------</span><br><span class="line">4 | 2 | 1</span><br></pre></td></tr></table></figure><p>则水会从左上角流经 3、2、1 三个格子，答案为 3。</p><h2 id="解题方案"><a href="#解题方案" class="headerlink" title="解题方案"></a>解题方案</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>需要利用广度优先搜索（队列）的思路</li><li>将元素位置作为队列元素，而不使用元素值作为队列元素</li><li>将 [0, 0] 加入队列，依次遍历队列，将四周小于当前数值的元素加入队列，直到遍历完</li></ul><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">3 | 5 | 1</span><br><span class="line">---------</span><br><span class="line">2 | 1 | 5  </span><br><span class="line">---------</span><br><span class="line">4 | 2 | 1</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">   <span class="number">3</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">   <span class="number">3</span>     <span class="number">2</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">   ↑     </span><br><span class="line">   <span class="number">3</span>     <span class="number">2</span>     <span class="number">1</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">         ↑</span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">5 | 5 | 1</span><br><span class="line">---------</span><br><span class="line">2 | 1 | 5  </span><br><span class="line">---------</span><br><span class="line">4 | 2 | 1</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">   <span class="number">5</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">   </span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>    <span class="number">2</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">   ↑</span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>     <span class="number">2</span>     <span class="number">1</span>     <span class="number">1</span></span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">         ↑</span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>     <span class="number">2</span>     <span class="number">1</span>     <span class="number">1</span>     </span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>]]  [<span class="number">1</span>,<span class="number">1</span>] 已存在，跳过</span><br><span class="line">               ↑</span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>     <span class="number">2</span>     <span class="number">1</span>     <span class="number">1</span>     </span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">                     ↑</span><br><span class="line">   <span class="number">5</span>     <span class="number">5</span>     <span class="number">2</span>     <span class="number">1</span>     <span class="number">1</span>     </span><br><span class="line">[[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">                           ↑</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N^2)。N 为格子数量，因需要判断元素在队列中是否已经存在，所以需要跟其他元素比较</li><li>空间复杂度：O(N)。N 为格子数量，最长需要长度为 N 的额外队列</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printGridNumber</span><span class="params">(self, height_arr)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">judge_contain</span><span class="params">(key, queue)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> queue:</span><br><span class="line">                <span class="keyword">if</span> x == key:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(queue, i, j)</span>:</span></span><br><span class="line">            xlen = len(height_arr)</span><br><span class="line">            ylen = len(height_arr[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> height_arr[i - <span class="number">1</span>][j] &lt;= height_arr[i][j] <span class="keyword">and</span> <span class="keyword">not</span> judge_contain([i - <span class="number">1</span>, j], queue):</span><br><span class="line">                queue.append([i - <span class="number">1</span>, j])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> height_arr[i][j - <span class="number">1</span>] &lt;= height_arr[i][j] <span class="keyword">and</span> <span class="keyword">not</span> judge_contain([i, j - <span class="number">1</span>], queue):</span><br><span class="line">                queue.append([i, j - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; xlen <span class="keyword">and</span> height_arr[i + <span class="number">1</span>][j] &lt;= height_arr[i][j] <span class="keyword">and</span> <span class="keyword">not</span> judge_contain([i + <span class="number">1</span>, j], queue):</span><br><span class="line">                queue.append([i + <span class="number">1</span>, j])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j + <span class="number">1</span> &lt; ylen <span class="keyword">and</span> height_arr[i][j + <span class="number">1</span>] &lt;= height_arr[i][j] <span class="keyword">and</span> <span class="keyword">not</span> judge_contain([i, j + <span class="number">1</span>], queue):</span><br><span class="line">                queue.append([i, j + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        queue = [[<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">        append(queue, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> queue:</span><br><span class="line">            append(queue, x[<span class="number">0</span>], x[<span class="number">1</span>])</span><br><span class="line">            <span class="comment"># print(queue)</span></span><br><span class="line">        <span class="keyword">return</span> len(queue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    height_arr = [[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]]</span><br><span class="line">    print(solution.printGridNumber(height_arr))</span><br></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[[<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]]  # input</span><br><span class="line"><span class="number">3</span>                                  # expect value</span><br><span class="line"></span><br><span class="line">[[<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h2><ul><li>直接遍历所有元素，如果当前值小于左上角、小于周围的值、周围的值小于左上角，则将结果加 1</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printGridNumber</span><span class="params">(self, height_arr)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(i, j)</span>:</span></span><br><span class="line">            left_top_height = height_arr[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            xlen = len(height_arr)</span><br><span class="line">            ylen = len(height_arr[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> left_top_height &gt;= height_arr[i - <span class="number">1</span>][j] &gt;= height_arr[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> left_top_height &gt;= height_arr[i][j - <span class="number">1</span>] &gt;= height_arr[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; xlen <span class="keyword">and</span> left_top_height &gt;= height_arr[i + <span class="number">1</span>][j] &gt;= height_arr[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j + <span class="number">1</span> &lt; ylen <span class="keyword">and</span> left_top_height &gt;= height_arr[i][j + <span class="number">1</span>] &gt;= height_arr[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(height_arr) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> len(height_arr[<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        left_top_height = height_arr[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(left_top_height)</span></span><br><span class="line">        number = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height_arr)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(height_arr[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> height_arr[i][j] &lt;= left_top_height <span class="keyword">and</span> judge(i, j):</span><br><span class="line">                    number += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solution = Solution()</span><br><span class="line">    height_arr = [[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]]</span><br><span class="line">    print(solution.printGridNumber(height_arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/07/01/how-many-the-grids-does-water-flow-through&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目来源&quot;&gt;&lt;a href=&quot;#题目来源&quot; class=&quot;headerlink&quot; title=&quot;题目来源&quot;&gt;&lt;/a&gt;题目来源&lt;/h2&gt;&lt;p&gt;一道做智能的对话机器人公司的算法测试题&lt;/p&gt;
&lt;!--[爱因互动](https://einplus.cn/) Python 职位测试题--&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="https://depp.wang/categories/Algorithms/"/>
    
    
      <category term="Queue" scheme="https://depp.wang/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>一个发布文章到博客园的 Python 脚本</title>
    <link href="https://depp.wang/2020/06/20/a-python-script-to-edit-and-add-cnblogs-posts/"/>
    <id>https://depp.wang/2020/06/20/a-python-script-to-edit-and-add-cnblogs-posts/</id>
    <published>2020-06-20T20:48:37.000Z</published>
    <updated>2020-07-09T02:33:05.095Z</updated>
    
    <content type="html"><![CDATA[<!--一个自动发布、更新本地文章到博客园的 Python 脚本--><!--一个可自动发布本地文章到博客园及更新博客园文章的 Python 脚本--><!--一个可编辑与新增博客园文章的 Python 脚本--><blockquote><p><a href="https://depp.wang/2020/06/20/a-python-script-to-edit-and-add-cnblogs-posts">原文地址</a></p></blockquote><p>我的<a href="https//depp.wang">个人独立博客</a>是基于 Hexo 搭建的，因为小站，Google 搜索引擎收录文章比较慢，还搜不到</p><p>为了解决这个问题，希望把文章也顺便发布到博客平台<a href="https://www.cnblogs.com/deppwang" target="_blank" rel="noopener">博客园</a>上。但不想每次手动复制粘贴，打算利用脚本实现，希望除了发布，并且还能更新文章。原来打算<a href="https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/">找到博客园接口</a>，模拟操作接口实现。搜索发现博客园提供了 <a href="https://rpc.cnblogs.com/metaweblog/deppwang" target="_blank" rel="noopener">MetaWeblog 接口</a>，所以利用接口，开发了这个脚本。<a href="https://github.com/DeppWang/cnblogs-post" target="_blank" rel="noopener">源码地址</a></p><a id="more"></a><h2 id="如何使用这个脚本"><a href="#如何使用这个脚本" class="headerlink" title="如何使用这个脚本"></a>如何使用这个脚本</h2><p>博客园 -&gt; 管理 -&gt; 设置 -&gt; 允许 MetaWeblog 博客客户端访问</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-20-105444.png" alt="image-20200620185444059"></p><p>在 <code>cnblogs-post.py</code> 中配置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">config = &#123;</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'https://rpc.cnblogs.com/metaweblog/deppwang'</span>,               <span class="comment"># 你的 MetaWeblog 访问地址</span></span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'DeppWangXQ'</span>,                                           <span class="comment"># 你的登录用户名，可能跟上面的不一致</span></span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'12345678'</span>                                              <span class="comment"># 你的登录密码</span></span><br><span class="line">    <span class="string">'local_post_path'</span>: <span class="string">'/Users/yanjie/GitHub/HexoBlog/source/_posts/'</span>   <span class="comment"># 你的本地博文路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在文章开头，添加文章信息块，至少需要包括 title 和 tags，格式如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 一个可编辑与新增博客园文章的 Python 脚本</span><br><span class="line">english_title: a-python-script-to-edit-and-add-cnblogs-posts</span><br><span class="line">date: 2020-06-20 20:48:37</span><br><span class="line">tags: 博客园</span><br><span class="line">categories: Tools</span><br><span class="line">---</span><br><span class="line">正文开始 ...</span><br></pre></td></tr></table></figure><p>脚本根据文章名称来判断是否已经发布，如果已经发布，更新，否则新增。默认只操作最近修改文章，但也可以指定文章数量（count）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 cnblogs-post.py [count]   <span class="comment"># macOS/Linux</span></span><br><span class="line">python cnblogs-post.py [count]    <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><p>删除最近发布文章</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 cnblogs-post.py delete    <span class="comment"># macOS/Linux</span></span><br><span class="line">python cnblogs-post.py delete     <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpc.client</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'https://rpc.cnblogs.com/metaweblog/deppwang'</span>,</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">''</span>, </span><br><span class="line">    <span class="string">'password'</span>: <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetaWeblog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, username, password)</span>:</span></span><br><span class="line">        self.url, self.username, self.password = url, username, password</span><br><span class="line">        self.proxy = xmlrpc.client.ServerProxy(self.url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRecentPosts</span><span class="params">(self, count)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.proxy.metaWeblog.getRecentPosts(<span class="string">''</span>, self.username, self.password, count)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    metaWeblog = MetaWeblog(config[<span class="string">'url'</span>], config[<span class="string">'username'</span>], config[<span class="string">'password'</span>])</span><br><span class="line">    posts = metaWeblog.getRecentPosts(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="一文多发"><a href="#一文多发" class="headerlink" title="一文多发"></a>一文多发</h2><p>脚本只实现发布、更新文章到博客园。如果想实现一文多发，可使用 OpenWrit，或自己开发相应脚本，方法为<a href="https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/">找到相应接口</a>，使用模拟操作接口的方式实现</p><p>我个人没有一文多发的需求，感兴趣的同学可以做做</p><!--一文多发更多是面向自媒体工作者，他们需要图形化页面，统计数据等功能。--><!--ArtiPub 使用 [Puppeteer](https://github.com/puppeteer/puppeteer)，太重量级了，稳定性也比较差。一文多发的目的是扩散，最重要是方便、快速（命令行运行即可），除了发布，最好还有更新功能，像阅读统计之类的功能其实可有可无。--><!--OpenWrit 应该也就是使用模拟操作接口的方式实现的，其实我们自己可以找到相应接口，写脚本实现，找接口可参考[这篇文章](https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/)--><!--我个人没有一文多发的需求，感兴趣的同学可以做做--><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://extendswind.top/posts/technical/python3_publish_blog/" target="_blank" rel="noopener">https://extendswind.top/posts/technical/python3_publish_blog/</a></li><li><a href="https://github.com/Whistle1988/auto_post_article" target="_blank" rel="noopener">https://github.com/Whistle1988/auto_post_article</a></li><li><a href="https://rpc.cnblogs.com/metaweblog/deppwang" target="_blank" rel="noopener">https://rpc.cnblogs.com/metaweblog/deppwang</a></li><li><a href="http://samwirch.com/blog/recursively-find-the-last-modified-file-in-python" target="_blank" rel="noopener">http://samwirch.com/blog/recursively-find-the-last-modified-file-in-python</a></li><li><a href="https://github.com/executablebooks/markdown-it-py" target="_blank" rel="noopener">https://github.com/executablebooks/markdown-it-py</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!--一个自动发布、更新本地文章到博客园的 Python 脚本--&gt;

&lt;!--一个可自动发布本地文章到博客园及更新博客园文章的 Python 脚本--&gt;

&lt;!--一个可编辑与新增博客园文章的 Python 脚本--&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://depp.wang/2020/06/20/a-python-script-to-edit-and-add-cnblogs-posts&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的&lt;a href=&quot;https//depp.wang&quot;&gt;个人独立博客&lt;/a&gt;是基于 Hexo 搭建的，因为小站，Google 搜索引擎收录文章比较慢，还搜不到&lt;/p&gt;
&lt;p&gt;为了解决这个问题，希望把文章也顺便发布到博客平台&lt;a href=&quot;https://www.cnblogs.com/deppwang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客园&lt;/a&gt;上。但不想每次手动复制粘贴，打算利用脚本实现，希望除了发布，并且还能更新文章。原来打算&lt;a href=&quot;https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/&quot;&gt;找到博客园接口&lt;/a&gt;，模拟操作接口实现。搜索发现博客园提供了 &lt;a href=&quot;https://rpc.cnblogs.com/metaweblog/deppwang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MetaWeblog 接口&lt;/a&gt;，所以利用接口，开发了这个脚本。&lt;a href=&quot;https://github.com/DeppWang/cnblogs-post&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源码地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://depp.wang/categories/Tools/"/>
    
    
      <category term="博客园" scheme="https://depp.wang/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>快速排序的几种实现方式</title>
    <link href="https://depp.wang/2020/06/18/several-implementations-of-quick-sort/"/>
    <id>https://depp.wang/2020/06/18/several-implementations-of-quick-sort/</id>
    <published>2020-06-18T20:48:37.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://depp.wang/2020/06/18/several-implementations-of-quick-sort/">原文地址</a></p></blockquote><p>快速排序（quick sort）的特点是分块排序，也叫划分交换排序（partition-exchange sort）</p><p>代码实现方式可以有这么几种：</p><ol><li>拼接结果</li><li>左右相互交换</li><li>快慢指针</li></ol><a id="more"></a><h2 id="1-拼接结果"><a href="#1-拼接结果" class="headerlink" title="1. 拼接结果"></a>1. 拼接结果</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="comment"># 当为 0 个或 1 个时，肯定有序，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 选择第一位作为中位数</span></span><br><span class="line">            mid = nums[<span class="number">0</span>]</span><br><span class="line">            less = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:] <span class="keyword">if</span> num &lt;= mid]</span><br><span class="line">            greater = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:] <span class="keyword">if</span> num &gt; mid]</span><br><span class="line">            <span class="keyword">return</span> self.quicksort(less) + [mid] + self.quicksort(greater)</span><br></pre></td></tr></table></figure><p>这种方式最直观，最好理解，但效率不高。为了找出大于和小于中位数的元素，循环遍历了 2 次</p><p>做一点小小的修改，改为一次遍历：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = nums[<span class="number">0</span>]</span><br><span class="line">            less, greater = self.partition(nums, mid)[<span class="number">0</span>], self.partition(nums, mid)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">return</span> self.quicksort(less) + [mid] + self.quicksort(greater)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, nums, mid)</span>:</span></span><br><span class="line">        less, greater = [], []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> num &lt;= mid:</span><br><span class="line">                less.append(num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                greater.append(num)</span><br><span class="line">        <span class="keyword">return</span> less, greater</span><br></pre></td></tr></table></figure><p>优化后，运行时间降低了，但空间使用还很高，每次递归都额外需要 2 个平均长度为  &frac14; n 的数组</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> ... + n<span class="number">-1</span> + n = ((n + <span class="number">1</span>) * n ) / <span class="number">2</span></span><br><span class="line">平均值 = ((n + <span class="number">1</span>) * n ) / <span class="number">2</span> / n = (n + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">两个数组平分平均值： (n + <span class="number">1</span>) / <span class="number">2</span> / <span class="number">2</span> ≈ <span class="number">1</span>/<span class="number">4</span> n</span><br></pre></td></tr></table></figure><h2 id="2-左右相互交换"><a href="#2-左右相互交换" class="headerlink" title="2. 左右相互交换"></a>2. 左右相互交换</h2><p>其实可以不使用额外空间，直接操作原数组。选择一个基准值，将小于它和大于它的元素相互交换。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.quick_sort(nums, <span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(self, nums, start, end)</span>:</span></span><br><span class="line">        <span class="comment"># end - start &lt; 1</span></span><br><span class="line">        <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 每次使用最后一个数作为基准值</span></span><br><span class="line">        pivot_index = end</span><br><span class="line">        pivot = nums[pivot_index]</span><br><span class="line">        </span><br><span class="line">        left, right = start, end - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="comment"># 左边跳过所有小于基准值的元素</span></span><br><span class="line">            <span class="keyword">while</span> nums[left] &lt;= pivot <span class="keyword">and</span> left &lt; right:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 右边跳过所有大于基准值的元素</span></span><br><span class="line">            <span class="keyword">while</span> nums[right] &gt; pivot <span class="keyword">and</span> left &lt; right:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 交换</span></span><br><span class="line">            nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此时左右指针重合（left == right），其指向元素可能大于基准值</span></span><br><span class="line">        <span class="keyword">if</span> nums[left] &gt; pivot:</span><br><span class="line">            nums[left], nums[pivot_index] = nums[pivot_index], nums[left]</span><br><span class="line">        <span class="comment"># 使 left 始终作为较大区间的第 1 个元素</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        self.quick_sort(nums, start, left - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># pivot 不一定在中间，所以包含 left</span></span><br><span class="line">        self.quick_sort(nums, left, end)</span><br></pre></td></tr></table></figure><p>使用此种方式，最好要将开头（或末尾）的元素设为基准值。如果使用中间元素，也最好先交换到开头（或末尾），否则将考虑大量场景。</p><p>排序过程：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="number">6</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> ↑                 ↑  ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">4</span>]</span><br><span class="line">    ↑     ↑           ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">4</span>]</span><br><span class="line">          ↑↑          ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br><span class="line">          ^           </span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>][<span class="number">4</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>nums[left] &lt;= pivot 时：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="number">6</span>  <span class="number">7</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>]</span><br><span class="line"> ↑                 ↑  ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">7</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">1</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br><span class="line">    ↑           ↑     ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br><span class="line">          ↑↑          ^</span><br><span class="line">[<span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span>][<span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h2 id="3-快慢指针"><a href="#3-快慢指针" class="headerlink" title="3. 快慢指针"></a>3. 快慢指针</h2><p>上面这种方式其实使用两个相向指针，也可以使用同向快慢指针实现元素交换。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> random</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(left, right)</span>:</span></span><br><span class="line">            <span class="comment"># right - left &lt; 1</span></span><br><span class="line">            <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 随机选择一个元素作为 pivot</span></span><br><span class="line">            pivot_index = random.randint(left, right)</span><br><span class="line">            pivot = nums[pivot_index]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 1. 将中位数与末尾数交换，便于操作</span></span><br><span class="line">            nums[pivot_index], nums[right] = nums[right], nums[pivot_index]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 使用快慢指针，将所有小于中位数的元素移动到左边</span></span><br><span class="line">            store_index = left</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(left, right):</span><br><span class="line">                <span class="keyword">if</span> nums[i] &lt;= pivot:</span><br><span class="line">                    nums[store_index], nums[i] = nums[i], nums[store_index]</span><br><span class="line">                    store_index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3. store_index 位置元素肯定大于等于 pivot，所以交换</span></span><br><span class="line">            nums[right], nums[store_index] = nums[store_index], nums[right]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 因为 pivot 在中间，所以减 1</span></span><br><span class="line">            quick_sort(left, store_index - <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 因为 pivot 在中间，所以加 1</span></span><br><span class="line">            quick_sort(store_index + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        quick_sort(<span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>排序过程：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="number">6</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> ↑↑                   ^</span><br><span class="line">[<span class="number">6</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> ↑     ↑              ^</span><br><span class="line">[<span class="number">3</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line">    ↑     ↑           ^</span><br><span class="line">[<span class="number">3</span>  <span class="number">1</span>  <span class="number">6</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line">       ↑           ↑  ^</span><br><span class="line">[<span class="number">3</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">4</span>]</span><br><span class="line">          ↑           ^</span><br><span class="line">[<span class="number">3</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br><span class="line">          ^     </span><br><span class="line">[<span class="number">3</span>  <span class="number">1</span>  <span class="number">2</span>][<span class="number">4</span>][<span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>随机选择可以增加每次选择的基准值为中位数的几率</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="最坏时间复杂度"><a href="#最坏时间复杂度" class="headerlink" title="最坏时间复杂度"></a>最坏时间复杂度</h3><p>每次基准值都是最大 （或最小）值时，所需递归次数最多，有两种情况：</p><ol><li>数组有序时，每次使用最后 1 位（或第 1 位）作为基准值</li></ol><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line">                      ^</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span> [<span class="number">8</span>]</span><br><span class="line">                   ^</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span> [<span class="number">7</span>]</span><br><span class="line">                ^</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span> [<span class="number">6</span>]</span><br><span class="line">             ^  </span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span> [<span class="number">5</span>]</span><br><span class="line">          ^  </span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> [<span class="number">4</span>]</span><br><span class="line">       ^  </span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span> [<span class="number">3</span>]</span><br><span class="line">    ^ </span><br><span class="line"> <span class="number">1</span> [<span class="number">2</span>]</span><br><span class="line"> ^ </span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>随机选择时，每次选择到最大（或最小）的一位</li></ol><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"> <span class="number">6</span>  <span class="number">7</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span></span><br><span class="line">             ^</span><br><span class="line"> <span class="number">6</span>  <span class="number">7</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span> [<span class="number">8</span>]</span><br><span class="line">    ^         </span><br><span class="line"> <span class="number">6</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span> [<span class="number">7</span>] <span class="number">8</span></span><br><span class="line"> ^ </span><br><span class="line"> <span class="number">3</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span> [<span class="number">6</span>] <span class="number">7</span>  <span class="number">8</span></span><br><span class="line">             ^ </span><br><span class="line"> <span class="number">3</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">2</span> [<span class="number">5</span>] <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line">    ^ </span><br><span class="line"> <span class="number">3</span>  <span class="number">1</span>  <span class="number">2</span> [<span class="number">4</span>] <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"> ^</span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span> [<span class="number">3</span>] <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line">    ^</span><br><span class="line"> <span class="number">1</span> [<span class="number">2</span>] <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"> ^</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span></span><br></pre></td></tr></table></figure><p>此时递归次数为 n + 1，平均每次排序  &frac12; n 个数。所以最坏时间复杂度：O(n^2)。</p><h3 id="最好时间复杂度"><a href="#最好时间复杂度" class="headerlink" title="最好时间复杂度"></a>最好时间复杂度</h3><p>如果每次选择中位数作为基准值，递归次数会减少么？其实不会减少，但递归中遍历的次数会减少。如果每层遍历看成 n 次的话，可以用下面的这个图表示：</p><!--[图片来自《算法图解》](https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-18-124518.png)--><p><figure>  <img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-18-124518.png" alt="图片来自《算法图解》">  <figcaption style="text-align: center">图片来自《算法图解》</figcaption></figure></p><p>所以最好时间复杂度为：O(n * log n)</p><h3 id="平均时间复杂度"><a href="#平均时间复杂度" class="headerlink" title="平均时间复杂度"></a>平均时间复杂度</h3><p>最坏时间复杂度的情况很少见，所以平均时间复杂度就是最好时间复杂度 O(n * log n)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>每次递归均会使用额外空间，所以空间复杂度跟递归次数有关。</p><p>最坏时间复杂度时，最坏空间复杂度也为 O(n)。最好时间复杂度时时，虽然递归没有减少，但当只有 1 个或 0 个元素时，没有使用额外空间，直接返回，所以最好空间复杂度为 O(log n)。平均时间复杂度也为 O(log n)。</p><p>第 1 种实现因为使用额外数组，最坏空间复杂度为 O(n^2)，最好空间复杂度为 O(n * log n)，</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># nums = [3, 2, 1, 5, 6, 4]</span></span><br><span class="line">    <span class="comment"># 针对第 1 种</span></span><br><span class="line">    print(Solution().quicksort(nums))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 针对第 2、3 种</span></span><br><span class="line">    <span class="comment"># Solution().quicksort(nums)</span></span><br><span class="line">    <span class="comment"># print(nums)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">Quicksort</a></li><li><a href="https://zh.wikipedia.org/wiki/中位數" target="_blank" rel="noopener">中位数</a></li><li><a href="http://en.wikipedia.org/wiki/Pivot_element" target="_blank" rel="noopener">Pivot element</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://depp.wang/2020/06/18/several-implementations-of-quick-sort/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;快速排序（quick sort）的特点是分块排序，也叫划分交换排序（partition-exchange sort）&lt;/p&gt;
&lt;p&gt;代码实现方式可以有这么几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拼接结果&lt;/li&gt;
&lt;li&gt;左右相互交换&lt;/li&gt;
&lt;li&gt;快慢指针&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="https://depp.wang/categories/Algorithms/"/>
    
    
      <category term="快速排序" scheme="https://depp.wang/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>如何查找某个网站的（如：有道云笔记）的接口</title>
    <link href="https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/"/>
    <id>https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com/</id>
    <published>2020-06-11T20:48:37.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com">原文地址</a></p></blockquote><p>开发了个 《一键导出 / 备份「有道云笔记」所有笔记》的<a href="https://github.com/DeppWang/youdaonote-pull" target="_blank" rel="noopener">脚本</a>。主要原理是利用有道云笔记本身的接口。下面是根据正常用户操作逻辑，找到需要的接口，主要是登录和「下载」。</p><a id="more"></a><h2 id="一、登录"><a href="#一、登录" class="headerlink" title="一、登录"></a>一、登录</h2><p>登录的目的是获取 Cookie</p><h3 id="1-1-找登录接口"><a href="#1-1-找登录接口" class="headerlink" title="1.1 找登录接口"></a>1.1 找登录接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-150019.png" alt="image-20200610230018739" style="zoom:50%;"></p><p>接口应该在登录时执行。使用<strong>错误密码</strong>测试，可得到登录 post 请求接口。注意过滤条件是 <strong>All</strong></p><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">https://note.youdao.com/login/acc/urs/verify/<span class="meta">check</span>?app=web<span class="variable">&amp;product</span>=YNOTE<span class="variable">&amp;tp</span>=urstoken<span class="variable">&amp;cf</span>=6<span class="variable">&amp;fr</span>=1<span class="variable">&amp;systemName</span>=<span class="variable">&amp;deviceType</span>=<span class="variable">&amp;ru</span>=</span><br><span class="line">https://note.youdao.com/signIn//loginCallback.html<span class="variable">&amp;er</span>=</span><br><span class="line">https://note.youdao.com/signIn//loginCallback.html&amp;</span><br><span class="line">vcode=dman9<span class="variable">&amp;systemName</span>=mac<span class="variable">&amp;deviceType</span>=MacPC<span class="variable">&amp;timestamp</span>=1591770253472</span><br></pre></td></tr></table></figure><h3 id="1-2-推导密码加密规则"><a href="#1-2-推导密码加密规则" class="headerlink" title="1.2 推导密码加密规则"></a>1.2 推导密码加密规则</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-062936.png" alt="image-20200610142935436"></p><p>本地测试使用同样错误密码用不同加密算法加密，看加密结果是否一致</p><p>发现使用 md5 加密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Python3</span></span><br><span class="line">password=hashlib.md5(password.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br></pre></td></tr></table></figure><h3 id="1-3-找返回验证登录状态-Cookie-的接口"><a href="#1-3-找返回验证登录状态-Cookie-的接口" class="headerlink" title="1.3 找返回验证登录状态 Cookie 的接口"></a>1.3 找返回验证登录状态 Cookie 的接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-091312.png" alt="image-20200610171312277" style="zoom:50%;"></p><p>登录成功后，会返回验证登录状态的 Cookie。接口应该在登录成功后执行。发现跳转首页后第一个 XHR 接口中包含验证登录状态的 Cookie，YNOTE_CSTK</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">https://note.youdao.com/yws/mapi/<span class="keyword">user</span>?<span class="keyword">method</span>=<span class="keyword">get</span>&amp;multilevelEnable=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><!--只需要有 YNOTE_CSTK 和 YNOTE_SESS 两个即可登录，两个都需要登录成功后的值，不一定要一起返回的。只暴露 YNOTE_CSTK 不用担心账号被登录--><h2 id="二、「下载」"><a href="#二、「下载」" class="headerlink" title="二、「下载」"></a>二、「下载」</h2><h3 id="2-1-找返回根目录-id-的接口"><a href="#2-1-找返回根目录-id-的接口" class="headerlink" title="2.1 找返回根目录 id 的接口"></a>2.1 找返回根目录 id 的接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-11-054205.png" alt="image-20200611134205218" style="zoom:50%;"></p><p>我们根据一个笔记 URL 可以看出，URL 里包含了父文件夹 id 和当前文件 id。「我的文件夹」下的 test.md 的 URL：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/note.youdao.com/web</span><span class="regexp">/#/file</span><span class="regexp">/F83DF1ADA69344D194C7CE861D09B1A1/note</span><span class="regexp">/WEB4aa8bf8074d61befea1dd20f5593f01c/</span></span><br></pre></td></tr></table></figure><p>「我的文件夹」 是根目录，它的 id 是 <code>F83DF1ADA69344D194C7CE861D09B1A1</code>，下面称它为 root_id。</p><p>我们推测，有道云笔记是设计是根据文件夹 id，获取文件夹下的所有文件信息（打开文件夹，可看到文件夹下的文件）。所以我们需要先得到 root_id。当登录成功后，跳转到首页时，应该有接口能得到 root_id。</p><p>测试发现下面接口返回值包含 root_id：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>note.youdao.com<span class="regexp">/yws/</span>api<span class="regexp">/personal/</span>file?method=getByPath&amp;keyfrom=web&amp;cstk=<span class="number">01</span>PvSwwu</span><br></pre></td></tr></table></figure><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-11-070108.png" alt="image-20200611150107522" style="zoom:50%;"></p><p>接口返回格式类似这样：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"fileEntry"</span>:&#123;</span><br><span class="line">        <span class="attr">"userId"</span>:<span class="string">"m17191082115@163.com"</span>,</span><br><span class="line">        "id":"F83DF1ADA69344D194C7CE861D09B1A1", // root_id</span><br><span class="line">        "version":22888,</span><br><span class="line">        "name":"ROOT",</span><br><span class="line">        "parentId":"0",</span><br><span class="line">        "createTimeForSort":1497860357,</span><br><span class="line">        "modifyTimeForSort":1497860357,</span><br><span class="line">        ....</span><br><span class="line">    &#125;,</span><br><span class="line">    "fileMeta":&#123;</span><br><span class="line">        "chunkList":"None",</span><br><span class="line">        "sharedCount":0,</span><br><span class="line">        "title":"ROOT",</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root_id = response.content[<span class="string">'fileEntry'</span>][<span class="string">'id'</span>]</span><br></pre></td></tr></table></figure><h3 id="2-2-找获取目录下所有文件信息的接口"><a href="#2-2-找获取目录下所有文件信息的接口" class="headerlink" title="2.2 找获取目录下所有文件信息的接口"></a>2.2 找获取目录下所有文件信息的接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-11-052343.png" alt="image-20200611132342543" style="zoom:50%;"></p><p>有了 root_id，需要找到根据 id 获取目录下所有文件信息的接口。</p><p>接口应该在打开文件夹时执行。点击某一个文件夹，测试发现包含当前目录所有文件信息的接口为：</p><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">https://note.youdao.com/yws/api/personal/<span class="meta">file</span>/9d8a2385eeec77338211b4f04bbf844d?all=true<span class="variable">&amp;f</span>=true<span class="variable">&amp;len</span>=30<span class="variable">&amp;sort</span>=1<span class="variable">&amp;isReverse</span>=false<span class="variable">&amp;method</span>=listPageByParentId<span class="variable">&amp;keyfrom</span>=web<span class="variable">&amp;cstk</span>=01PvSwwu</span><br></pre></td></tr></table></figure><p>接口返回格式跟上面差不多，只是数量更多，属性多了 parentId（父文件夹 id）。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"fileEntry"</span>:&#123;</span><br><span class="line">            <span class="attr">"userId"</span>:<span class="string">"m17191082115@163.com"</span>,</span><br><span class="line">            <span class="attr">"id"</span>:<span class="string">"9d8a2385eeec77338211b4f04bbf844d"</span>,</span><br><span class="line">            <span class="attr">"version"</span>:<span class="number">14168</span>,</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"来自手机"</span>,</span><br><span class="line">            "parentId":"F83DF1ADA69344D194C7CE861D09B1A1", // 父文件夹的 id，此时是 root_id</span><br><span class="line">            "createTimeForSort":1550712995,</span><br><span class="line">            "modifyTimeForSort":1550713003,</span><br><span class="line">            ....</span><br><span class="line">        &#125;,</span><br><span class="line">        "fileMeta":&#123;</span><br><span class="line">            "chunkList":null,</span><br><span class="line">            "sharedCount":0,</span><br><span class="line">            "title":"来自手机",</span><br><span class="line">            "fileSize":0,</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-3-找到获取文件内容的接口"><a href="#2-3-找到获取文件内容的接口" class="headerlink" title="2.3 找到获取文件内容的接口"></a>2.3 找到获取文件内容的接口</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-095111.png" alt="image-20200610175111568" style="zoom:50%;"></p><p>通过文件夹 id 得到了文件 id（fileId），需要找到根据 fileId 获取文件内容的接口。</p><p>接口应该在点击笔记标题得到笔记内容时执行。点击某一篇笔记标题，可以找到获取文件内容的接口：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>note.youdao.com<span class="regexp">/yws/</span>api<span class="regexp">/personal/</span>sync?method=download&amp;keyfrom=web&amp;cstk=<span class="number">01</span>PvSwwu</span><br></pre></td></tr></table></figure><h2 id="三、模拟浏览器操作"><a href="#三、模拟浏览器操作" class="headerlink" title="三、模拟浏览器操作"></a>三、模拟浏览器操作</h2><h3 id="3-1-设置请求头"><a href="#3-1-设置请求头" class="headerlink" title="3.1 设置请求头"></a>3.1 设置请求头</h3><p>随便哪个页面（如：首页 <code>https://note.youdao.com/</code>）可以看到请求头包含下面这些内容：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-102800.png" alt="image-20200610182800122" style="zoom:50%;"></p><p>取一部分设置即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YoudaoNoteSession</span><span class="params">(requests.Session)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">            <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">            <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-模拟「进入网页版」"><a href="#3-2-模拟「进入网页版」" class="headerlink" title="3.2 模拟「进入网页版」"></a>3.2 模拟「进入网页版」</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-113424.png" alt="image-20200610193423993" style="zoom: 50%;"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.get(<span class="string">'https://note.youdao.com/web/'</span>)</span><br></pre></td></tr></table></figure><p>点击「进入网页版」，会重定向到登录页面</p><h3 id="3-3-模拟打开登录页"><a href="#3-3-模拟打开登录页" class="headerlink" title="3.3 模拟打开登录页"></a>3.3 模拟打开登录页</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-10-060620.png" alt="image-20200610140619564" style="zoom: 67%;"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.get(<span class="string">'https://note.youdao.com/signIn/index.html?&amp;callback=https%3A%2F%2Fnote.youdao.com%2Fweb%2F&amp;from=web'</span>)</span><br></pre></td></tr></table></figure><p>跳转登录页后，要执行下面 3 个接口：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.get(<span class="string">'https://note.youdao.com/login/acc/pe/getsess?product=YNOTE&amp;_='</span> + timestamp())</span><br><span class="line">self.get(<span class="string">'https://note.youdao.com/auth/cq.json?app=web&amp;_='</span> + timestamp())</span><br><span class="line">self.get(<span class="string">'https://note.youdao.com/auth/urs/login.json?app=web&amp;_='</span> + timestamp())</span><br></pre></td></tr></table></figure><h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h2><p>根据找到的接口，模拟用户操作也有不少应用场景。除了开发像这种导出文件的脚本，可以开发一切你想自动化执行的操作。比方 cnblogs、juejin 发文章等。比较麻烦的就是像上面这样找接口了，可以先看看有没有人有过总结。</p><p>也可以利用一些浏览器的 API，如 <a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noopener">Puppeteer</a>，它提供一个真实的浏览器环境，可以真正模拟用户操作，不需要找到所有接口，只需要设置网页 url，以及设置需要操作的「按钮」属性。因为提供浏览器环境，它属于重量级操作。可以看看 <a href="https://github.com/crawlab-team/artipub" target="_blank" rel="noopener">ArtiPub</a> 如何使用 Puppeteer。这种方式有点不好的地方就是平台可能改前端属性，需要注意更新。</p><!--有什么不明白的看看[源码](http://github.com/DeppWang/youdaonote-pull/blob/master/pull.py)就知道了。--><p>全文完。</p><!--cnblogs.com 发布文章是用 i.cnblogs.com/api/posts 接口。所以 ArtiPub 没有接口？--><p>5</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开发了个 《一键导出 / 备份「有道云笔记」所有笔记》的&lt;a href=&quot;https://github.com/DeppWang/youdaonote-pull&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;脚本&lt;/a&gt;。主要原理是利用有道云笔记本身的接口。下面是根据正常用户操作逻辑，找到需要的接口，主要是登录和「下载」。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://depp.wang/categories/Markdown/"/>
    
    
      <category term="有道云笔记" scheme="https://depp.wang/tags/YouDaoNote/"/>
    
      <category term="接口" scheme="https://depp.wang/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>iTranswarp 部署记录</title>
    <link href="https://depp.wang/2020/05/26/itranswarp-deploy-record/"/>
    <id>https://depp.wang/2020/05/26/itranswarp-deploy-record/</id>
    <published>2020-05-26T17:58:35.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/05/26/itranswarp-deploy-record/">原文地址</a></p><p>目的：使用 <a href="https://github.com/michaelliao/itranswarp" target="_blank" rel="noopener">iTranswarp</a> 学习 ngix 配置</p><p>如果你只想本地启动，直接修改 ip，使用 docker-compose 即可</p><a id="more"></a><h2 id="Google-Cloud-Platform-配置"><a href="#Google-Cloud-Platform-配置" class="headerlink" title="Google Cloud Platform 配置"></a>Google Cloud Platform 配置</h2><p>本地部署耗资源，服务器部署</p><p>腾讯云 clone GitHub 项目太慢，使用 <a href="https://console.cloud.google.com/" target="_blank" rel="noopener">Google Cloud Platform</a>，招商银行国际信用卡注册</p><p>Compute Engine 新建「虚拟机实例」 CentOS7</p><p>实例配置（防火墙）入站端口</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> tcp:<span class="number">13306</span>,<span class="number">16379</span>,<span class="number">443</span>,<span class="number">80</span></span><br></pre></td></tr></table></figure><p>「元数据」添加公钥 id_rsa.pub，使用 SSH 公钥登录，原理请看<a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH 原理与运用（一）：远程登录</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa(私钥) your_user_name@ip</span><br><span class="line"></span><br><span class="line">ssh -i ~/.ssh/id_rsa_4 deppwxq@35.201.176.108 # 示例</span><br></pre></td></tr></table></figure><p>安装 Git、配置别名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install git-core</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.unstage <span class="string">'reset HEAD'</span></span><br><span class="line">git config --global alias.last <span class="string">'log -1'</span></span><br><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'% Cred% h% Creset -% C(yellow)% d% Creset % s % Cgreen(% cr) % C(bold blue)&lt;% an&gt;% Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><p>切换为 ohmyzsh（个人习惯）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update &amp;&amp; sudo yum -y install zsh</span><br><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换 zsh 失败时，重新切换</span></span><br><span class="line">sudo chsh -s /bin/zsh your_user_name</span><br><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><ul><li>可能需要输入用户密码，用户密码为 Google 账号密码</li><li>未生效时重启实例，重启 ip 会变！</li></ul><p>语言设置为英文（默认就是英文，为何 Git 显示中文）</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">localectl</span></span><br></pre></td></tr></table></figure><p>安装 <a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Docker</a>，<a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 教程</a></p><p>安装 <a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">Docker-Compose</a>，<a href="https://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html" target="_blank" rel="noopener">Docker-Compose 教程</a></p><p>重启实例，ip 会变！需要重启 docker daemon</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>docker start</span><br></pre></td></tr></table></figure><h2 id="服务器运行项目"><a href="#服务器运行项目" class="headerlink" title="服务器运行项目"></a>服务器运行项目</h2><p>先 fork 项目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/your-name/itranswarp.git <span class="comment"># 使用 HTTPS</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> itranswarp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp .env.example .env</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim .env <span class="comment"># 修改为服务器公网 ip</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up <span class="comment"># 启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose stop <span class="comment"># 停止</span></span></span><br></pre></td></tr></table></figure><p>修改服务器 hosts，相当于 DNS</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure><p>使用 <a href="https://zh.wikipedia.org/wiki/Lynx" target="_blank" rel="noopener">lynx</a> 模拟服务器本地浏览器打开 <code>https://www.local.itranswarp.com/</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install lynx</span><br><span class="line">lynx https://www.local.itranswarp.com/</span><br></pre></td></tr></table></figure><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-05-25-143614.png" alt="image-20200525223613874"></p><p>远程连接 Redis</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 远程连接</span></span><br><span class="line">redis-cli -h XXX.XXX.XXX.XXX(ip) -p port -a password</span><br><span class="line">redis-cli -h ip -p 16379 -a JFPRJ</span><br></pre></td></tr></table></figure><p>远程连接 Mysql 使用 Navicat Premium</p><p>进入容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container exec -it [containerId] /bin/bash # 启动容器实例 bash</span><br><span class="line">or</span><br><span class="line">docker exec -it [containerId] /bin/bash</span><br></pre></td></tr></table></figure><h2 id="使用自定义域名"><a href="#使用自定义域名" class="headerlink" title="使用自定义域名"></a>使用自定义域名</h2><h3 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h3><p>（例：万网）配置域名解析</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">A www.xingquan.wang ip</span><br><span class="line">A static.xingquan.wang ip</span><br><span class="line">A source.xingquan.wang ip</span><br><span class="line">A @xingquan.wang ip</span><br></pre></td></tr></table></figure><h3 id="申请数字证书"><a href="#申请数字证书" class="headerlink" title="申请数字证书"></a>申请数字证书</h3><p><a href="https://freessl.org/" target="_blank" rel="noopener">freessl</a> 申请免费数字证书</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">www<span class="selector-class">.xingquan</span><span class="selector-class">.wang</span></span><br><span class="line">static<span class="selector-class">.xingquan</span><span class="selector-class">.wang</span></span><br><span class="line">source<span class="selector-class">.xingquan</span><span class="selector-class">.wang</span></span><br><span class="line">xingquan.wang</span><br></pre></td></tr></table></figure><p>可四个域名同时申请同一个数字证书，也可分开申请</p><p>离线申请，使用 <a href="https://keymanager.org/" target="_blank" rel="noopener">KeyManager</a>，最后「导出证书」，解压可得到两个文件：<code>**</code>.crt，<code>**</code>.key。crt 为数字证书，key 为服务器私钥，深入理解请看<a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&mid=2665513779&idx=1&sn=a1de58690ad4f95111e013254a026ca2&chksm=80d67b70b7a1f26697fa1626b3e9830dbdf4857d7a9528d22662f2e43af149265c4fd1b60024&scene=21#wechat_redirect" target="_blank" rel="noopener">一个故事讲完 https</a></p><h3 id="修改项目配置文件"><a href="#修改项目配置文件" class="headerlink" title="修改项目配置文件"></a>修改项目配置文件</h3><p>clone fork 项目到本地，（切换分支）修改配置。</p><p>全局将 local.itranswarp.com 修改为你的域名（如：xingquan.wang）</p><p>修改 local.itranswarp.com.crt / local.itranswarp.com.key 为 xingquan.wang.crt、xingquan.wang.key，使用「导出证书」的 crt、key 替换。local-conf 文件夹下可不修改</p><p>修改配置后，只重启 docker-compose（容器），配置是否生效？生效</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><a href="https://www.xingquan.wang" target="_blank" rel="noopener">https://www.xingquan.wang</a></p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-05-26-084417.png" alt="image-20200526164417094" style="zoom:50%;"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习到</p><ul><li>HTTPS、证书</li><li>ngix 配置</li></ul><p>问题：</p><ul><li>Docker 如何进入容器操作，如查看日志、修改数据库</li><li>iTranswarp 作为博客，没有订阅地址？</li></ul><p>admin 默认密码为 123456</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/05/26/itranswarp-deploy-record/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目的：使用 &lt;a href=&quot;https://github.com/michaelliao/itranswarp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iTranswarp&lt;/a&gt; 学习 ngix 配置&lt;/p&gt;
&lt;p&gt;如果你只想本地启动，直接修改 ip，使用 docker-compose 即可&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://depp.wang/categories/Linux/"/>
    
    
      <category term="iTranswarp" scheme="https://depp.wang/tags/iTranswarp/"/>
    
  </entry>
  
  <entry>
    <title>一个一键导出/备份「有道云笔记」所有笔记的脚本</title>
    <link href="https://depp.wang/2020/05/18/export-youdaonote-all-notes/"/>
    <id>https://depp.wang/2020/05/18/export-youdaonote-all-notes/</id>
    <published>2020-05-18T13:26:55.000Z</published>
    <updated>2020-07-09T02:33:05.095Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/05/18/export-youdaonote-all-notes/">原文地址</a></p></blockquote><h2 id="出发点"><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h2><p>原来一直是有道云笔记的忠实用户，后面接触到了所见即所得的 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>，有点用不惯有道云笔记了，想着有什么法子能电脑本地文件和有道云笔记同步，这样电脑使用 Typora，手机使用有道云笔记。发现有道云笔记有 <a href="http://note.youdao.com/open/developguide.html" target="_blank" rel="noopener">Open API</a> ，打算利用提供的 API，写两个脚本，一个 pull 所有文件到本地，一个 push 本地文件到云笔记。但 API 太难用了，N 多年没更新了，问客服也没更新的意思，开发到最后发现竟然没有 Markdown 文件的接口，醉了。遂放弃。</p><p>现在我使用 Typora + <a href="https://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a> + <a href="https://www.mweb.im/" target="_blank" rel="noopener">MWeb</a> 实现同步笔记和手机查看编辑的功能，很香。</p><p>最近给朋友推荐此方式，但发现有道云笔记最新的 Mac 客户端和网页端去除了导出所有笔记的功能！这是什么逻辑，怕用户跑了么。所以在原来 pull 脚本的基础上修改得到此脚本。</p><p>脚本地址：<a href="https://github.com/DeppWang/youdaonote-pull" target="_blank" rel="noopener">https://github.com/DeppWang/youdaonote-pull</a></p><a id="more"></a><h2 id="使用提示"><a href="#使用提示" class="headerlink" title="使用提示"></a>使用提示</h2><ol><li>脚本单纯本地运行，不用担心你的账号密码泄露。但注意，如果你自己修改脚本，注意不要将 config.json 文件 push 到 GitHub</li><li>.note 格式笔记下载后为 xml 格式，<strong>默认将 .note 格式笔记转换为 Markdown 格式</strong>，table 等未转换，需要手动复制</li><li>有道云笔记图床图片在有道云笔记外不显示，<strong>默认下载到本地，使用本地图片链接，可设置上传到免费的 <a href="https://sm.ms" target="_blank" rel="noopener">SM.MS</a> 上</strong></li><li>如果你不是开发者，可能对下面的命令行操作有所陌生，建议按步骤慢慢操作一遍。后续我会更加完善此文档，并根据需求看是否应该提供网页下载</li><li>请确认代码是否为最新，有问题请提交 issue</li></ol><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><!--针对普通用户--><h3 id="一、导出前的准备工作"><a href="#一、导出前的准备工作" class="headerlink" title="一、导出前的准备工作"></a>一、导出前的准备工作</h3><h4 id="1、安装-Git、clone-项目"><a href="#1、安装-Git、clone-项目" class="headerlink" title="1、安装  Git、clone 项目"></a>1、安装  <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>、clone 项目</h4><ul><li>可根据 <a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496" target="_blank" rel="noopener">廖雪峰 Git 教程</a> 安装 Git，测试是否安装成功</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><ul><li>打开命令行软件，如 Terminal (macOS)、PowerShell(Windows)，clone 项目，里面包含脚本</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd</span><br><span class="line">git clone https://github.com/DeppWang/youdaonote-pull.git</span><br><span class="line">cd youdaonote-pull</span><br></pre></td></tr></table></figure><h4 id="2、安装-Python3、安装依赖模块（包）"><a href="#2、安装-Python3、安装依赖模块（包）" class="headerlink" title="2、安装 Python3、安装依赖模块（包）"></a>2、安装 Python3、安装依赖模块（包）</h4><ul><li>可根据 <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1016959856222624" target="_blank" rel="noopener">廖雪峰 Python 教程</a> 安装 Python3，测试是否安装成功</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 --version  # macOS/Linux</span><br><span class="line">python --version  # Windows</span><br></pre></td></tr></table></figure><ul><li>安装 requests 依赖包</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> macOS/Linux</span></span><br><span class="line">sudo easy_install pip3 # 安装 Python3 Package Installer</span><br><span class="line">pip3 install requests # 安装 requests 包，脚本依赖 requests</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Windows</span></span><br><span class="line">pip install requests # 安装 requests 包，脚本依赖 requests</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有问题可参考 https://www.liaoxuefeng.com/wiki/1016959663602400/1017493741106496</span></span><br></pre></td></tr></table></figure><h4 id="3、设置脚本参数配置文件"><a href="#3、设置脚本参数配置文件" class="headerlink" title="3、设置脚本参数配置文件"></a>3、设置脚本参数配置文件</h4><p>config.json</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"username"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"password"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"local_dir"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"ydnote_dir"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"smms_secret_token"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>username：<strong>必填</strong>，你的有道云笔记用户名</li><li>password：<strong>必填</strong>，你的有道云笔记密码</li><li>local_dir：选填，本地存放导出文件的文件夹，不填则默认为当前文件夹</li><li>ydnote_dir：选填，有道云笔记指定导出文件夹名，不填则导出所有文件</li><li>smms_secret_token：选填， <a href="https://sm.ms" target="_blank" rel="noopener">SM.MS</a> 的 Secret Token（注册后 -&gt; Dashboard -&gt; API Token），用于上传笔记中有道云图床图片到 SM.MS 图床，不填则只下载到本地（youdaonote-images 文件夹），Markdown 使用本地链接</li><li>建议使用 <a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">Sublime</a> 编辑 config.json</li></ul><p>示例：</p><ul><li>macOS</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"username"</span>: <span class="string">"deppwang@163.com"</span>,</span><br><span class="line">   <span class="attr">"password"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">   <span class="attr">"local_dir"</span>: <span class="string">"/Users/yanjie/Dropbox/youdaonote/test"</span>,</span><br><span class="line">   <span class="attr">"ydnote_dir"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"smms_secret_token"</span>: <span class="string">"SGSLk9yWdTe4RenXYqEPWkqVrx0Yexample"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Windows</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"username"</span>: <span class="string">"deppwang@163.com"</span>,</span><br><span class="line">   <span class="attr">"password"</span>: <span class="string">"12345678"</span>,</span><br><span class="line">   <span class="attr">"local_dir"</span>: <span class="string">"D:/Dropbox/youdaonote/test"</span>,</span><br><span class="line">   <span class="attr">"ydnote_dir"</span>: <span class="string">""</span>,</span><br><span class="line">   <span class="attr">"smms_secret_token"</span>: <span class="string">"SGSLk9yWdTe4RenXYqEPWkqVrx0Yexample"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、运行导出脚本"><a href="#二、运行导出脚本" class="headerlink" title="二、运行导出脚本"></a>二、运行导出脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 pull.py # macOS/Linux</span><br><span class="line">python pull.py  # Windows</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-09-130325.jpg" alt=""></p><!--[](https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-06-07-140101.jpg)--><h3 id="三、多次导出"><a href="#三、多次导出" class="headerlink" title="三、多次导出"></a>三、多次导出</h3><p>多次导出时，同样使用以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 pull.py # macOS/Linux</span><br><span class="line">python pull.py # Windows</span><br></pre></td></tr></table></figure><p>根据有道云笔记的最后修改时间是否大于本地文件最后修改时间来判断是否更新。再次导出时，只会导出有道云笔记上次导出后新增、修改的笔记，不会覆盖本地已经修改的文件。<strong>但有道云笔记和本地不要同时修改同一个文件，这样会导致本地修改丢失</strong>！</p><p>导出是根据最后修改时间来判断，所以被更新文件和新导出一样，会重复下载图片</p><h2 id="后续开发计划"><a href="#后续开发计划" class="headerlink" title="后续开发计划"></a>后续开发计划</h2><ul><li><input checked disabled type="checkbox"> 将 .note 文件转换为 MarkDown 文件</li><li><input checked disabled type="checkbox"> 解决有道云图床图片不能显示问题，实现方式为默认下载到本地，使用本地图片链接，也可上传到 SM.MS 图床</li><li><input checked disabled type="checkbox"> 首次导出使用账号密码登录，再次导出时使用 Cookie 登录（Cookie 保存在 cookies.json 中），避免频繁操作时因为需要输入验证码导致登录不上的情况</li><li><input disabled type="checkbox"> 优化如果同一目录存在同名的 .md 和 .note 文件，.md 文件将被覆盖的情况</li><li><input disabled type="checkbox"> 并发执行以加快速度</li><li><input disabled type="checkbox"> 针对非开发者用户，提供网页输入账号密码直接下载所有笔记压缩包的方式</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>正常用户操作时，浏览器（前端）调用服务器（后端）接口，接口返回文件内容由前端渲染显示。</li><li>原理是利用有道云笔记本身的接口，模拟操作接口，将前端显示改为存放到本地。可以看看<a href="https://depp.wang/2020/06/11/how-to-find-the-api-of-a-website-eg-note-youdao-com">如何找到有道云笔记的接口</a></li><li>Xml 转换为 Markdown：使用了 <a href="http://docs.python.org/3.7/library/xml.etree.elementtree.html" target="_blank" rel="noopener">xml.etree.ElementTreeI</a></li></ul><h2 id="感谢（参考）"><a href="#感谢（参考）" class="headerlink" title="感谢（参考）"></a>感谢（参考）</h2><ul><li><a href="https://github.com/wesley2012/YoudaoNoteExport" target="_blank" rel="noopener">YoudaoNoteExport</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/05/18/export-youdaonote-all-notes/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;出发点&quot;&gt;&lt;a href=&quot;#出发点&quot; class=&quot;headerlink&quot; title=&quot;出发点&quot;&gt;&lt;/a&gt;出发点&lt;/h2&gt;&lt;p&gt;原来一直是有道云笔记的忠实用户，后面接触到了所见即所得的 &lt;a href=&quot;https://typora.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typora&lt;/a&gt;，有点用不惯有道云笔记了，想着有什么法子能电脑本地文件和有道云笔记同步，这样电脑使用 Typora，手机使用有道云笔记。发现有道云笔记有 &lt;a href=&quot;http://note.youdao.com/open/developguide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Open API&lt;/a&gt; ，打算利用提供的 API，写两个脚本，一个 pull 所有文件到本地，一个 push 本地文件到云笔记。但 API 太难用了，N 多年没更新了，问客服也没更新的意思，开发到最后发现竟然没有 Markdown 文件的接口，醉了。遂放弃。&lt;/p&gt;
&lt;p&gt;现在我使用 Typora + &lt;a href=&quot;https://www.dropbox.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dropbox&lt;/a&gt; + &lt;a href=&quot;https://www.mweb.im/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MWeb&lt;/a&gt; 实现同步笔记和手机查看编辑的功能，很香。&lt;/p&gt;
&lt;p&gt;最近给朋友推荐此方式，但发现有道云笔记最新的 Mac 客户端和网页端去除了导出所有笔记的功能！这是什么逻辑，怕用户跑了么。所以在原来 pull 脚本的基础上修改得到此脚本。&lt;/p&gt;
&lt;p&gt;脚本地址：&lt;a href=&quot;https://github.com/DeppWang/youdaonote-pull&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/DeppWang/youdaonote-pull&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OpenSource" scheme="https://depp.wang/categories/OpenSource/"/>
    
    
      <category term="YoudaoNote" scheme="https://depp.wang/tags/YoudaoNote/"/>
    
      <category term="Python" scheme="https://depp.wang/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>从虚拟机角度理解，为什么静态块函数先于构造函数执行</title>
    <link href="https://depp.wang/2020/05/06/static-block-method-and-constructor-method/"/>
    <id>https://depp.wang/2020/05/06/static-block-method-and-constructor-method/</id>
    <published>2020-05-06T15:02:25.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/05/06/static-block-method-and-constructor-method/">原文地址</a></p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>常常有关于静态块函数、构造函数执行顺序的面试题，如果死记硬背，往往容易混淆。需要从虚拟角度来理解，当真正理解后，其实很简单。</p><a id="more"></a><p>一个面试题栗子，请输出下面代码的运行结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"super static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticSuper() &#123;</span><br><span class="line">        System.out.println(<span class="string">"super constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> <span class="keyword">extends</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticTest() &#123;</span><br><span class="line">        System.out.println(<span class="string">"constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in main"</span>);</span><br><span class="line">        StaticTest s = <span class="keyword">new</span> StaticTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">super <span class="keyword">static</span> <span class="keyword">block</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">block</span></span><br><span class="line"><span class="keyword">in</span> main</span><br><span class="line">super <span class="function"><span class="keyword">constructor</span></span></span><br><span class="line"><span class="function"><span class="title">constructor</span></span></span><br></pre></td></tr></table></figure><h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>当执行 StaticTest.main() 时，类加载器加载 StaticTest.class 文件到虚拟机，新建一个与之对应的 Class 对象，如果有类变量，为类变量设置初始值。</p><p>执行 StaticTest.main()，其实是执行 invokestatic 指令，Java 虚拟机规范规定，执行 invokestatic 指令时，需要先初始化类，初始化类时，执行类构造器 <code>&lt;clinit&gt;()</code> 方法， <code>&lt;clinit&gt;()</code> 方法为类变量赋值以及执行静态代码块，虚拟机保证执行 <code>&lt;clinit&gt;()</code> 方法前先执行父类 <code>&lt;clinit&gt;()</code> 方法。</p><p>执行完 <code>&lt;clinit&gt;()</code> 方法后执行 main() 方法</p><p>执行 new 指令时，实例化生成对象，并为实例变量设置初始值（如果没有初始值），再调用实例构造方法  <code>&lt;init&gt;()</code>  为实例变量赋值。</p><h2 id="三、加入构造代码块"><a href="#三、加入构造代码块" class="headerlink" title="三、加入构造代码块"></a>三、加入构造代码块</h2><p>有时候，为了加大难度，里面还会加上构造代码块</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"super static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"super constructor block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticSuper() &#123;</span><br><span class="line">        System.out.println(<span class="string">"super constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> <span class="keyword">extends</span> <span class="title">StaticSuper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"constructor block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StaticTest() &#123;</span><br><span class="line">        System.out.println(<span class="string">"constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in main"</span>);</span><br><span class="line">        StaticTest s = <span class="keyword">new</span> StaticTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造代码块可以看成一个公共构造函数，使用任何构造函数前都需要先执行构造代码块。所以执行结果为：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">super <span class="keyword">static</span> <span class="keyword">block</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">block</span></span><br><span class="line"><span class="keyword">in</span> main</span><br><span class="line">super <span class="function"><span class="keyword">constructor</span> <span class="title">block</span></span></span><br><span class="line"><span class="function"><span class="title">super</span> <span class="title">constructor</span></span></span><br><span class="line"><span class="function"><span class="title">constructor</span> <span class="title">block</span></span></span><br><span class="line"><span class="function"><span class="title">constructor</span></span></span><br></pre></td></tr></table></figure><h2 id="四、应用"><a href="#四、应用" class="headerlink" title="四、应用"></a>四、应用</h2><p>静态代码块属于类构造函数的范畴，所以常用于设置静态变量。如，Integer 里面的 IntegerCache。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            ...</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>1、我们<strong>将静态代码块看成类构造方法</strong>，类构造方法肯定先于实例构造方法执行。</p><p>2、构造代码块可以看成公共构造函数，先于构造函数执行</p><p>这方面的内容可以<a href="https://weread.qq.com/web/reader/cf1320d071a1a78ecf19254k283328802332838023a7529" target="_blank" rel="noopener">《深入理解 Java 虚拟机》（第 3 版）- 7.3 类加载的过程</a>，会比看博文理解得更深刻。</p><!--当运行 StaticTest.main() 后，类加载器就会寻找已经编译的 StaticTest.class 文件，将其加载到虚拟机中，--><blockquote><!--静态块函数也叫静态初始化函数（static initializer）是一段在加载类时会执行的程序代码，它会在其他程序可以使用该类之前就执行。--></blockquote><blockquote><!--构造函数的作用是用于给对象进行初始化。不建立对象，构造函数时不会执行。--></blockquote><!--运行过程如下：--><!--当运行 StaticTest.main()(这是一个 static 方法) 后，类装载器就会寻找已经编译的 StaticTest.class 文件。在装载的过程中，装载器注意到它有一个基类（StaticSuper.class），于是它再装载基类。不管创不创建基类对象，这个过程总会发生。如果基类还有基类，那么第二个基类也会被装载，依此类推。--><!--所有基类装载完成后，先执行根基类的 static 初始化函数，然后是下一个派生类的 static 初始化函数，依此类推。这个顺序非常重要，因为派生类的 “static 初始化函数” 有可能要依赖基类成员的正确初始化。所以依次输出 `super static block`,`static  block`--><!--当所有必要的类都已经装载结束，开始执行 main() 方法体，先输出 `in main`，再用 new StaticSuperTest() 创建对象。--><!--类 StaticTest 存在父类 StaticSuper，先调用 StaticSuper 的构造函数，输出 `super constructor`，最后调用 StaticSuperTest 的构造函数输出 `constructor`。--><!--可以使用 super 显式来指定调用哪个构造函数。基类的构造过程以及构造顺序，同派生类的相同。--><!--五、延伸阅读--><!--[Java 提高篇 ---- 静态代码块、构造代码块、构造函数以及 Java 类初始化顺序](http://www.cnblogs.com/Qian123/p/5713440.html)-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/05/06/static-block-method-and-constructor-method/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;常常有关于静态块函数、构造函数执行顺序的面试题，如果死记硬背，往往容易混淆。需要从虚拟角度来理解，当真正理解后，其实很简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://depp.wang/categories/Java/"/>
    
    
      <category term="Java 基础" scheme="https://depp.wang/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>一道算法题：查找数组 arr 中第 k 小的奇数</title>
    <link href="https://depp.wang/2020/05/06/find-the-k-th-smallest-odd-number-in-the-array-arr/"/>
    <id>https://depp.wang/2020/05/06/find-the-k-th-smallest-odd-number-in-the-array-arr/</id>
    <published>2020-05-06T08:09:37.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<!--题目来源--><!--「北京波粒子科技有限公司」面试题--><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>查找数组 arr 中第 k 小的奇数，如果不存在则返回 0. (arr [i] &gt; 0 (i&gt;=0))</p><p>计算出时间复杂度（注意代码注释，尽可能不用全排序，不要使⽤库函数或脚本中已经实现好的排序算法和⼯具，需要⾃⼰实现数据结构和所需要的算法）</p><a id="more"></a><h2 id="解题方案"><a href="#解题方案" class="headerlink" title="解题方案"></a>解题方案</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>属于 Top K 问题</li><li>假设数组中数据范围有限，使用「计数排序法」</li><li>时间复杂度：O(N)，N 为第 k 小的奇数的大小</li><li>最坏时间复杂度：当不存在时，需要遍历完 counter 数组，O(M)，M 为指定数组的范围</li><li>空间复杂度：O(M)，需要长度为 M 的额外数组。</li><li>标签：<code>计数排序</code></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计每个数字出现的次数</span></span><br><span class="line">        <span class="keyword">int</span>[] counter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10001</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            counter[num] = counter[num] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历 counter，查找第 k 小的奇数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; counter.length; num++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (counter[num] &gt; <span class="number">0</span> &amp;&amp; x &lt; k &amp;&amp; num % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x == k) &#123;</span><br><span class="line">                <span class="keyword">return</span> num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">12</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">3</span>;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Solution().findKth(arr, k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--参考：https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/solution/3chong-jie-fa-miao-sha-topkkuai-pai-dui-er-cha-sou/-->]]></content>
    
    <summary type="html">
    
      &lt;!--题目来源--&gt;

&lt;!--「北京波粒子科技有限公司」面试题--&gt;

&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;查找数组 arr 中第 k 小的奇数，如果不存在则返回 0. (arr [i] &amp;gt; 0 (i&amp;gt;=0))&lt;/p&gt;
&lt;p&gt;计算出时间复杂度（注意代码注释，尽可能不用全排序，不要使⽤库函数或脚本中已经实现好的排序算法和⼯具，需要⾃⼰实现数据结构和所需要的算法）&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="https://depp.wang/categories/Algorithms/"/>
    
    
      <category term="数组" scheme="https://depp.wang/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Spring 中的反射与反射的原理</title>
    <link href="https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/"/>
    <id>https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/</id>
    <published>2020-05-05T08:09:37.000Z</published>
    <updated>2020-07-09T02:33:05.095Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/">原文地址</a></p></blockquote><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-29-154427.jpg" alt="image source: https://coderius.biz.ua/blog/article/vvedenie-v-php-reflection-api"></p><p>在<a href="https://depp.wang/2020/04/19/realize-a-simple-spring-ioc-container/">造轮子：实现一个简易的 Spring IoC 容器</a>一文中提到 Spring 在创建 Bean 实例和依赖注入时使用了反射，本文来具体分析一下 Spring 中的反射以及反射的原理。</p><!--[造轮子：实现一个简易的 Spring IoC 容器](https://mp.weixin.qq.com/s/0kfeHOK6FjbGQ0PwzWe58A)--><a id="more"></a><h2 id="一、Spring-中的反射"><a href="#一、Spring-中的反射" class="headerlink" title="一、Spring 中的反射"></a>一、Spring 中的反射</h2><h3 id="1-1、创建-Bean-实例时的反射"><a href="#1-1、创建-Bean-实例时的反射" class="headerlink" title="1.1、创建 Bean 实例时的反射"></a>1.1、创建 Bean 实例时的反射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过类加载器，根据 class 路径，得到其类对象</span></span><br><span class="line">Class&lt;?&gt; clz = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">"org.deppwang.litespring.v1.service.PetStoreService"</span>);</span><br><span class="line"><span class="comment">// 根据类对象生成 Bean 实例</span></span><br><span class="line"><span class="keyword">return</span> clz.newInstance();</span><br></pre></td></tr></table></figure><p>反射体现在 <code>clz.newInstance();</code> 中，核心代码可分为两部分：</p><p>1、<strong>利用反射</strong>获取当前类 PetStoreService 的所有构造方法信息（Constructor 对象）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Class.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，此时 publicOnly 为 false</span></span><br><span class="line">res = getDeclaredConstructors0(publicOnly);</span><br><span class="line"><span class="comment">// native 方法，从 jvm 中的 class 文件中获取构造方法信息，再转换为 Constructor 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> Constructor&lt;T&gt;[] getDeclaredConstructors0(<span class="keyword">boolean</span> publicOnly);</span><br></pre></td></tr></table></figure><p>2、<strong>利用反射</strong>通过默认构造方法生成实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.NativeConstructorAccessorImpl.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，var1 代表构造方法的参数，此时为 null</span></span><br><span class="line"><span class="keyword">return</span> newInstance0(<span class="keyword">this</span>.c, var1);</span><br><span class="line"><span class="comment">// native 方法，真正生成实例的方法，执行 class 文件的构造方法 &lt;init&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">newInstance0</span><span class="params">(Constructor&lt;?&gt; var0, Object[] var1)</span></span>;</span><br></pre></td></tr></table></figure><!--new 指令--><h3 id="1-2、构造方法依赖注入时的反射"><a href="#1-2、构造方法依赖注入时的反射" class="headerlink" title="1.2、构造方法依赖注入时的反射"></a>1.2、构造方法依赖注入时的反射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射获取当前类所有的构造方法信息（Constructor 对象）</span></span><br><span class="line">Constructor&lt;?&gt;[] candidates = beanClass.getDeclaredConstructors();</span><br><span class="line"><span class="comment">// 设置构造方法参数实例</span></span><br><span class="line">Object[] argsToUse = <span class="keyword">new</span> Object[parameterTypes.length];</span><br><span class="line">argsToUse[i] = getBean(beanNames.get(i));</span><br><span class="line"><span class="comment">// 使用带有参数的 Constructor 对象实现实例化 Bean。此时使用反射跟上面一样（newInstance0），只是多了参数</span></span><br><span class="line"><span class="keyword">return</span> constructorToUse.newInstance(argsToUse);</span><br></pre></td></tr></table></figure><h3 id="1-3、setter-方法依赖注入时的反射"><a href="#1-3、setter-方法依赖注入时的反射" class="headerlink" title="1.3、setter() 方法依赖注入时的反射"></a>1.3、setter() 方法依赖注入时的反射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射获取当前类所有的方法信息（Method 对象）</span></span><br><span class="line">Method[] methods = bean.getClass().getDeclaredMethods();</span><br><span class="line"><span class="comment">// 获得方法参数实例</span></span><br><span class="line">Object propertyBean = getBean(propertyName);</span><br><span class="line"><span class="comment">// 通过反射执行调用 setter() 方法。invoke：调用方法，propertyBean 作为方法的参数</span></span><br><span class="line">method.invoke(bean, propertyBean);</span><br></pre></td></tr></table></figure><p>bean.getClass().getDeclaredMethods(); 中的核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Class.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，publicOnly 为 false</span></span><br><span class="line">getDeclaredMethods0(publicOnly);</span><br><span class="line"><span class="comment">// native 方法，从 jvm 中的 class 文件中获取方法信息，再转换为 Method</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> Method[]      getDeclaredMethods0(<span class="keyword">boolean</span> publicOnly);</span><br></pre></td></tr></table></figure><p>method.invoke(bean, propertyBean); 中的核心代码：</p><!--根据 var0 找到 class 文件的 setter() 方法，执行 setter() 方法？--><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.NativeMethodAccessorImpl.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，var1: bean、var2: propertyBean</span></span><br><span class="line"><span class="keyword">return</span> invoke0(<span class="keyword">this</span>.method, var1, var2);</span><br><span class="line"><span class="comment">// native 方法，运行 class 文件中的字节码指令</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">invoke0</span><span class="params">(Method var0, Object var1, Object[] var2)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-4、-Autowired-依赖注入时的反射"><a href="#1-4、-Autowired-依赖注入时的反射" class="headerlink" title="1.4、@Autowired 依赖注入时的反射"></a>1.4、@Autowired 依赖注入时的反射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射得到当前类所有的字段信息（Field 对象）</span></span><br><span class="line">Field[] fields = bean.getClass().getDeclaredFields();</span><br><span class="line"><span class="comment">// 判断字段是否有 @Autowired 注解</span></span><br><span class="line">Annotation ann = field.getAnnotation(Autowired.class);</span><br><span class="line"><span class="comment">// 设置字段可连接，相当于将非 public（private、default、protect）更改为 public</span></span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 通过反射设置字段的值</span></span><br><span class="line">field.set(bean, getBean(field.getName()));</span><br></pre></td></tr></table></figure><p>bean.getClass().getDeclaredFields(); 中的核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Class.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，此时 publicOnly 为 false</span></span><br><span class="line">getDeclaredFields0(publicOnly);</span><br><span class="line"><span class="comment">// native 方法，从 jvm 中获取 class 文件的字段信息，再转换为 Field</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> Field[]       getDeclaredFields0(<span class="keyword">boolean</span> publicOnly);</span><br></pre></td></tr></table></figure><p>field.set(bean, getBean(field.getName())); 中的核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.UnsafeObjectFieldAccessorImpl.java</span></span><br><span class="line"><span class="comment">// 调用 native 方法，将目标对象 var1 指定偏移量 fieldOffset 处的字段值设置（修改）为 var2。var1 为 bean, var2 为参数实例</span></span><br><span class="line">unsafe.putObject(var1, <span class="keyword">this</span>.fieldOffset, var2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sun.misc.Unsafe.java</span></span><br><span class="line"><span class="comment">// native 方法，直接修改堆中对象字段的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object var1, <span class="keyword">long</span> var2, Object var4)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="二、class-文件与类对象"><a href="#二、class-文件与类对象" class="headerlink" title="二、class 文件与类对象"></a>二、class 文件与类对象</h2><p>class 文件由 java 文件编译而来，class 文件包含字段表、方法表、<code>&lt;init&gt;</code> 方法（构造方法）等。</p><p>当类加载器将 class 文件加载进虚拟机元空间（Meta-space，jdk 1.8）时，虚拟机在元空间中创建一个与之对应的类对象（Class 实例）。并将 class 文件由存放在磁盘的静态结构转换为存放在内存的运行时结构。</p><!--（在元数据中？）--><p>我们可以认为一个类（class 文件）对应一个类对象，当前类的所有对象共用一个类对象。<strong>类对象作为访问存放在 jvm 的 class 文件的入口。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> Field[]       getDeclaredFields0(<span class="keyword">boolean</span> publicOnly);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> Method[]      getDeclaredMethods0(<span class="keyword">boolean</span> publicOnly);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> Constructor&lt;T&gt;[] getDeclaredConstructors0(<span class="keyword">boolean</span> publicOnly);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ReflectionData 缓存反射对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionData</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> Field[] declaredFields;</span><br><span class="line">        <span class="keyword">volatile</span> Field[] publicFields;</span><br><span class="line">        <span class="keyword">volatile</span> Method[] declaredMethods;</span><br><span class="line">        <span class="keyword">volatile</span> Method[] publicMethods;</span><br><span class="line">        <span class="keyword">volatile</span> Constructor&lt;T&gt;[] declaredConstructors;</span><br><span class="line">        <span class="keyword">volatile</span> Constructor&lt;T&gt;[] publicConstructors;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1、获得类对象的方式"><a href="#2-1、获得类对象的方式" class="headerlink" title="2.1、获得类对象的方式"></a>2.1、获得类对象的方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、通过对象</span></span><br><span class="line">Class cls = object.getClass();</span><br><span class="line"><span class="comment">// Object.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、通过类加载器</span></span><br><span class="line">Class cls = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">"org.deppwang.litespring.v1.service.PetStoreService"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、通过 Class 类，本质上也是通过类加载器</span></span><br><span class="line">Class cls = Class.forName(<span class="string">"org.deppwang.litespring.v1.service.PetStoreService"</span>);</span><br><span class="line"><span class="comment">// Class.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; forName0(String name, <span class="keyword">boolean</span> initialize,</span><br><span class="line">                                            ClassLoader loader,</span><br><span class="line">                                            Class&lt;?&gt; caller)</span><br></pre></td></tr></table></figure><!--// 4、直接用类名Class cls = String.class;--><h2 id="三、反射方法"><a href="#三、反射方法" class="headerlink" title="三、反射方法"></a>三、反射方法</h2><p>以下是常用的反射方法。</p><h3 id="3-1、Feild-相关"><a href="#3-1、Feild-相关" class="headerlink" title="3.1、Feild 相关"></a>3.1、Feild 相关</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fields = cls.getFields(); <span class="comment">// 获取所有公共的 Field（包括父类）</span></span><br><span class="line">Field[] fields = cls.getDeclaredFields(); <span class="comment">// 获取当前类的所有 Field（不包括父类），包括公共和非公共</span></span><br><span class="line">Field field = cls.getDeclaredField(<span class="string">"fieldName"</span>); <span class="comment">// 指定获取当前类某个 Field</span></span><br><span class="line">field.set(Object, Object); <span class="comment">// 设置（修改）字段值</span></span><br><span class="line">field.get(Object); <span class="comment">// 获取字段值</span></span><br></pre></td></tr></table></figure><p>field.get(Object) 核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用 native 方法，获取字段对应的值</span></span><br><span class="line"><span class="keyword">return</span> unsafe.getObject(var1, <span class="keyword">this</span>.fieldOffset);</span><br><span class="line"></span><br><span class="line"><span class="comment">// native 方法，从堆中获取对象指定位置的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title">getObject</span><span class="params">(Object var1, <span class="keyword">long</span> var2)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="3-2、Method-相关"><a href="#3-2、Method-相关" class="headerlink" title="3.2、Method 相关"></a>3.2、Method 相关</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] methods = cls.getMethods(); <span class="comment">// 获取所有公共的 Method（包括父类）</span></span><br><span class="line">Method[] methods = cls.getDeclaredMethods(); <span class="comment">// 获取当前类的所有 Method（不包括父类），包括公共和非公共</span></span><br><span class="line">method.invoke(Object instance, Object... parameters); <span class="comment">// 运行方法</span></span><br></pre></td></tr></table></figure><p>运行方法使用场景：要么是修改对象的数据，如 void setter() 方法；要么是获得执行方法的返回结果。</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">result</span> = <span class="function"><span class="keyword">method</span>.<span class="title">invoke</span><span class="params">()</span>.<span class="title">toString</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure><h3 id="3-3、Constructor-相关"><a href="#3-3、Constructor-相关" class="headerlink" title="3.3、Constructor 相关"></a>3.3、Constructor 相关</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] constructors = cls.getConstructors(); <span class="comment">// 获取所有公共的 Constructor（包括父类）</span></span><br><span class="line">Constructor&lt;?&gt;[] constructors = cls.getDeclaredConstructors(); <span class="comment">// 获取当前类的所有Constructor（不包括父类），包括公共和非公共</span></span><br><span class="line">constructor.newInstance(Object... parameters); <span class="comment">// 运行构造方法</span></span><br></pre></td></tr></table></figure><!--默认包含一个无参公有构造方法，当存在自定义构造方法时，就没有默认构造方法--><p>当没有明确编写构造方法，Java 编译器将为该类构建一个默认构造函数 <code>&lt;init&gt;</code></p><h2 id="四、native-方法"><a href="#四、native-方法" class="headerlink" title="四、native 方法"></a>四、native 方法</h2><p>Java 1.1 新增「Java 本地接口」(Java Native Interface，JNI)，JNI 是一种包容极广的编程接口，允许我们从 Java 应用程序里调用 native 方法，native 方法由其它语言（C 、C++ 或汇编语言等）编写。native 方法用于实现 Java 无法处理的功能。</p><h3 id="4-1、简单示例"><a href="#4-1、简单示例" class="headerlink" title="4.1、简单示例"></a>4.1、简单示例</h3><p>一个在 Java 中使用 Java 本地接口（JNI）的简单示例。</p><ul><li>环境：<strong>jdk8、macOS 10.15</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">intMethod</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 启动时载入 libMain.dylib</span></span><br><span class="line">        System.loadLibrary(<span class="string">"Main"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Main().intMethod(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Main.c:</span></span><br><span class="line"><span class="comment">// 将 Main.h 引入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Main.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于继承 "Main.h" 的 Java_Main_intMethod</span></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_Main_intMethod</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    JNIEnv *env, jobject obj, jint i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i * i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译与运行:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同时生成 Main.class 和 Main.h</span></span><br><span class="line">javac Main.java -h .</span><br><span class="line"><span class="comment">// 根据 Main.c 生成 libMain.dylib</span></span><br><span class="line">gcc -dynamiclib -O3 \</span><br><span class="line">    -I/usr/include \</span><br><span class="line">    -I$JAVA_HOME/include \</span><br><span class="line">    -I$JAVA_HOME/include/darwin \</span><br><span class="line">    Main.c -o libMain.dylib</span><br><span class="line"><span class="comment">// 指定 library 的路径为当前路径</span></span><br><span class="line">java -cp . -Djava.library.path=$(pwd) Main</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Main.h .h 作为头文件*/</span></span><br><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class Main */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_Main</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_Main</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     Main</span></span><br><span class="line"><span class="comment"> * Method:    intMethod</span></span><br><span class="line"><span class="comment"> * Signature: (I)I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jint JNICALL Java_Main_intMethod</span><br><span class="line">  (JNIEnv *, jobject, jint);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac Main.java -h .</span><br><span class="line"><span class="comment">// 可拆分为两个命令</span></span><br><span class="line">javac Main.java</span><br><span class="line">javah -jni Main</span><br></pre></td></tr></table></figure><h3 id="4-2、原理"><a href="#4-2、原理" class="headerlink" title="4.2、原理"></a>4.2、原理</h3><p>运行 Main.class 时，将 libMain.dylib 载入虚拟机，JVM 调用 libMain.dylib 的 Java_Main_intMethod，传入参数，libMain.dylib 由系统直接运行，返回结果。</p><ul><li>*env 用于将 java 类型数据与本地（此处为 C 语言）类型数据之间的转换</li><li>jint 还是 Java 数据类型，Java 基本数据类型可以映射（使用），不用通过 *env 转换</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*C code*/</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_ClassName_MethodName</span><br><span class="line">  (JNIEnv *env, jobject obj, jstring javaString)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*Get the native string from javaString*/</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *nativeString = (*env)-&gt;GetStringUTFChars(env, javaString, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Do something with the nativeString*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*DON'T FORGET THIS LINE!!!*/</span></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, javaString, nativeString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--Unsafe 类--><!-- - 存放 native 方法的类？--><h3 id="4-3、参考"><a href="#4-3、参考" class="headerlink" title="4.3、参考"></a>4.3、参考</h3><ul><li><a href="https://medium.com/@bschlining/a-simple-java-native-interface-jni-example-in-java-and-scala-68fdafe76f5f" target="_blank" rel="noopener">A Simple Java Native Interface (JNI) example in Java and Scala</a></li><li><a href="https://www.codejava.net/java-core/the-java-language/native-keyword#" target="_blank" rel="noopener">Java native keyword example</a></li><li><a href="https://www.protechtraining.com/blog/post/java-native-interface-jni-example-65" target="_blank" rel="noopener">Java Native Interface: JNI Example</a></li><li><a href="https://depp.wang/Java-Books/docs/Java编程思想.pdf">Java 编程思想 - 附录<strong>A</strong> 使用非<strong>JAVA</strong>代码</a></li><li><a href="https://zh.wikipedia.org/wiki/Java本地接口" target="_blank" rel="noopener">Java本地接口 - WiKi</a></li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>反射反射，哪里体现反射字面意思？</p><p>可以这么理解，通过 native 方法得到反射对象，操作反射对象，像镜子一样，将反射到原对象上。</p><p>我们发现，反射和 native 方法的关系：</p><ul><li>获取字段、方法、构造方法对象，native() 方法实现</li><li>获取字段值、设置修改字段值，native() 方法实现</li><li>运行方法，native() 方法实现</li><li>运行构造方法，native() 方法实现</li></ul><p>我们可以得出结论，<strong>反射由 native 方法实现</strong>。</p><p>我们说通过反射实现一个功能，我们也可以说：</p><ul><li>通过反射方法实现</li><li>通过反射 API 实现</li><li>通过 native 方法实现</li></ul><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-05-05-123303.png" alt=""></p><p>反射是一种非常规（native 方法实现）方式获取 class 文件信息、运行 class 文件字节码指令和操作对象数据的能力。</p><!--我们可以认为反射就是 native() 方法，可以把它看做一组 API，通过反射 API，可以运行时获取对象的信息，如字段、方法和构造函数，也可以修改字段值和运行方法和构造方法。--><p>一句话总结 ：反射是一种运行时<strong>获取和修改</strong>对象数据的能力。</p><p>关于运行时：Java 是静态语言，先编译，后运行。编译时不执行代码，代码都是运行时执行。</p><h2 id="六、延伸阅读"><a href="#六、延伸阅读" class="headerlink" title="六、延伸阅读"></a>六、延伸阅读</h2><ul><li><a href="https://www.cnblogs.com/techspace/p/6931397.html" target="_blank" rel="noopener">JAVA 反射原理</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945147512512" target="_blank" rel="noopener">廖雪峰 Java 教程 - 反射</a></li><li><a href="https://www.geeksforgeeks.org/reflection-in-java/" target="_blank" rel="noopener">Reflection in Java</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html" target="_blank" rel="noopener">oracle reflect docs</a></li><li><a href="https://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful" target="_blank" rel="noopener">What is reflection and why is it useful?</a></li><li><a href="https://dzone.com/articles/understanding-sunmiscunsafe" target="_blank" rel="noopener">Understanding sun.misc.Unsafe</a></li><li><a href="https://www.baeldung.com/java-unsafe" target="_blank" rel="noopener">Guide to sun.misc.Unsafe</a></li></ul><!--运行期类型鉴定 (RTTI)--><!--全限定名：指编译后的 class 文件在 jar 包中的路径，package 路径的 . 转换为 /-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-29-154427.jpg&quot; alt=&quot;image source: https://coderius.biz.ua/blog/article/vvedenie-v-php-reflection-api&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://depp.wang/2020/04/19/realize-a-simple-spring-ioc-container/&quot;&gt;造轮子：实现一个简易的 Spring IoC 容器&lt;/a&gt;一文中提到 Spring 在创建 Bean 实例和依赖注入时使用了反射，本文来具体分析一下 Spring 中的反射以及反射的原理。&lt;/p&gt;
&lt;!--[造轮子：实现一个简易的 Spring IoC 容器](https://mp.weixin.qq.com/s/0kfeHOK6FjbGQ0PwzWe58A)--&gt;
    
    </summary>
    
      <category term="Java" scheme="https://depp.wang/categories/Java/"/>
    
    
      <category term="反射" scheme="https://depp.wang/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="Spring" scheme="https://depp.wang/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>造轮子：实现一个简易的 Spring IoC 容器</title>
    <link href="https://depp.wang/2020/04/19/realize-a-simple-spring-ioc-container/"/>
    <id>https://depp.wang/2020/04/19/realize-a-simple-spring-ioc-container/</id>
    <published>2020-04-19T08:09:37.000Z</published>
    <updated>2020-07-09T02:33:05.095Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/04/19/realize-a-simple-spring-ioc-container">原文地址</a></p></blockquote><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-19-110638.jpg" alt="source:https://fernandofranzini.wordpress.com/"></p><p>我通过实现一个简易的 Spring IoC 容器，算是真正入门了 Spring 框架。本文是对实现过程的一个总结提炼，<strong>需要配合源码阅读</strong>，<a href="https://github.com/DeppWang/litespring" target="_blank" rel="noopener">源码地址</a>。</p><p>结合本文和源码，你应该可以学到：Spring 的原理和 Spring Boot 的原理。</p><p>Spring 框架是 Java 开发的，Java 是面向对象的语言，所以 Spring 框架本身有大量的抽象、继承、多态。对于初学者来说，光是理清他们的逻辑就很麻烦，我摒弃了那些包装，只实现了最本质的功能。代码不是很严谨，但只为了理解 Spring 思想却够了。</p><p>下面正文开始。</p><a id="more"></a><h2 id="零、Spring-的作用"><a href="#零、Spring-的作用" class="headerlink" title="零、Spring 的作用"></a>零、Spring 的作用</h2><p>在没有 Spring 框架的远古时代，我们业务逻辑一般长这样：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetStoreService</span> </span>&#123;</span><br><span class="line">    AccountDao accountDao = <span class="keyword">new</span> AccountDao();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PetStoreService petStoreService = <span class="keyword">new</span> PetStoreService();</span><br></pre></td></tr></table></figure><p>到处都是  <strong>new</strong> 关键字，需要开发人员显式的使用 new 关键字来创建对象（实例）。这样有很多弊端，如，创建的对象太多（多次创建多个对象），耦合性太强（默认 new），等等。</p><p>有个叫 <a href="https://en.wikipedia.org/wiki/Rod_Johnson_(programmer)" target="_blank" rel="noopener">Rod Johnson</a> 老哥对此很不爽，就开发了一个叫 <a href="https://spring.io/" target="_blank" rel="noopener">Spring</a> 的框架，就是为了干掉 new 关键字（哈哈，我杜撰的，只是为了说明 Spring 的作用）。</p><p>有了 Spring 框架，<strong>由框架来新建对象，管理对象，并处理对象之间的依赖</strong>，我们程序员就可以专注于业务逻辑（专心搬砖），不用关心对象的创建了。我们来看看 Spring 框架是如何实现的吧。</p><p>注：以下 Spring 框架简写为 Spring</p><p>本节源码对应：<strong>v0</strong></p><h2 id="一、实现「实例化-Bean-」"><a href="#一、实现「实例化-Bean-」" class="headerlink" title="一、实现「实例化 Bean 」"></a>一、实现「实例化 Bean 」</h2><p>首先，我们需要标记哪些类交给 Spring 管理，可以借助 xml 标记，将其标记为 <code>&lt;bean&gt;</code>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--petstore-v1.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"petStore"</span> <span class="attr">class</span>=<span class="string">"org.deppwang.litespring.v1.service.PetStoreService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"org.deppwang.litespring.v1.dao.AccountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring 的第一步操作就是根据 xml 的标记来实例化类，在 Spring 中，我们管类叫 Bean，所以实例化类也可以称为实例化 Bean。</p><p>Spring 如何根据 xml 配置来实现实例化类？</p><p>大致可以分为三步（配合源码 <strong>v1</strong> 阅读）：</p><ol><li><p>从 xml 配置文件获取 Bean 信息：id、beanClassName（路径），将其作为 BeanDefinition（Bean 定义类）的属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanDefinition bd = <span class="keyword">new</span> BeanDefinition(id, beanClassName);</span><br></pre></td></tr></table></figure></li><li><p>使用一个 Map 存放所有 BeanDefinition，此时 Spring 本质上是一个 Map，存放 BeanDefinition</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">64</span>);</span><br></pre></td></tr></table></figure></li><li><p>当获取 Bean 实例时，通过类加载器，根据路径，得到其类对象，通过类对象利用<strong>反射</strong>创建 Bean 实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> Thread.currentThread().getContextClassLoader().loadClass(bd.getBeanClassName()).newInstance();</span><br></pre></td></tr></table></figure></li></ol><p>关于类加载和反射，前者可以看看<a href="https://book.douban.com/subject/34907497/" target="_blank" rel="noopener">《深入理解 Java 虚拟机》</a>第 7 章，后者可以看看 <a href="https://depp.wang/2020/04/29/reflection-in-spring-and-reflection-principle/">Spring 中的反射与反射的原理</a>。本文只学习 Spring，这两个知识点不做深入讨论。</p><p>本节源码对应：<strong>v1</strong></p><h2 id="二、实现「填充属性（依赖注入）」"><a href="#二、实现「填充属性（依赖注入）」" class="headerlink" title="二、实现「填充属性（依赖注入）」"></a>二、实现「填充属性（依赖注入）」</h2><!--使用 Spring 时，我们希望只需要声明一下就能使用--><!--直接 new 改为依赖注入--><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetStoreService</span> </span>&#123;</span><br><span class="line">    AccountDao accountDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不默认 new 时，实现实例化 Bean 后，此时成员变量（属性）还为 null：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-17-143303.png" alt=""></p><!--当一个 Bean 的成员变量类型是另一个 Bean 时，我们可以说一个 Bean 依赖于另一个 Bean。当不默认 new 时，就需要使用依赖注入（**D**ependency **I**njection，简称 DI）的方式设置依赖。依赖注入让属性不为 null，所以也可以称为填充属性。--><!--Spring 通过依赖注入的方式实现填充属性。--><p>此时需要通过一种方式实现让属性不为 null，我们管这一步叫填充属性。</p><p>当一个 Bean 的成员变量类型是另一个 Bean 时，我们可以说一个 Bean 依赖于另一个 Bean。所以填充属性，也可以称为依赖注入（<strong>D</strong>ependency <strong>I</strong>njection，简称 DI）。</p><p>抛开 Spring 不谈，在正常情况下，我们有两种方式实现依赖注入，1、使用构造方法；2、使用 Setter() 方法。一般使用构造方法（因为依赖可能有多个）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetStoreService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PetStoreService</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PetStoreService petStore = <span class="keyword">new</span> PetStoreService(<span class="keyword">new</span> AccountDao()); <span class="comment">// 将依赖 new AccountDao() 注入 petStore</span></span><br></pre></td></tr></table></figure><p>Spring 也是通过这两种方式来实现依赖注入。</p><p>我们需要告诉 Spring，需要为类使用什么方式注入依赖，注入什么依赖。比如，我们想 Spring 使用构造函数的方式，注入 AccountDao 依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"petStore"</span> <span class="attr">class</span>=<span class="string">"org.deppwang.litespring.v2.service.PetStoreService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring 如何根据 <code>&lt;constructor-arg&gt;</code> 来实现依赖注入？</p><p>大致也分为 3 步（配合源码 <strong>v2</strong> 阅读）：</p><ol><li><p>从 xml 中获取构造函数的参数实例的 id，存放到 BeanDefinition 的 constructorArguments 中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bd.getConstructorArgumentValues().add(argumentName);</span><br></pre></td></tr></table></figure></li><li><p>通过反射得到 PetStoreService 所有的构造函数（Constructor 对象），找到参数跟 constructorArguments 一致的 Constructor 对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] candidates = beanClass.getDeclaredConstructors();</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>通过 constructorArguments 获取到所有参数实例，再利用反射，通过 Constructor 对象实现填充属性。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> constructorToUse.newInstance(argsToUse);</span><br></pre></td></tr></table></figure></li></ol><p>基于 Setter() 方法实现依赖注入的方式跟构造方法差不多，源码中有实现，请看源码。</p><p>实际上，Spring 默认先尝试使用构造函数注入依赖，当没有配置 <code>&lt;constructor-arg&gt;</code> 时，使用 <code>&lt;property&gt;</code>。</p><p>因为 Spring 实现了依赖注入，所以我们程序员没有了创建对象的控制权，所以也被称为控制反转（<strong>I</strong>nversion <strong>o</strong>f <strong>C</strong>ontrol，简称  IoC）。因为 Spring 使用 Map 管理 BeanDefinition，我们也可以将 Spring 称为 IoC 容器。</p><p>本节源码对应：<strong>v2</strong></p><h2 id="三、使用「单例模式、工厂方法模式」"><a href="#三、使用「单例模式、工厂方法模式」" class="headerlink" title="三、使用「单例模式、工厂方法模式」"></a>三、使用「单例模式、工厂方法模式」</h2><p>前面两步实现了获取 Bean 实例时创建 Bean 实例，但 Bean 实例经常使用，不能每次都新创建。其实在 Spring 中，一个 Bean 只对应一个 Bean 实例，这需要使用单例模式。</p><blockquote><p>单例模式：一个类有且只有一个实例</p></blockquote><p>Spring 使用类对象创建 Bean 实例，是如何实现单例模式的？</p><p>Spring 其实使用一个 Map 存放所有 Bean 实例。创建时，先看 Map 中是否有 Bean 实例，没有就创建；获取时，直接从 Map 中获取。这种方式能保证一个类只有一个 Bean 实例。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">64</span>);</span><br></pre></td></tr></table></figure><p>因为存放 Bean 实例也是 Map，这是除 beanDefinitionMap 外，Spring 称为 IoC 容器的另一个原因。</p><p>我们将创建对象的控制权交给 Spring（BeanIocContainer.java），我们可以认为 BeanIocContainer.java 是一个创建对象的工厂（专门生产对象），也可以称为简单工厂。它实现了创建对象和使用对象分离。</p><p>Spring 为了使用不同的方式均可实现实例化 Bean，不能只是简单工厂，需要使用工厂方法模式。</p><blockquote><p>工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。来源：《Head First 设计模式》</p></blockquote><p>简单的理解就是：将创建对象的方法抽象，作为一个工厂方法。</p><p>这里的「让子类决定实例化哪一个类」，也可以看成让子类决定如何实现实例化类。</p><p>我们可以把工厂方法模式理解为简单工厂的升级版，可通过子类实现多种方式创建对象，是一种简单工厂的「多态」。</p><p>早期 Spring 使用 Bean 的策略是用到时再实例化所用 Bean，杰出代表是 XmlBeanFactory。后期为了实现更多的功能，新增了 ApplicationContext，初始化时就实例化所有 Bean，两者都继承于 BeanFactory 接口。</p><!--两者的区别：ApplicationContext 初始化时就实例化所有 Bean，BeanFactory 用到时再实例化所用 Bean。--><!--这里创建对象的工厂方法是**构造方法**。--><p>实现：将 BeanIocContainer 修改为 BeanFactory 接口，只提供 getBean() 方法。实现不同的子类对应不同什么的方式实例化 Bean。</p><p>Spring 使用 *<em>getBean() *</em>作为工厂方法。getBean() 包含创建对象的方法。</p><p>本节源码对应：<strong>v3</strong></p><h2 id="四、实现「注解」"><a href="#四、实现「注解」" class="headerlink" title="四、实现「注解」"></a>四、实现「注解」</h2><p>在业务开发中，如果每个业务类均设置构造函数，并且需要在 xml 中配置，那么就太繁琐，还容易出错。Spring 从 2.5<sup><a href="https://www.tutorialspoint.com/spring/spring_annotation_based_configuration.htm" target="_blank" rel="noopener">ref</a></sup> 开始，新增了注解，可以使用注解来替代业务类的 xml 配置和构造函数。</p><ul><li>使用 @Component 注解代替 <code>&lt;bean&gt;</code></li><li>使用 @Autowired 注解代替 <code>&lt;constructor-arg&gt;</code> + 构造函数。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetStoreService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 如何根据注解来实现实例化 Bean 和依赖注入？或者说，这两个注解起了什么作用？</p><p>1、@Component 用于生成 BeanDefinition，实现原理（配合源码 <strong>v4</strong> 阅读）：</p><ul><li><p>根据 <code>&lt;context:component-scan&gt;</code> 指定路径，找到路径下所有包含 @Component 注解的 Class 文件，作为 BeanDefinition</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String basePackagesStr = ele.attributeValue(<span class="string">"base-package"</span>);</span><br></pre></td></tr></table></figure></li><li><p>如何判断 Class 是否有 @Component：利用字节码技术，获取 Class 文件中的元数据（注解），判断元数据中是否有 @Componet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">annotationMetadata.hasAnnotation(Component.class.getName())</span><br></pre></td></tr></table></figure></li></ul><p>2、@Autowired 用于依赖注入，实现原理（配合源码 <strong>v4</strong> 阅读）：</p><ul><li><p>通过反射，得到所有的属性（Field 对象），查看 Field 对象中是否有 @Autowired 类型的注解，有，则使用反射实现依赖注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fields = bean.getClass().getDeclaredFields();</span><br><span class="line">field.set(bean, getBean(field.getName()));</span><br></pre></td></tr></table></figure></li><li><p>注意：使用 @Autowired 时，既没有使用构造方法，也没有使用 Setter() 方法</p></li></ul><p>@Component + @Autowired 实现 Spring 对业务类的管理。被 @Component + @Autowired  修饰的业务类算是一种特殊的 Bean。</p><p>至此，我们还是在需要通过配置文件来实现组件扫描。有没有完全不使用配置文件的方式？有！</p><p>我们可以使用 @Configuration 替代配置文件，并使用 @ComponentScan 来替代配置文件的  <code>&lt;context:component-scan&gt;</code> 。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 将类标记为 @Configuration，代表这个类是相当于一个配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan</span> <span class="comment">// ComponentScan 扫描 PetStoreConfig.class 所在路径及其所在路径所有子路径的文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetStoreConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(PetStoreConfig.class);</span><br><span class="line">        PetStoreService userService = context.getBean(PetStoreService.class);</span><br><span class="line">        userService.getAccountDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注解其实跟使用 xml 配置文件一样，目的是将配置类作为入口，实现扫描组件，将其加载进 IoC 容器中的功能。</p><p>AnnotationConfigApplicationContext 是专为针对配置类的启动类。其实现机制，可以 Google 查阅。</p><p>前面说：在 Spring 中，我们管类叫 Bean。其实不完全正确，类要称为 Bean，需要满足一个条件：</p><ul><li>当有成员变量时，要么有 @Autowired 注解，要么有对应的构造函数或者 Setter() 方法</li></ul><p>即可以被 Spring 管理的类，称为 Bean。</p><p>名词解释：</p><ul><li>Component：组件</li><li>Autowired：自动装配</li></ul><p>本节源码对应：<strong>v4</strong></p><h2 id="五、注解-Bean"><a href="#五、注解-Bean" class="headerlink" title="五、注解 @Bean"></a>五、注解 @Bean</h2><p>只要类是一个 Bean，就可以由 Spring 管理。</p><p>业务类为了减少配置，可使用 @Component + @Autowired 实现依赖注入。</p><p>将其他 Bean 注入容器时，虽然可以通过 xml 实现，但仍然比较麻烦，Spring 提供了一个注解 @Bean，当一个方法标记为 @Bean 时，它的返回值将被注入容器。</p><p>举个栗子：我们可以将一个线程池 Executor 实例注入容器，再 @Autowired 使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExecutorService <span class="title">sendMessageExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">1024</span>), <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ExecutorService service;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这如果用 xml 来实现，就比较麻烦了，还不直观。</p><!--如果 Bean 没有构造函数或者 Setter 方法，需要引用 @Autowired--><p>注意：@Bean 需要和 @Configuration 一起使用</p><p>本节源码对应：<strong>v5</strong></p><!--如果一个标记为 @Bean 的函数需要使用另一个类，那么另一个类也要注入容器？除非它本身也作为 Bean--><h2 id="六、Spring-Boot-原理"><a href="#六、Spring-Boot-原理" class="headerlink" title="六、Spring Boot 原理"></a>六、Spring Boot 原理</h2><p>前面说到了 @Configuration 和 @ComponentScan，这就不得不提 Spring Boot。因为 Spring Boot 就使用了  @Configuration 和 @ComponentScan，你可以点开 @SpringBootApplication 看到。</p><p>我们发现，Spring Boot 启动时，并没有使用 AnnotationConfigApplicationContext 来指定启动某某 Config 类。这是因为它使用了 @EnableAutoConfiguration 注解。</p><p>Spring Boot 利用了 @EnableAutoConfiguration 来自动加载标识为 @Configuration 的配置类到容器中。Spring Boot 还可以将需要自动加载的配置类放在 spring.factories 中，Spring Boot 将自动加载 spring.factories 中的配置类。spring.factories 需放置于META-INF 下。</p><p>如 Spring Boot 项目启动时，autocofigure 包中将自动加载到容器的（部分）配置类如下：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-05-092624.png?ynotemdtimestamp=1587214457308" alt=""></p><p>以上也是 Spring Boot 的原理。</p><p>在 Spring Boot 中，我们引入的 jar 包都有一个字段，<strong>starter</strong>，我们叫 starter 包。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-18-151532.png" alt=""></p><p>标识为 starter（启动器）是因为引入这些包时，我们不用设置额外操作，它能被自动装配，starter 包一般都包含自己的 spring.factories。如 spring-cloud-starter-eureka-server：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-18-134518.png" alt=""></p><p>如 druid-spring-boot-starter：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-19-085235.png" alt=""></p><p>有时候我们还需要自定义 starter 包，比如在 Spring Cloud 中，当某个应用要调用另一个应用的代码时，要么调用方使用 Feign（HTTP），要么将被调用方自定义为 starter 包，让调用方依赖引用，再 @Autowired 使用。此时需要在被调用方设置配置类和 spring.factories：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderAppConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// spring.factories</span></span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.amy.cloud.amycloudact.ProviderAppConfiguration</span><br></pre></td></tr></table></figure><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-18-111026.png" alt=""></p><p>当然，你也可以把这两个文件放在调用方（此时要指定扫描路径），但一般放在被调用方。ps：如果你两个应用的 base-package 路径一样，那么可以不用这一步。</p><p>说了 Spring Boot，那么在 Spring MVC，如何将引入 jar 包的组件注入容器？</p><ul><li>跟扫描本项目包一样，在 xml ，增加引入 jar 包的扫描路径：</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"引入 jar 包的 base-package"</span> /&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>嗯，本节没有源码</p><h2 id="七、结语"><a href="#七、结语" class="headerlink" title="七、结语"></a>七、结语</h2><p>Spring 的原理离不开两个关键词：反射和注解。</p><ul><li>反射：在创建 Bean 实例和依赖注入是都需要使用反射。</li><li>注解：使用注解可大大提升代码可阅读性，降低复杂度。注解本质上是作为一个标识，获取注解时需要使用字节码技术。</li></ul><p>现在我们一般很少使用 xml 来设置 bean，但了解了 xml 可以更好的理解 Spring 注解的原理。</p><p>来个注解小结：</p><ul><li>@Component 作为组件标识，代表需要 Spring 管理</li><li>@Autowired 用于判断是否需要依赖注入，代替构造函数</li><li>@ComponentScan 指定组件扫描路径，不指定即为当前路径</li><li>@Configuration 代表配置类，作为 Spring 寻找需要被管理 Bean 的入口</li><li>@Bean 实现将任意 Bean 注入容器</li><li>@EnableAutoConfiguration 实现自动加载配置类到容器</li></ul><p>以上实现了一个简易的 Spring IoC 容器，顺便说了一下 Spring Boot 原理。Spring 还有很多重要功能，如：处理对象之间的依赖、管理 Bean 生命周期、AOP 的实现，等等。</p><p>全文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/04/19/realize-a-simple-spring-ioc-container&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-19-110638.jpg&quot; alt=&quot;source:https://fernandofranzini.wordpress.com/&quot;&gt;&lt;/p&gt;
&lt;p&gt;我通过实现一个简易的 Spring IoC 容器，算是真正入门了 Spring 框架。本文是对实现过程的一个总结提炼，&lt;strong&gt;需要配合源码阅读&lt;/strong&gt;，&lt;a href=&quot;https://github.com/DeppWang/litespring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源码地址&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;结合本文和源码，你应该可以学到：Spring 的原理和 Spring Boot 的原理。&lt;/p&gt;
&lt;p&gt;Spring 框架是 Java 开发的，Java 是面向对象的语言，所以 Spring 框架本身有大量的抽象、继承、多态。对于初学者来说，光是理清他们的逻辑就很麻烦，我摒弃了那些包装，只实现了最本质的功能。代码不是很严谨，但只为了理解 Spring 思想却够了。&lt;/p&gt;
&lt;p&gt;下面正文开始。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://depp.wang/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://depp.wang/tags/Spring/"/>
    
      <category term="IoC" scheme="https://depp.wang/tags/IoC/"/>
    
  </entry>
  
  <entry>
    <title>你真的会写单例模式吗</title>
    <link href="https://depp.wang/2020/04/10/singleton-pattern/"/>
    <id>https://depp.wang/2020/04/10/singleton-pattern/</id>
    <published>2020-04-10T08:09:37.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a>、<a href="https://depp.wang/2020/04/10/singleton-pattern/">原文地址</a></p></blockquote><p>又一篇一抓一大把的博文，可是你真的的搞懂了吗？点开看看，事后，你也来一篇。。。</p><blockquote><p>人生在世，谁不面试。单例模式：一个搞懂不加分，不搞懂减分的知识点</p></blockquote><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-10-143047.jpg" alt="img"></p><p>单例模式是面试中非常喜欢问的了，我们往往自认为已经完全理解了，没什么问题了。但要把它手写出来的时候，可能出现各种小错误，下面是我总结的快速准确的写出单例模式的方法。</p><p>单例模式有各种写法，什么「双重检锁法」、什么「饿汉式」、什么「饱汉式」，总是记不住、分不清。这就对了，人的记忆力是有限的，我们应该记的是最基本的单例模式怎么写。</p><p>单例模式：一个类有且只能有一个对象（实例）。单例模式的 3 个要点：</p><ol><li>外部不能通过 new 关键字（构造函数）的方式新建实例，所以构造函数为私有：<code>private Singleton(){}</code></li><li>只能通过类方法获取实例，所以获取实例的方法为公有、且为静态：<code>public static Singleton getInstance()</code></li><li>实例只能有一个，那只能作为类变量的「数据」，类变量为静态 （另一种记忆：静态方法只能使用静态变量）：<code>private static Singleton instance</code></li></ol><a id="more"></a><h2 id="一、最基础、最简单的写法"><a href="#一、最基础、最简单的写法" class="headerlink" title="一、最基础、最简单的写法"></a>一、最基础、最简单的写法</h2><p>类加载的时候就新建实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleon using static initialization in Java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here is how to access this Singleton class</span></span><br><span class="line">Singleton.getInstance().show();</span><br></pre></td></tr></table></figure><p>当执行 Singleton.getInstance() 时，类加载器加载 Singleton.class 进虚拟机，虚拟机在方法区（元数据区）为类变量分配一块内存，并赋值为空。再执行类构造器 <code>&lt;client&gt;()</code> 方法，新建实例指向类变量 instance。这个过程在类加载阶段执行，并由虚拟机保证线程安全。所以执行 getInstance() 前，实例就已经存在，所以 getInstance() 是线程安全的。</p><p>很多博文说 instance 还需要声明为 final，其实不用。final 的作用在于不可变，使引用 instance 不能指向另一个实例，保证变量可见性（线程安全）。这里 instance 不会指向其他实例，用不上。当然，加上也没问题。</p><p>看到这里，单例模式的写法你已经学到了。后面的是加餐，可以选择不看了。</p><!--// final 修饰的基本数据类型，在编译期时，初始化数据放在常量池--><p>这个写法有一个不足之处，就是如果需要通过参数设置实例，则无法做到。举个栗子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能设置 name！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleon using static initialization in Java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here is how to access this Singleton class</span></span><br><span class="line">Singleton.getInstance(<span class="string">"test"</span>).show();</span><br></pre></td></tr></table></figure><h2 id="二、可通过参数设置实例的写法"><a href="#二、可通过参数设置实例的写法" class="headerlink" title="二、可通过参数设置实例的写法"></a>二、可通过参数设置实例的写法</h2><p>考虑到这种情况，就在调用 getInstance() 方法时，再新建实例。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">",hashcode: "</span> + instance.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.getInstance(<span class="string">"test"</span>).show();</span><br></pre></td></tr></table></figure><p>这里加了 <code>synchronized</code> 关键字，能保证线程安全（只会生成一个实例），但效率不高。因为实例创建成功后，再获取实例时就不用加锁了。</p><p>当不加 synchronized 时，会发生什么：</p><p>instance 是类的变量，类存放在方法区（元数据区），元数据区线程共享，所以类变量 instance 线程共享，类变量也是在主内存中。线程执行 getInstance() 时，在自己工作内存新建一个栈帧，将主内存的 instance 拷贝到工作内存。多个线程并发访问时，都认为 <code>instance == null</code>，就将新建多个实例，那单例模式就不是单例模式了。</p><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                Singleton.getInstance(<span class="string">"test"</span>).show();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、改良版加锁的写法"><a href="#三、改良版加锁的写法" class="headerlink" title="三、改良版加锁的写法"></a>三、改良版加锁的写法</h2><p>实现只在创建的时候加锁，获取时不加锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么要判断两次：</strong></p><p>多个线程将 instance 拷贝进工作内存，即多个线程读取到 instance == null。虽然每次只有一个线程进入 synchronized 方法，当进入线程成功新建了实例，synchronized 保证了可见性（在 unlock 操作前将变量写回了主内存），此时 instance 不等于 null 了。但其他线程已经执行到 synchronized 这里了，某个线程就又会进入 synchronized 方法，如果不判断一次，就会再次新建一个实例。</p><p><strong>为什么要用 volatile 修饰 instance：</strong></p><p>synchronized 已经可以实现原子性、可见性、有序性，其中实现原子性：一次只有一个线程执行同步块的代码。但计算机为了提升运行效率，会指令重排序。</p><p>代码 <code>instance = new Singleton();</code> 会被计算机拆为 3 步执行。</p><ul><li>A：在堆中分配一块内存空间</li><li>B：在内存空间位置新建一个实例</li><li>C：将引用指向实例，即，引用存放实例的内存空间地址</li></ul><p>线程可能按 ACB 执行，如果 instance 都在 synchronized 里面，怎么重排序都没啥问题。问题出现在还有 instance 在 synchronized 外边，因为此时外边一群饿狼（线程），就在等待一个 instance 这块肉不为 null。</p><p>模拟一下指令重排序的出错场景：多线程环境下，正好一个线程，在同步块中按 ACB 执行，执行到 AC 时（并将 instance 写回了主内存），另一个线程执行第一个判断时，从主内存拷贝了最新的 instance，认为 instance 不为空，返回 instance，但此时 instance 还没被正确初始化，所以出错。</p><p>volatile 修饰 instance 时，虚拟机在 ACB 后添加一个 <code>lock</code> 指令，lock 指令之前的操作执行完成后，后面的操作才能执行。只有当 ACB 都执行完了之后，其他线程才能读取 instance 的值，即：只有当写操作完成之后，读操作才能开始。这也是 Java 虚拟机规范的其中一条先行发生原则：对 volatile 修饰的变量，读操作，必须等写操作完成。</p><p>所以用 volatile 修饰 instance，是使用它的禁止指令重排序特性：禁止读指令重排序到写指令之前。（它禁止不了 lock 指令前的指令重排序。）</p><p>你可能认为上面的解释太复杂，不好理解。对，确实比较复杂，看不懂，下次问到再看吧。</p><h2 id="四、其他非主流写法"><a href="#四、其他非主流写法" class="headerlink" title="四、其他非主流写法"></a>四、其他非主流写法</h2><p>枚举写法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当面试官让我写一个单例模式，我总是觉得写这个好像有点另类。</p><p>静态内部类写法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个写法还是比较有逼格的，但稍不注意就容易出错。</p><h2 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h2><p>单例模式主要为了节省内存开销，Spring 容器的 Bean 就是通过单例模式创建出来的。</p><p>单例模式没写出来，那也没啥事，因为那下一个问题你也不一定能答出来 :-)。</p><!--单例模式不会写，也不影响你称为大佬，哈哈。--><h2 id="六、延伸阅读"><a href="#六、延伸阅读" class="headerlink" title="六、延伸阅读"></a>六、延伸阅读</h2><ul><li><a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/" target="_blank" rel="noopener">如何正确写出单例模式</a></li><li><a href="http://javarevisited.blogspot.com/2012/12/how-to-create-thread-safe-singleton-in-java-example.html" target="_blank" rel="noopener">How to create thread safe Singleton in Java</a></li><li><a href="https://javarevisited.blogspot.com/2012/07/why-enum-singleton-are-better-in-java.html" target="_blank" rel="noopener">Why Enum Singleton are better in Java</a></li><li><a href="https://stackoverflow.com/questions/228164/on-design-patterns-when-should-i-use-the-singleton" target="_blank" rel="noopener">On design patterns: When should I use the singleton? </a></li></ul><!--![个人公众号](https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-10-150424.png)-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;、&lt;a href=&quot;https://depp.wang/2020/04/10/singleton-pattern/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;又一篇一抓一大把的博文，可是你真的的搞懂了吗？点开看看，事后，你也来一篇。。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生在世，谁不面试。单例模式：一个搞懂不加分，不搞懂减分的知识点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-10-143047.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;单例模式是面试中非常喜欢问的了，我们往往自认为已经完全理解了，没什么问题了。但要把它手写出来的时候，可能出现各种小错误，下面是我总结的快速准确的写出单例模式的方法。&lt;/p&gt;
&lt;p&gt;单例模式有各种写法，什么「双重检锁法」、什么「饿汉式」、什么「饱汉式」，总是记不住、分不清。这就对了，人的记忆力是有限的，我们应该记的是最基本的单例模式怎么写。&lt;/p&gt;
&lt;p&gt;单例模式：一个类有且只能有一个对象（实例）。单例模式的 3 个要点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;外部不能通过 new 关键字（构造函数）的方式新建实例，所以构造函数为私有：&lt;code&gt;private Singleton(){}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只能通过类方法获取实例，所以获取实例的方法为公有、且为静态：&lt;code&gt;public static Singleton getInstance()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实例只能有一个，那只能作为类变量的「数据」，类变量为静态 （另一种记忆：静态方法只能使用静态变量）：&lt;code&gt;private static Singleton instance&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java" scheme="https://depp.wang/categories/Java/"/>
    
    
      <category term="Singleton Pattern" scheme="https://depp.wang/tags/Singleton-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>随意修改你文章的 url 吧，一个 js 解决原 url 不能访问的问题</title>
    <link href="https://depp.wang/2020/03/27/redirect-404-url-by-js/"/>
    <id>https://depp.wang/2020/03/27/redirect-404-url-by-js/</id>
    <published>2020-03-27T20:48:37.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a></p></blockquote><p>阅读提示：此文适用于有自己博客的同学。</p><p>昨天在公众号分享了一篇在 <a href="https://depp.wang/2020/03/26/how-to-insert-slide-in-markdown/">如何在 Markdown 里面插入幻灯片</a>的文章，微信公众号由于平台限制，幻灯片只能在原文里面才能看到效果，不巧，原文链接手误写错了一个单词，本来是 insert，写成了 inset。</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">https</span>://depp.wang/<span class="number">2020</span>/<span class="number">03</span>/<span class="number">26</span>/how-<span class="built_in">to</span>-inset-slide-<span class="keyword">in</span>-markdown/</span><br><span class="line">应该是</span><br><span class="line"><span class="keyword">https</span>://depp.wang/<span class="number">2020</span>/<span class="number">03</span>/<span class="number">26</span>/how-<span class="built_in">to</span>-insert-slide-<span class="keyword">in</span>-markdown/</span><br></pre></td></tr></table></figure><p>作为一个强迫症患者，不能忍受这样的问题。可一旦我修改了原文链接，公众号这边要么删了重发，要么来个留言，说原文链接已经修改。两种方式可以解决问题，但是不爽。</p><p>除了像我手误写错链接单词的情况，<strong>很多时候，我们文章修改题目后，如果想修改 url（url 是文章题目的英文），就会面临原 url 失效的问题。</strong></p><p>如果你也有上面这种困扰，那么可以看看我的解决思路。</p><a id="more"></a><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>我的思路是这样：自定义一个 404 页面，链接失效就显示 404 页面，404 页面引入一个重定向指定 url 的 js。</p><p>重定向指定 url 的 js 的代码很简单：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redirectUrl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> redirectObj = &#123;</span><br><span class="line">        <span class="string">"https://depp.wang/2020/03/26/how-to-inset-slide-in-markdown/"</span>: <span class="string">"https://depp.wang/2020/03/26/how-to-insert-slide-in-markdown/"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newUrl = redirectObj[<span class="built_in">window</span>.location.href];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> newUrl !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location = newUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">redirectUrl();</span><br></pre></td></tr></table></figure><ul><li>此 js 使用条件：显示 404 页面时，原 url 不变，不能是重定向到 404 页面</li></ul><p>404 页面引入 js，404 页面可以用<a href="https://www.qq.com/404/" target="_blank" rel="noopener">腾讯公益 404 页面</a>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--404.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://depp.wang/redirectUrl.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 此处修改为你自己的 js 地址</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">homePageName</span>=<span class="string">"回到主页"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>代码来源：<a href="http://theme-next.iissnan.com/theme-settings.html#volunteer-404" target="_blank" rel="noopener">http://theme-next.iissnan.com/theme-settings.html#volunteer-404</a></li><li>如果你使用 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo </a>+ <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">Next</a>，注意 404.html 放在主题的 source 目录下。</li></ul><p>引入 js 代码时要注意路径，最好直接使用绝对路径。使用相对路径要考虑原文章所在路径与 js 文件路径之间的关联。</p><p>多说一嘴，相对路径有时候有点不好理解，需要理解相对路径常用两个符号 <code>.</code> 和 <code>..</code> 的含义：</p><ul><li><code>.</code>：一个点代表当前文件所在的文件夹（路径）。在 Linux 中，复制文件到当前路径的命令：<code>cp **/test.md .</code>。示例：<code>src=&quot;./redirectUrl.js&quot;</code>，代表引入和当前文件在同一个文件夹的 redirectUrl.js</li><li><code>..</code>：两个点代表当前文件所在的上一层文件夹（路径）。在 Linux 中，切换到上一层的命令： <code>cd ..</code></li></ul><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-27-074330.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;阅读提示：此文适用于有自己博客的同学。&lt;/p&gt;
&lt;p&gt;昨天在公众号分享了一篇在 &lt;a href=&quot;https://depp.wang/2020/03/26/how-to-insert-slide-in-markdown/&quot;&gt;如何在 Markdown 里面插入幻灯片&lt;/a&gt;的文章，微信公众号由于平台限制，幻灯片只能在原文里面才能看到效果，不巧，原文链接手误写错了一个单词，本来是 insert，写成了 inset。&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;https&lt;/span&gt;://depp.wang/&lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;03&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;/how-&lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt;-inset-slide-&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;-markdown/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;应该是&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;https&lt;/span&gt;://depp.wang/&lt;span class=&quot;number&quot;&gt;2020&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;03&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;/how-&lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt;-insert-slide-&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;-markdown/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;作为一个强迫症患者，不能忍受这样的问题。可一旦我修改了原文链接，公众号这边要么删了重发，要么来个留言，说原文链接已经修改。两种方式可以解决问题，但是不爽。&lt;/p&gt;
&lt;p&gt;除了像我手误写错链接单词的情况，&lt;strong&gt;很多时候，我们文章修改题目后，如果想修改 url（url 是文章题目的英文），就会面临原 url 失效的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你也有上面这种困扰，那么可以看看我的解决思路。&lt;/p&gt;
    
    </summary>
    
      <category term="Software &amp; Website" scheme="https://depp.wang/categories/Software-Website/"/>
    
    
      <category term="URL" scheme="https://depp.wang/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Markdown 里面插入幻灯片</title>
    <link href="https://depp.wang/2020/03/26/how-to-insert-slide-in-markdown/"/>
    <id>https://depp.wang/2020/03/26/how-to-insert-slide-in-markdown/</id>
    <published>2020-03-26T20:48:37.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a></p></blockquote><p><strong>效果示例</strong>：</p><script async class="speakerdeck-embed" data-id="9780d352c95f4361bd8c6fa164554afc" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><ul><li>幻灯片来自：<a href="https://deepu.tech/memory-management-in-jvm/" target="_blank" rel="noopener">https://deepu.tech/memory-management-in-jvm/</a></li></ul><a id="more"></a><p><strong>使用前提</strong>：博客（网站）使用可渲染 js 脚本的 markdown 解析器，如 hexo 静态博客。我测试了一下，掘金、博客园等将 markdown 转换（解析）为 html 时，会忽略幻灯片 js 脚本。</p><p><strong>原理</strong>：在网页中内嵌一个 js 脚本。</p><p><strong>步骤</strong>： </p><ol><li>将多个图片转换为一个 PDF，可使用 <a href="https://smallpdf.com/jpg-to-pdf" target="_blank" rel="noopener">Smallpdf</a> 转换。pdf 示例：<a href="https://drive.google.com/file/d/1RJ3j2F5hh4oR-RWOBRNI5DJCcT6Oh2VE/view?usp=sharing" target="_blank" rel="noopener">presentation.pdf</a></li><li>在  <a href="https://speakerdeck.com/" target="_blank" rel="noopener">Speaker Deck</a> 上传 PDF，生成<a href="https://speakerdeck.com/deppwang/google-drive-presentation" target="_blank" rel="noopener">幻灯片</a>，点击分享按钮，获取幻灯片可内嵌（Embed）到 markdown 的 js 脚本</li><li>在 markdown 粘贴 js 脚本即可</li></ol><p><strong>js 脚本</strong>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">class</span>=<span class="string">"speakerdeck-embed"</span> <span class="attr">data-id</span>=<span class="string">"69f38a5da6a64b4086368afca27bc7e1"</span> <span class="attr">data-ratio</span>=<span class="string">"1.77777777777778"</span> <span class="attr">src</span>=<span class="string">"//speakerdeck.com/assets/embed.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最终效果</strong>：</p><script async class="speakerdeck-embed" data-id="69f38a5da6a64b4086368afca27bc7e1" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;效果示例&lt;/strong&gt;：&lt;/p&gt;
&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;9780d352c95f4361bd8c6fa164554afc&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;幻灯片来自：&lt;a href=&quot;https://deepu.tech/memory-management-in-jvm/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://deepu.tech/memory-management-in-jvm/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://depp.wang/categories/Markdown/"/>
    
    
      <category term="幻灯片" scheme="https://depp.wang/tags/%E5%B9%BB%E7%81%AF%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>互联网协议入门</title>
    <link href="https://depp.wang/2020/03/20/internet-protocol-suite-introduction/"/>
    <id>https://depp.wang/2020/03/20/internet-protocol-suite-introduction/</id>
    <published>2020-03-20T20:48:37.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：<a href="https://depp.wang">DeppWang</a></p></blockquote><p>互联网上的数据能从一台设备发送到另一台设备，整个过程由<a href="https://zh.wikipedia.org/wiki/TCP/IP协议族" target="_blank" rel="noopener">互联网协议</a>（ Internet Protocol Suite）实现的。 </p><p>对于互联网协议，一直一知半解。知道会分为几层，但为什么分层，分层有什么好处，都不甚理解。通过<a href="www.ruanyifeng.com">阮一峰</a>的这两篇文章，大概有了一个初步认识，下面是我对互联网协议的理解。</p><ul><li><a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="noopener">互联网协议入门（一）<em>阮一峰</em></a></li><li><a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html" target="_blank" rel="noopener">互联网协议入门（二）<em>阮一峰</em></a></li></ul><a id="more"></a><!--一直以来的疑惑：--><!--为什么说 Dubbo 基于 TCP 协议，Spring Cloud 基于 HTTP 协议？难道 Spring Cloud 就没有使用应用层吗？HTTP 协议没有用到 TCP 协议吗（没有经过传输层吗）？怎么好像两者是并列的关系。为什么基于 TCP 协议的 Dubbo 就更快一些呢？--><!--一个打开网页的请求如何从客户端发送到服务端，并接受到请求的，其请求包是格式是怎样的。--><!--对于手机来说，这几层体现在哪里？或者说是哪个软件实现这几层的？--><h2 id="一、五层模型"><a href="#一、五层模型" class="headerlink" title="一、五层模型"></a>一、五层模型</h2><p>我也认为将互联网协议分为五层，可以更好的去理解它，从上往下分别是：应用层、传输层、网络层、（数据）链路层（链接层）和物理层（实体层）。如果死记硬背，往往过几天就忘了，所以需要了解其原理，当我们理解了全文，让我们去说文章的名字，那还不是轻而易举吗！</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-16-091651.png" alt="图片来自阮一峰博客"></p><p>大多数文章或书籍都是从上往下来讲解互联网协议，但是个人感觉总是没有深入其理，阮一峰<strong>自下而上</strong>的讲解每一层的功能，让人记忆深刻。我也依葫芦画瓢，先自下而上分析一下每一层的功能，再结合 <a href="https://www.wireshark.org/" target="_blank" rel="noopener">Wireshark</a> 抓包工具，来稍稍看看互联网协议的真面目。</p><h3 id="1-1-层与协议"><a href="#1-1-层与协议" class="headerlink" title="1.1 层与协议"></a>1.1 层与协议</h3><p>为什么叫某某层？为什么要分层？层是什么？</p><p>我觉得层这个叫法很形象，一层一层，好像平行，各自独立。维基百科的解释是：「<strong>整个通信网络的任务，可以划分成不同的功能区块，即所谓的层级（<a href="https://zh.wikipedia.org/w/index.php?title=Layer&action=edit&redlink=1" target="_blank" rel="noopener">layer</a>）</strong>」，我们可以理解为，每一层是实现了一个功能，有不同的分工。就跟写代码一样，如果把所有功能放一起，改一行代码就可能影响全部，所以根据不同功能拆成不同的方法。我觉得叫什么不重要，可以叫应用块、应用组，等等。<strong>主要知道，每一层是为了完成一个功能就行。</strong></p><p>我们知道，每一层都有自己对应的协议（Protocol），比如，网络层有 IP 协议。那何为协议？跟这个层又有什么关联？维基百科上有这么一句话：「网络层功能由 IP 协议规定和实现，故又称 IP 层」。我们可以看出，每一层的功能其实是协议来规定和实现的。所以，协议可以理解为，<strong>有大家都遵守的规则（规定），并负责去实现这个规则。</strong></p><h2 id="二、物理层（Physcial-Layer）"><a href="#二、物理层（Physcial-Layer）" class="headerlink" title="二、物理层（Physcial Layer）"></a>二、物理层（Physcial Layer）</h2><p>我们电脑现在不用插网线就能上网（连 WIFI），但是路由器插网线了，在家里，路由器一般又需要通过一根网线连接入户光纤盒（又称为光猫），光纤盒又需要通过一根光纤连接到其他设备。电脑连接 WiFi，电脑的数据发送到路由器，是通过无线电波。所以传输数据需要物理载体，类似网线、光纤、无线电波。<strong>我们将传输数据的物理载体称为物理层（Physcial Layer）</strong>。为什么我们访问美国的网站就慢一些，因为美国网站的服务器在美国，数据通过海底光缆传输，耗时会久一些。这也是为什么很多公司要在不同城市部署服务器的原因之一吧。</p><p>数据在物理载体中传输，传输的是什么呢？<strong>是 0 和 1 组成的电信号</strong>，为什么是 0 和 1 组成的电信号呢？这个吧，姑且通过类比的方式来解释，因为计算机只能识别 0 1 二进制，所以要传输 0 和 1 组成的电信号吧。</p><!--问好脸：网速的快慢由每 1 秒能传输电信号的多少决定？--><h2 id="三、链路层（Link-Layer）"><a href="#三、链路层（Link-Layer）" class="headerlink" title="三、链路层（Link Layer）"></a>三、链路层（Link Layer）</h2><p>物理层只是一个传输载体，没有「自主意识」， 我们需要借助物理层上的<a href="https://zh.wikipedia.org/wiki/数据链路层" target="_blank" rel="noopener">链路层</a>（Link Layer），<strong>链路层的功能：将数据从一处发送到另一处</strong>，链路层在发送方和接收方都有，在发送方：链路层将数据转换为电信号，并将其发送出去；在接收方：链路层收到电信号，并将电信号转换为数据。链路层和物理层之间的关系可以这样表示：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-131628.jpg" alt=""></p><p>在<a href="https://zh.wikipedia.org/wiki/局域网" target="_blank" rel="noopener">局域网</a>内，将数据从一处发送到另一处需要使用<a href="https://zh.wikipedia.org/wiki/以太网" target="_blank" rel="noopener">以太网</a>（Ethernet）。<strong>局域网的通俗理解，连接同一个 <a href="https://zh.wikipedia.org/wiki/Wi-Fi" target="_blank" rel="noopener">WiFi</a> （路由器 Router）的设备在同一个局域网内。</strong></p><h3 id="3-1-以太网"><a href="#3-1-以太网" class="headerlink" title="3.1 以太网"></a>3.1 以太网</h3><p>以太网是一种局域网技术，它可以实现局域网内的设备通信，我们现在电脑一般连 WiFi，WiFi 可以认为是「无线以太网」。</p><p>我们可以理解为，<strong>在局域网内，链路层的功能其实是由以太网实现的</strong>（局域网外的链路层比较复杂，本文不讨论）。 局域网内的链路层和以太网的关系可以这样表示（物理层作为以太网的传输载体）：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-121930.jpg" alt=""></p><p><strong>以太网需要规定电信号的格式，以便双方解读</strong>。以太网规定一组电信号为一个数据包，叫帧（Frame），帧包含两部分，标头（Head）和数据（Data），标头包含发送方地址、接收方地址等信息，数据则是数据包的具体内容。我们一般将帧称为以太网数据包，或者<a href="https://zh.wikipedia.org/wiki/以太网帧格式" target="_blank" rel="noopener">以太帧</a>，以太帧格式类似下面这样：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-17-065355.png" alt="以太帧，图片来自阮一峰博客"></p><p>每台网络设备都有自己的网卡，<strong>以太网是将数据从一块<a href="https://zh.wikipedia.org/wiki/网卡" target="_blank" rel="noopener">网卡</a>发送到另一块网卡</strong>，每块网卡需要有自己的「身份证号」，叫 <a href="https://zh.wikipedia.org/wiki/MAC地址" target="_blank" rel="noopener">MAC 地址</a>（iPhone 手机的 MAC 地址叫无线局域网地址），由 12 个十六进制数表示：</p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-121841.jpg" style="zoom:50%;"><blockquote><p>MAC地址：（<strong>M</strong>edia <strong>A</strong>ccess <strong>C</strong>ontrol Address），直译为媒体存取控制位址，也称为局域网地址（LAN Address），<strong>以太网地址</strong>（Ethernet Address）或<strong>物理地址</strong>（Physical Address），它是一个用来确认网络设备位置的地址。</p></blockquote><p>所以以太网发送前需要知道接收方网卡的 MAC 地址，即标头的接收方地址，但正常情况下，不知道接收方 MAC 地址，需要使用 <a href="https://zh.wikipedia.org/wiki/地址解析协议" target="_blank" rel="noopener">ARP 协议</a>得到（这个本文后面解释）</p><p>假设已经知道了 MAC 地址，那么在局域网内，以太网可以根据 MAC 地址，将数据发送给对方。但如果对方没有在一个局域网内，如何发送给对方呢？此时，就需要<a href="https://zh.wikipedia.org/wiki/网络层" target="_blank" rel="noopener">网络层</a>（Network Layer）出马了！</p><hr><p>以太网在 Windows 中的体现：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-123642.jpg" alt=""></p><p>在 macOS 的体现： <a href="https://zh.wikipedia.org/wiki/PPPoE" target="_blank" rel="noopener">PPPoE</a>（英语：<strong>P</strong>oint-to-<strong>P</strong>oint <strong>P</strong>rotocol <strong>o</strong>ver <strong>E</strong>thernet），以太网上的点对点协议。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-123706.jpg" alt=""></p><h2 id="四、网络层（Network-Layer）"><a href="#四、网络层（Network-Layer）" class="headerlink" title="四、网络层（Network Layer）"></a>四、网络层（Network Layer）</h2><p>首先，我们要区分接收方是否在一个局域网，使用 MAC 地址不能区分，需要设备有另外一个地址，能代表它所处的具体是哪个网络（局域网），我们称这个地址为「<strong>网络地址</strong>」。</p><p><strong>网络层的作用，就是根据网络地址找到目的主机处于哪一个局域网</strong>。实现这一功能的协议称为网络协议，即 <a href="https://zh.wikipedia.org/wiki/网际协议" target="_blank" rel="noopener">IP 协议</a> 。网络地址用于 IP 协议，所以网络地址也可以叫它 IP 地址。<strong>注意</strong>：我们叫 IP 协议，是一种习惯，其实 IP(<strong>I</strong>nternet <strong>P</strong>rotocol) 本身就有协议的意思。</p><!--如果设备连 WiFi，WiFi 是局域网，路由器会为设备分配一个局域网 IP 地址，它只能在局域网内部使用，所以也叫内部（本地） IP。局域网有一个对外访问互联网的 IP，称为外部 IP，**一个局域网内的所有设备共用一个外部 IP 地址**。在百度输入IP，显示的 IP 就是外部 IP，在「设置->网络」中看到的 IP 是内部 IP。我们称局域网为内网，内是相对的概念，代表没有外部 IP 就不能访问。--><p>如果设备连 WiFi，路由器会为设备分配一个 IP 地址。</p><h3 id="4-1-IP-协议"><a href="#4-1-IP-协议" class="headerlink" title="4.1 IP 协议"></a>4.1 IP 协议</h3><blockquote><p><strong>IP</strong> 协议：英语全称为：<strong>I</strong>nternet <strong>P</strong>rotocol，即<strong>网络协议</strong>，也称<strong>网际协议</strong>。</p></blockquote><p>现在大部分使用的还是 IP 协议第四版，简称 IPv4，IP 地址为 32 位（4*8，二进制）。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052908.png" alt="图片来自阮一峰博客"></p><p>有了 IP 地址，网络层可以通过 IP 地址来区分是否处于一个局域网。如何根据 IP 地址判断设备是否处于同一个局域网？答案是利用<a href="https://zh.wikipedia.org/wiki/子网#网络掩码" target="_blank" rel="noopener">子网掩码</a>。IP 地址分为两部分，网络部分和主机部分，如果子网掩码为 <code>255.255.255.0</code>（二进制表示：<code>11111111.11111111.11111111.00000000</code>），表示前 24 位代表网络部分，如果两个 IP 地址前 24 位相同，则代表是在同一个局域网中。</p><h3 id="4-2-IP-数据包"><a href="#4-2-IP-数据包" class="headerlink" title="4.2 IP 数据包"></a>4.2 IP 数据包</h3><p>数据经过网络层，IP 协议为数据加上包含发送方 IP 地址和接收方 IP 地址的标头，包装为 IP 数据包：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-17-134735.png" alt="图片来自阮一峰博客"></p><p>IP 数据包到达链路层时，直接作为作为以太帧的数据部分，嵌入以太帧。此时的以太帧的格式如下：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-17-134810.png" alt="图片来自阮一峰博客"></p><p>如果通过子网掩码判断接收方在一个局域网，就通过以太网发送，此时需要得到其 MAC 地址，前面说，需要 ARP 协议得到其 MAC 地址，何为 ARP 协议？</p><h3 id="4-3-ARP-协议"><a href="#4-3-ARP-协议" class="headerlink" title="4.3 ARP 协议"></a>4.3 ARP 协议</h3><p>ARP 协议，英语全称为：<strong>A</strong>ddress <strong>R</strong>esolution <strong>P</strong>rotocol，即地址解析协议，是一种通过 IP 地址得到 MAC 地址的协议。默认情况，发送方知道接收方的 IP 地址（通过 <a href="https://zh.wikipedia.org/wiki/域名系统" target="_blank" rel="noopener">DNS</a> 得到，这个又后面解释），所以发送方使用「广播」（broadcasting）的方式给当前局域网所有主机发送一个以太帧，包含对方的 IP 地址，对方 MAC 地址设为 <code>ff:ff:ff:ff:ff:ff</code>，接收方根据接收者 IP 地址判断自己是否为接收者，是，就发送一个数据包告诉对方自己的 MAC 地址，不是，就丢弃这个包。</p><p>通过这种方式，发送方就可以通过接收方的 IP 地址得到 MAC 地址。</p><p>如果通过子网掩码判断接收方不在一个局域网，通过 APR 协议就得不到对方的 MAC 地址，那就要使用<a href="https://zh.wikipedia.org/wiki/路由" target="_blank" rel="noopener">路由</a>（Route）的方式发送了。</p><h3 id="4-4-路由"><a href="#4-4-路由" class="headerlink" title="4.4 路由"></a>4.4 路由</h3><p>路由，简单来说，就是得到路由器的 MAC 地址，数据先发送到<a href="https://zh.wikipedia.org/wiki/路由器" target="_blank" rel="noopener">路由器</a>（Router），由路由器来发送下一个路由器，通过一系列路由中转，最后发给目标主机。</p><!--路由器往外发送时，使用的是外部 IP（互联网 IP）。使用外部 IP 才能和互联网通信，外部 IP 是名片--><p>其实就像发送快递一样，在快递上写上收件人的地址，由快递点发送给下一个中转站，再中转，最后收件人收到快递。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-030924.png" alt=""></p><p>一个简单的路由器，需要实现 IP 协议和链路层协议。</p><p>如果把上面的过程说的仔细一点，以太网是将以太帧发送给路由器链路层，路由器链路层将数据包发送给路由器网络层，路由器有一个路由表，网络层在路由表找到跟当前路由器相连的、离目的主机最近的路由器，路由器通过 ARP 协议，得到下一个路由器的 MAC 地址，让路由器链路层根据 MAC 地址，发送给下一个路由器。通过一系列中转，来到目的主机所在的路由器。使用同样的方式，通过以太网将以太帧发送给目的主机。整个过程大概是这样：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-030834.png" alt=""></p><p>我们常说，网络层负责寻址和路由，寻址就是寻找最近的 IP 地址，路由就是找到最近的路由 MAC 地址（我这么理解，不一定正确）。我们可以理解为：整个通信过程中的网络层负责寻址和路由，发送方的网络层其实负责它自己的寻址和路由。</p><!--前面说，局域网内的链路层是由以太网实现的。那么局域网外的后链路层呢？是通过骨干网等实现。--><h2 id="五、传输层（Transport-Layer）"><a href="#五、传输层（Transport-Layer）" class="headerlink" title="五、传输层（Transport Layer）"></a>五、传输层（Transport Layer）</h2><p>网络层和链路层实现了互联网任意两台主机之间的网络通信，此时还有两个问题，<strong>1、设备不止一个程序，具体发送给哪一个程序？2、没有保证数据包能发送成功。</strong></p><p>这时候就需要<a href="https://zh.wikipedia.org/wiki/传输层" target="_blank" rel="noopener">传输层</a>（Transport Layer），<strong>传输层的功能是保证数据能可靠传输到对方主机的应用程序上。</strong></p><p>应用是进程，<strong>每个进程使用网卡时，需要有一个编号，这个编号就是端口</strong>。系统默认占用 0 到 1023 的端口，系统会为软件随机分配 1024 到 65535 之间的端口。 常见术语套接字（Socket）就是 IP 地址 + 端口的组合称谓。</p><p>传输层要为发送的数据包中增加发送方和接收方的端口号。</p><p>传输层功能实现一般有两种协议，1 是 <a href="https://zh.wikipedia.org/wiki/传输控制协议" target="_blank" rel="noopener">TCP 协议</a>，2 是 <a href="https://zh.wikipedia.org/wiki/用户数据报协议" target="_blank" rel="noopener">UDP 协议</a>。</p><h3 id="5-1-TCP-协议"><a href="#5-1-TCP-协议" class="headerlink" title="5.1 TCP 协议"></a>5.1 TCP 协议</h3><blockquote><p><strong>TCP</strong> 协议，英语全称为：<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol，即，<strong>传输控制协议</strong></p></blockquote><p>TCP 协议使用用三次握手来保证线路的可靠，失败后，有失败重传机制，它是一个很复杂的协议，传输层的称谓，也是来源于 TCP 这个 <strong>传输控制协议</strong>。</p><p>TCP 协议发送的数据包叫 TCP 数据包，它的标头包含发送方端口和接收方端口，</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-17-141857.png" alt="图片来自阮一峰博客"></p><p>它发送数据包给网络层，网络层将 TCP 数据包作为 IP 数据包的数据部分，再发给链路层。此时以太帧格式如下：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-17-141939.png" alt="图片来自阮一峰博客"></p><p>因为以太帧有长度限制，TCP 协议没有规定数据的长度，所以当 TCP 数据包过长时，以太帧装不下，此时 TCP 数据包需要切分为多个 TCP 数据包。我们常常看到有的书籍说：传输层负责「请求报文」的分割。这就是传输层为什么要分割「请求报文」的缘故。</p><p>传输层保证数据的「可靠传输」，这句话常常被我们误解为，是由传输层传输数据，现在我们知道，传输数据的其实是链路层，传输层其实只是失败重传（当然不止这一个功能，这里这么说是为了方便理解）。所以这句话的重点在于<strong>可靠</strong>，不在传输。</p><h3 id="5-2-UDP-协议"><a href="#5-2-UDP-协议" class="headerlink" title="5.2 UDP 协议"></a>5.2 UDP 协议</h3><blockquote><p><strong>UDP 协议</strong>，英语全称为： <strong>U</strong>ser <strong>D</strong>atagram <strong>P</strong>rotocol，即<strong>用户数据包协议</strong></p></blockquote><p>传输层有一种简单的协议，叫 UDP 协议，UDP 协议只是为数据简单的加上包含发送方端口和接收方端口的标头，就将 UDP 数据包扔给网络层，它不保证是否能成功的发送给接收方，它是一种不可靠的传输协议。因为简单，减少了时间开销，常用于对时间有较高要求的应用程序。</p><h2 id="六、应用层（Application-Layer）"><a href="#六、应用层（Application-Layer）" class="headerlink" title="六、应用层（Application Layer）"></a>六、应用层（Application Layer）</h2><p>链路层、网络层、传输层实现了数据包能从主机应用发送到目的主机应用。正常情况下，网络上主要传输的数据是应用产生的。传输的数据各种各样，有网络请求，有电子邮件等等。数据需要由<a href="https://zh.wikipedia.org/wiki/应用层" target="_blank" rel="noopener">应用层</a>（Application Layer）封装，即规定数据的格式。</p><p>规定「HTML 数据」格式的是 <a href="https://zh.wikipedia.org/wiki/超文本传输协议" target="_blank" rel="noopener">HTTP 协议</a>。可以说，HTTP 协议是应用层的一种实现。</p><h3 id="6-1-HTTP-协议"><a href="#6-1-HTTP-协议" class="headerlink" title="6.1 HTTP 协议"></a>6.1 HTTP 协议</h3><blockquote><p><strong>HTTP 协议</strong>：英文全称为：H<strong>yper</strong>T<strong>ext **T</strong>ransfer <strong>P</strong>rotocol，即超文本转移（传输）协议</p></blockquote><p>当我们打开百度首页时，输入的就是一个网址 <code>www.baidu.com</code>，这是一个 GET 请求，HTTP 协议将请求封装为应用层数据包。这样，百度的服务器应用层就可以根据 HTTP 协议来解析数据包。</p><p>HTTP 请求的数据包一般称为请求报文，分为报文首部和报文主题，报文首部即为请求头，请求头格式如下：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-123839.jpg" alt=""></p><p>包含的应用层数据包的以太帧格式如下：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-17-143436.png" alt="图片来自阮一峰博客"></p><h3 id="6-2-DNS"><a href="#6-2-DNS" class="headerlink" title="6.2 DNS"></a>6.2 DNS</h3><blockquote><p> <strong>DNS</strong>：英语全称为： <strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem，即<strong>域名系统</strong></p></blockquote><p>类似  <code>www.baidu.com</code> 这样的网址域名，是为了用户方便记忆，网络通信时，需要将域名转换为 IP 地址，这是由 <a href="https://zh.wikipedia.org/wiki/域名系统" target="_blank" rel="noopener">DNS</a> 负责的，它也属于应用层。</p><h2 id="七、WireShark-抓包分析"><a href="#七、WireShark-抓包分析" class="headerlink" title="七、WireShark 抓包分析"></a>七、WireShark 抓包分析</h2><p>当 Mac 连 WIFI 后，可以在「设置-&gt;网络」中看见下面这些内容：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-123927.jpg" alt="TCP/IP"></p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-123948.jpg" alt="MAC 地址"></p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-124038.jpg" alt="DNS 地址"></p><p>此时电脑，有自己的 IP 地址、MAC 地址、还知道路由器的 IP 地址、DNS 服务器地址（由路由器负责域名解析，所以 DNS 地址其实就是 IP 地址）和当前的子网掩码。还可以看出，路由器动态分配 IP 地址是由 <a href="https://zh.wikipedia.org/wiki/动态主机设置协议" target="_blank" rel="noopener">DHCP</a> 实现的。</p><p>通过打开百度首页，结合抓包工具 Wireshark 来看看网络通信过程中的数据包的内容。</p><p>关于如何使用 Wireshark，请看 <a href="https://juejin.im/post/5c87059ae51d452f3f64b110" target="_blank" rel="noopener">使用 wireshark 学习网络协议</a>。通过 <code>ping www.baidu.com</code> 得到百度的 IP 地址为 <code>61.135.169.121</code>，在 Wireshark 中配置过滤条件后，通过使用命令 <code>curl www.baidu.com</code> 来模拟打开百度首页：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-124128.jpg" alt=""></p><p>此时在 Wireshark 中可以看出，TCP 协议发送了以太帧，以太帧的格式是：Ethernet II 标头 + IP 4 标头 + TCP 标头 + TCP 数据，TCP 标头显示源端口为 53732，目的地端口为 80；IP 标头显示源 IP 地址为 <code>192.168.31.206</code>，目的地 IP 地址为 <code>61.135.169.121</code>；以太网标头显示源 MAC 地址为 <code>f0:18:98:46:bf:65</code>，目的地 MAC 地址为 <code>28:6c:07:9d:e2:8e</code>（小米路由器地址）。帧的长度为 78 字节，TCP 数据包的长度为 44 个字节。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-124202.jpg" alt=""></p><p>这与我们前面说的相符合，目的主机不在同一个局域网，通过以太网发送以太帧给路由器，再由路由器负责路由发送。</p><p>前三个数据包为 TCP 的 3 次握手，接着发送了 HTTP 数据包，HTTP 数据包包含了请求的内容：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-124319.jpg" alt="">整个过程：先使用 TCP 协议完成了 3 次握手，然后使用 HTTP 协议发送了 GET 请求，接收到了百度的 HTTP 响应，最后使用 TCP 协议完成了 4 次挥手。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-124357.jpg" alt=""></p><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>互联网协议整个网络通信过程可以用下面这张图描述：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-20-083129.png" alt="图片来自 Wiki"></p><p>对于发送方的数据处理，<strong>这个过程像是一个俄罗斯套娃的过程</strong>：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-17-150358.png" alt="图片来自 Wiki"></p><p>如果用发快递来类比一下：</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">应用层：将物体打包为快递  </span><br><span class="line">      <span class="string">|</span></span><br><span class="line">传输层：为快递填上收件人门牌号；如果快递丢失重新发送</span><br><span class="line">      <span class="string">|</span></span><br><span class="line">网络层：为快递填上收件人小区地址；并根据收件人小区地址，找到下一个快递中转站的地址，最终找到整个线路</span><br><span class="line">      <span class="string">|</span></span><br><span class="line">链路层：为快递填上下一个中转地地址；并负责将快递发往到下一个中转站</span><br><span class="line">      <span class="string">|</span></span><br><span class="line">物理层：运快递的车</span><br></pre></td></tr></table></figure><p>在互联网协议中，因为 TCP/IP 协议最重要，所以互联网协议也可以叫做 「<strong>TCP/IP 协议族</strong>」。</p><p>此文只是个人对互联网协议的浅显理解，毕竟没有深入研究，可能有诸多不当处，欢迎留言指出。</p><p>最后我想说一句，阮一峰牛逼。有的知识点是知道怎么回事，就是不能正确的表达出来，遣词排句真的很需要功力，真的需要常年累月的积累。</p><!--解疑现在来说说，为什么说 SpringCloud 基于 HTTP 协议，Dubbo 基于 TCP 协议。我是这么理解的，因为 SpringClout 框架直接接受 HTTP 请求，而 Dubbo 让数据没有使用 HTTP 协议包装数据包。直接将数据包装为 TCP 数据包。--><h2 id="九、延伸阅读"><a href="#九、延伸阅读" class="headerlink" title="九、延伸阅读"></a>九、延伸阅读</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="noopener">互联网协议入门（一）<em>阮一峰</em></a></li><li><a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html" target="_blank" rel="noopener">互联网协议入门（二）<em>阮一峰</em></a></li><li><a href="https://juejin.im/post/5c87059ae51d452f3f64b110" target="_blank" rel="noopener">使用wireshark学习网络协议</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://depp.wang&quot;&gt;DeppWang&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;互联网上的数据能从一台设备发送到另一台设备，整个过程由&lt;a href=&quot;https://zh.wikipedia.org/wiki/TCP/IP协议族&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;互联网协议&lt;/a&gt;（ Internet Protocol Suite）实现的。 &lt;/p&gt;
&lt;p&gt;对于互联网协议，一直一知半解。知道会分为几层，但为什么分层，分层有什么好处，都不甚理解。通过&lt;a href=&quot;www.ruanyifeng.com&quot;&gt;阮一峰&lt;/a&gt;的这两篇文章，大概有了一个初步认识，下面是我对互联网协议的理解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;互联网协议入门（一）&lt;em&gt;阮一峰&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;互联网协议入门（二）&lt;em&gt;阮一峰&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Network" scheme="https://depp.wang/categories/Network/"/>
    
    
      <category term="互联网协议" scheme="https://depp.wang/tags/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + NexT 博客优化（修改）记录</title>
    <link href="https://depp.wang/2020/03/12/hexo-next-all-change/"/>
    <id>https://depp.wang/2020/03/12/hexo-next-all-change/</id>
    <published>2020-03-12T20:48:37.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<p>有问题建议先看<a href="https://theme-next.iissnan.com/faqs.html" target="_blank" rel="noopener">官方文档</a>，和 <a href="https://github.com/iissnan/hexo-theme-next/issues" target="_blank" rel="noopener">issue</a></p><h2 id="一、样式修改"><a href="#一、样式修改" class="headerlink" title="一、样式修改"></a>一、样式修改</h2><p>注意：重新部署后，样式若没更新，清除浏览器缓存</p><h3 id="分类横向展示"><a href="#分类横向展示" class="headerlink" title="分类横向展示"></a>分类横向展示</h3><p><code>themes\next\source\css\_common\component\pages\categories.styl</code> 中修改：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.category-list-item</span> &#123; </span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">10px</span>; </span><br><span class="line">  display: inline-block; // 新增</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>display: inline-block</code>：可以不换行，让其他元素元素显示在旁边；并且可以设置高度。<a href="https://www.w3schools.com/css/css_inline-block.asp" target="_blank" rel="noopener">w3schools: CSS Layout - display: inline-block</a></li></ul><a id="more"></a><h3 id="设置图片居中"><a href="#设置图片居中" class="headerlink" title="设置图片居中"></a>设置图片居中</h3><p>Mist 主题： <code>themes\next\source\css\_schemes\Mist\_posts-expanded.styl</code> 中修改</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">.post-body img &#123; margin: auto; &#125; // 0 - &gt; auto</span><br></pre></td></tr></table></figure><ul><li>_schemes：方案</li><li>图片链接格式不为 <code>![]()</code> 时，需要用 <code>&lt;p&gt;&lt;/p&gt;</code> 包裹，此时图片才有间距</li></ul><h3 id="设置字体大小"><a href="#设置字体大小" class="headerlink" title="设置字体大小"></a>设置字体大小</h3><p><code>themes\next\source\css\_custom\custom.styl</code> 中新增：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正文字体的大小</span></span><br><span class="line"><span class="variable">$font</span>-size-base = <span class="number">16px</span></span><br></pre></td></tr></table></figure><ul><li><code>_custom\custom.styl</code> 为全局自定义样式</li><li>如果未生效，在 <code>themes\next\source\css\_variables\base.styl</code> 中修改</li></ul><h3 id="更改内容区域的宽度"><a href="#更改内容区域的宽度" class="headerlink" title="更改内容区域的宽度"></a>更改内容区域的宽度</h3><p><code>themes\next\source\css\_custom\custom.styl</code> 中新增：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改成你期望的宽度</span></span><br><span class="line"><span class="variable">$content</span>-desktop = <span class="number">800px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当视窗超过 1600px 后的宽度</span></span><br><span class="line"><span class="variable">$content</span>-desktop-large = <span class="number">1000px</span></span><br></pre></td></tr></table></figure><ul><li>如果未生效，在 <code>themes\next\source\css\_variables\base.styl</code> 中修改</li></ul><h3 id="更改-h1-h2-字体大小"><a href="#更改-h1-h2-字体大小" class="headerlink" title="更改 h1 h2 字体大小"></a>更改 h1 h2 字体大小</h3><p>在 <code>themes\next\source\css\_custom\custom.styl</code> 中新增：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="comment">// 新增</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; <span class="comment">// 2em = 32px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>; <span class="comment">// 1.5em = 24px, 1em = 16px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>em: <a href="https://www.w3.org/Style/Examples/007/units.en.html#translations#:~:text=use%20the%20default%20size%20of%20the%20device" target="_blank" rel="noopener">use the default size of the device</a>，即根据正文字体的大小决定</li></ul><h3 id="设置-h2-下划线"><a href="#设置-h2-下划线" class="headerlink" title="设置 h2 下划线"></a>设置 h2 下划线</h3><p> <code>themes\next\source\css\_common\component\post\post-expand.styl</code> 中修改</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  // 新增</span><br><span class="line">  <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: .<span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eaecef</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也可以在  <code>themes\next\source\css\_schemes\Mist\_posts-expanded.styl</code> 修改？</li><li>只为文章内容中的 h1 h2 标题添加下划线</li></ul><h3 id="修改-h1-h2-h3-h4-间距"><a href="#修改-h1-h2-h3-h4-间距" class="headerlink" title="修改 h1 h2 h3 h4 间距"></a>修改 h1 h2 h3 h4 间距</h3><p>在 <code>themes\next\source\css\_custom\custom.styl</code> 中新增：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--正常来说，标题和段落之间就要要比段落与段落之间隔得近？--><h3 id="URL-中文改为英文"><a href="#URL-中文改为英文" class="headerlink" title="URL 中文改为英文"></a>URL 中文改为英文</h3><p>文章标题块添加 english-tile，<code>站点配置文件</code>修改 permalink</p><p><code>站点配置文件</code>设置 tag_map、category_map</p><h2 id="二、功能添加"><a href="#二、功能添加" class="headerlink" title="二、功能添加"></a>二、功能添加</h2><ul><li>底部添加版权声明、微信公众号图片、分享按钮</li></ul><h3 id="添加-Disqus-评论"><a href="#添加-Disqus-评论" class="headerlink" title="添加 Disqus 评论"></a>添加 Disqus 评论</h3><p>教程：<a href="https://depp.wang/2017/06/15/hexo-disqus">Hexo 添加 Disqus 评论</a></p><p>缺点：只能科学上网后才能评论</p><hr><h5 id="也可以使用-Gitalk"><a href="#也可以使用-Gitalk" class="headerlink" title="也可以使用 Gitalk"></a>也可以使用 <a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a></h5><p>教程：</p><ul><li><a href="https://asdfv1929.github.io/2018/01/20/gitalk/" target="_blank" rel="noopener">使用 gitalk 评论插件</a></li><li><a href="https://liujunzhou.top/2018/8/10/gitalk-error/" target="_blank" rel="noopener">gitalk-error</a></li><li><a href="https://priesttomb.github.io/%E6%97%A5%E5%B8%B8/2018/02/12/%E5%A4%84%E7%90%86Gitalk%E4%B8%AD%E7%94%B1%E4%BA%8E%E6%96%87%E7%AB%A0URL%E8%BF%87%E9%95%BF%E5%AF%BC%E8%87%B4%E7%9A%84Validation-Failed(422)/" target="_blank" rel="noopener">处理Gitalk中由于文章URL过长导致的Validation Failed(422)</a></li></ul><p>缺点：发布文章后需要页面点击初始化；issue 不美观</p><h3 id="添加-Algolia-搜索"><a href="#添加-Algolia-搜索" class="headerlink" title="添加 Algolia 搜索"></a>添加 Algolia 搜索</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HEXO_ALGOLIA_INDEXING_KEY=*** # 使用 export 临时设置一个环境变量</span><br><span class="line">echo $HEXO_ALGOLIA_INDEXING_KEY      # 查看环境变量是否设置成功</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li><a href="https://www.npmjs.com/package/hexo-algolia" target="_blank" rel="noopener">hexo-algolia</a> 和  <a href="https://www.npmjs.com/package/hexo-algoliasearch" target="_blank" rel="noopener">hexo-algoliasearch</a> 不要同时使用</li><li>使用 hexo-algolia 时，如果你删除了文章，需要更新 Algolia 里面的链接，需要使用 <code>hexo algolia --flush true</code> 命令</li></ol><p>hexo-algolia 模块的作用：将博客文章链接发送给自己的 Algolia 账户。搜索原理：输入关键字，调用 Algolia 提供接口，返回相应文章链接</p><p>可参考教程：</p><ul><li><a href="https://juejin.im/post/5af3f9d1518825673e35a6eb" target="_blank" rel="noopener">Hexo + Next 集成 Algolia 搜索</a></li><li><a href="http://theme-next.iissnan.com/third-party-services.html#algolia-search" target="_blank" rel="noopener">Next Algolia</a> </li></ul><p>缺点：</p><ol><li>新增文章后需要运行 <code>hexo algolia</code> 将当前文章发送到 Algolia</li><li>删除文章后还能搜索到，需要再次去 Algolia 删除？可使用  <code>hexo algolia --flush true</code> 命令更新</li></ol><p>可能遇到的问题：</p><ul><li>每次运行 <code>hexo algolia</code> 都需要设置环境变量，解决方式：直接「永久」设置环境变量</li></ul><p>macOS「永久」设置环境变量：</p><ul><li>默认为 bash，修改 .bash_profile</li><li>如果为 oh-my-zsh，修改 .zshrc</li><li>打印环境变量命令：printenv</li></ul><h3 id="添加文章阅读次数统计、网站访问次数统计"><a href="#添加文章阅读次数统计、网站访问次数统计" class="headerlink" title="添加文章阅读次数统计、网站访问次数统计"></a>添加文章阅读次数统计、网站访问次数统计</h3><p>可参考文章：<a href="https://depp.wang/2017/06/14/hexo-statistical/">Hexo 添加不蒜子和 LeanCloud 统计</a></p><h2 id="三、外部设置"><a href="#三、外部设置" class="headerlink" title="三、外部设置"></a>三、外部设置</h2><ul><li><a href="https://depp.wang/2020/02/17/use-github-actions-to-achieve-hexo-blog-auto-deploy/">使用 GitHub Actions 实现 Hexo 博客自动部署</a></li></ul><h3 id="自定义域名加密为-HTTPS"><a href="#自定义域名加密为-HTTPS" class="headerlink" title="自定义域名加密为 HTTPS"></a>自定义域名加密为 HTTPS</h3><p>直接利用 <a href="https://www.cloudflare.com/" target="_blank" rel="noopener">cloudfire</a> 加密网站</p><p>访问域名时，需要先由 DNS 服务来将域名解析为 ip 地址</p><p>DNS 服务器负责域名解析，需要先将域名的 DNS 服务器修改为  cloudfire 的服务器，由 cloudfiere 的 DNS 服务器负责域名解析，在 cloudfire 中设置规则，如：将 depp.wang 解析到 deppwang.gihub.io</p><p>在项目 GitHub Pages 中设置：访问 deppwang.gihub.io 重定向到 depp.wang，访问 depp.wang 时，cloudfiere 的 DNS 服务器又将 depp.wang 指向到 deppwang.github.io，最终访问的还是 deppwang.github.io。ping depp.wang  会发现是 github 节点，如果 ip 地址为  cloudfiere 节点，那是因为 cloudfiere 设置了代理。</p><ul><li>DNS：Domain Name System 域名系统</li></ul><p>可参考文章：<a href="https://crossoverjie.top/%2F2017%2F05%2F07%2Fhttps%2Fl" target="_blank" rel="noopener">科普-为自己的博客免费加上小绿锁</a></p><h3 id="提交到-Google-搜索引擎"><a href="#提交到-Google-搜索引擎" class="headerlink" title="提交到 Google 搜索引擎"></a>提交到 Google 搜索引擎</h3><p>一般不主动提交 url  给 Google 搜索引擎，Google 也可以凭借强大的爬虫（蜘蛛）抓取你网址的 url，但为了让谷歌更好更快的抓取你的文章，还是给他提供一个参考，一个站点地图（sitemap.xml）</p><p>先在 <a href="https://search.google.com/search-console" target="_blank" rel="noopener">Search Console</a> 验证你拥有网站的所有权，可以使用 HTML 文件、HTML 标记等方式验证。将 HTML 文件添加到网站中。每个用户拥有自己的 HTML 文件，如果网站有多个管理员，每个管理员的 HTML 文件不同。</p><p>如果使用 HTML 文件验证失败，HTML 文件添加 <code>layout: false</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">layout: false</span><br><span class="line">---</span><br><span class="line">google-site-verification: googlec27ee4754ff2e800.html</span><br></pre></td></tr></table></figure><p>使用 <a href="https://github.com/hexojs/hexo-generator-sitemap/" target="_blank" rel="noopener">hexo-generator-sitemap</a> 包生成站点地图，hexo-generator-sitemap 包的作用：</p><ul><li>每次 <code>hexo g</code> 时，根据 _post 的文章生成站点地图：sitemap.xml。插件默认根据最近修改时间生成 sitemap 中的  <code>&lt;lastmod&gt;</code>，如果使用 <a href="https://github.com/DeppWang/hexo-action" target="_blank" rel="noopener">hexo-action</a>，需要添加 sitemap 模板（<code>/source/sitemap_template.xml</code>），使用文章的 date</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span></span><br><span class="line">  &#123;% for post in posts %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loc</span>&gt;</span>&#123;&#123; post.permalink | uriencode &#125;&#125;<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">    &#123;% if post.date %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>&#123;&#123; post.date.toISOString().substring(0, 10) &#125;&#125;<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">urlset</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  template:</span> <span class="string">./source/sitemap_template.xml</span></span><br></pre></td></tr></table></figure><p>正常来说，当添加了 sitemap，Google 将定期抓取你设置的 sitemap</p><ul><li>站点地图抓取时间不更新解释：<a href="https://metinsaylan.com/9642/how-to-solve-search-console-sitemap-could-not-be-read-error/" target="_blank" rel="noopener">[How To] Solve Search Console “Sitemap could not be read” Error</a></li></ul><p>sitemap 的 <code>&lt;lastmod&gt;</code> 应该对应 <a href="https://github.com/deppwang/deppwang.github.io" target="_blank" rel="noopener">deppwang.github.io</a> 的 html 文件的最近修改时间，sitemap 的最新文章的 url 的 <code>lastmod</code> 是对的，但其他 url 的时间不一定是对的。因为 Hexo 每次发布基本上都会更新所有文章 <code>og:updated_time</code> 改变。所以 GCS 是否因为文章时间对应不上而不抓取？或者因为网站权重太低？</p><p>如果 sitemap 不能读取，也可以设置 atom.xml</p><ul><li><a href="https://github.com/hexojs/hexo-generator-sitemap/issues/92" target="_blank" rel="noopener">https://github.com/hexojs/hexo-generator-sitemap/issues/92</a></li></ul><h2 id="四、其他可能遇到的问题"><a href="#四、其他可能遇到的问题" class="headerlink" title="四、其他可能遇到的问题"></a>四、其他可能遇到的问题</h2><ul><li>Google 不收录网址的问题</li><li>博客源文件每次被覆盖的问题</li></ul><h3 id="头像下网址描述不显示问题"><a href="#头像下网址描述不显示问题" class="headerlink" title="头像下网址描述不显示问题"></a>头像下网址描述不显示问题</h3><p>可能是你在 <code>主题配置文件</code> 中开起了 SEO，SEO 覆盖掉了原来的代码</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seo:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>目测开启没有什么效果，可以关闭解决。也可以修改源代码</p><p>思路：找到不显示字样的 class，IDEA 打开文件，全局搜索 class，找到代码位置，进行修改</p><p>修改文件位置</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/next/</span>layout<span class="regexp">/_macro/</span>sidebar.swig</span><br></pre></td></tr></table></figure><p><code>theme.signature</code> 修改为 <code>config.description</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"site-description motion-element"</span> <span class="attr">itemprop</span>=<span class="string">"description"</span>&gt;</span>&#123;&#123; config.description &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>SEO: Search engine optimization 搜索引擎优化</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有问题建议先看&lt;a href=&quot;https://theme-next.iissnan.com/faqs.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;，和 &lt;a href=&quot;https://github.com/iissnan/hexo-theme-next/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、样式修改&quot;&gt;&lt;a href=&quot;#一、样式修改&quot; class=&quot;headerlink&quot; title=&quot;一、样式修改&quot;&gt;&lt;/a&gt;一、样式修改&lt;/h2&gt;&lt;p&gt;注意：重新部署后，样式若没更新，清除浏览器缓存&lt;/p&gt;
&lt;h3 id=&quot;分类横向展示&quot;&gt;&lt;a href=&quot;#分类横向展示&quot; class=&quot;headerlink&quot; title=&quot;分类横向展示&quot;&gt;&lt;/a&gt;分类横向展示&lt;/h3&gt;&lt;p&gt;&lt;code&gt;themes\next\source\css\_common\component\pages\categories.styl&lt;/code&gt; 中修改：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.category-list-item&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  display: inline-block; // 新增&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display: inline-block&lt;/code&gt;：可以不换行，让其他元素元素显示在旁边；并且可以设置高度。&lt;a href=&quot;https://www.w3schools.com/css/css_inline-block.asp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;w3schools: CSS Layout - display: inline-block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://depp.wang/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://depp.wang/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://depp.wang/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Actions 实现 Hexo 博客自动部署</title>
    <link href="https://depp.wang/2020/02/17/use-github-actions-to-achieve-hexo-blog-auto-deploy/"/>
    <id>https://depp.wang/2020/02/17/use-github-actions-to-achieve-hexo-blog-auto-deploy/</id>
    <published>2020-02-17T13:26:55.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-17-084920.png" alt="Image result for image Hexo"></p><h2 id="一、Hexo-相关知识点"><a href="#一、Hexo-相关知识点" class="headerlink" title="一、Hexo 相关知识点"></a>一、Hexo 相关知识点</h2><p>静态博客简单，但是发布博文时稍显麻烦，一般需要下面两步：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d // 相当于 hexo g + hexo d</span><br></pre></td></tr></table></figure><p>如果考虑到同步源文件，还需要每次更改后，将源文件 push 到指定仓库：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><a id="more"></a><p>我们可以将 Hexo 文件分为两类，一类是源文件，即下面这些文件：</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>一类是 public 文件，即网站文件：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line">├── <span class="number">2020</span></span><br><span class="line">├── categories</span><br><span class="line">├── tags</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>发布博文的这三个操作代表：</p><ul><li>hexo clean：删除网站（public）文件</li><li>hexo g：生成网站（public）文件</li><li>hexo d：将本地网站（public）文件同步到指定仓库（如：yourname.github.io）中</li></ul><p>我使用一个私有仓库存放 Hexo 源文件，在 deppwang/deppwang.github.io 中存放网站文件。所以每次发布或者更新博文时，需要使用 push 操作更新源文件，再执行 <code>hexo clean</code>、<code>hexo g -d</code> 更新博客，比较麻烦。</p><p>所以我们希望能在 push 源文件后，由 <a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener">CI/CD</a>（持续集成 / 持续部署）工具为我们执行  <code>hexo clean</code>、<code>hexo g -d</code> 这两个操作。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-15-105934.png" alt="Image result for github action"></p><h2 id="二、GitHub-Actions"><a href="#二、GitHub-Actions" class="headerlink" title="二、GitHub Actions"></a>二、GitHub Actions</h2><p>CI/CD 工具前有 Travis CI，现有 GitHub Actions，这里使用 GitHub Actions。</p><p>GitHub Actions 的工作原理：我们提前设置好需要自动化执行的任务，GitHub Actions 监控当前仓库的某一个操作（如：push），一旦有此操作，就自动化执行这些任务。</p><p>所以我们希望使用 GitHub Actions 后，只需要往源文件仓库 push 更新源文件，GitHub Actions 监控到 push 操作时，就自动化执行  <code>hexo clean</code>、<code>hexo g -d</code>  操作，完成博文发布。</p><p>Action 存放在项目根目录的 <code>.github/workflows</code> 下，后缀为 <code>.yml</code>。一个 Action 相当于一个工作流 workflow，一个工作流可以有多个任务 job，每个任务可以分为几步 step。任务、步骤依次执行。</p><p>每个 Action 是一个独立脚本，所以可以作为代码仓库。</p><ul><li><code>actions/setup-node</code> 就表示 <code>github.com/actions/setup-node</code> 这个 <a href="https://github.com/actions/setup-node" target="_blank" rel="noopener">仓库</a>，代表安装 node.js。Action 为 action.yml </li></ul><p>可以通过下面这种格式来使用别人写好的 action，@借用了指针的概念：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">actions/setup-<span class="keyword">node</span><span class="title">@74bc508</span> <span class="comment"># 指向一个 commit</span></span><br><span class="line">actions/setup-<span class="keyword">node</span><span class="title">@v1</span>.<span class="number">0</span>    <span class="comment"># 指向一个标签</span></span><br><span class="line">actions/setup-<span class="keyword">node</span><span class="title">@master</span>  <span class="comment"># 指向一个分支</span></span><br></pre></td></tr></table></figure><p>关于 GitHub Actions 更多知识，请看 <a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">GitHub Actions 入门教程 - 阮一峰</a>。</p><p>现在需要实现一个 Action，使其能够执行  <code>hexo clean</code>、<code>hexo g -d</code>  操作。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-17-115214.png" alt="Image result for hexo action"></p><h2 id="三、Hexo-Action"><a href="#三、Hexo-Action" class="headerlink" title="三、Hexo Action"></a>三、Hexo Action</h2><p>我是使用的 <a href="https://github.com/sma11black/" target="_blank" rel="noopener">sma11black</a> 已经开发好的 <a href="https://github.com/DeppWang/hexo-action" target="_blank" rel="noopener">Hexo Action</a>，这个 Action <strong>针对的是存放 Hexo 源文件和网站文件分开存放的场景</strong>。请先看 <a href="https://github.com/marketplace/actions/hexo-action" target="_blank" rel="noopener">教程</a>，以下为教程的补充。</p><p>非第一次生成 SSH Key：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa_x -C "yourmail@xxx.com"</span><br></pre></td></tr></table></figure><p>将生成的 <code>private key</code> 作为 Hexo 源文件仓库 <code>Settings &gt; Secrets</code> 的 一个名叫 <code>DEPLOY_KEY</code> 的 <code>Secret</code>。注意：需要复制包括 <code>-----BEGIN OPENSSH PRIVATE KEY-----</code> 和 <code>-----END OPENSSH PRIVATE KEY-----</code> 的整个内容。Secret 相当于一个变量，可以使私有变量不公开。</p><p>将生成的 <code>public key</code> 作为网站文件仓库 <code>Settings &gt; Deploy Keys</code> 的 Deploy Key。Deploy Keys 中的公钥针对于当前仓库。</p><p>为什么要用 SSH Key？</p><ul><li><p>SSH Key，是一对密匙：公钥 + 私钥，用于加密本地仓库和远程仓库的传输内容。</p><blockquote><p>在 RSA 加密算法中，公钥用于对数据进行加密，私钥用于对数据进行解密<br>在 RSA 签名算法中，私钥用于对数据进行签名，公钥用于对签名进行验证。</p></blockquote><blockquote><p>pull 的时候公钥用于对数据进行加密，私钥用于对数据进行解密，<br>push 的时候私钥用于对数据进行签名，公钥用于对签名进行验证。</p></blockquote></li><li><p>使用 GitHub Actions 是借助 GitHub 提供的环境，跟本地环境一样，也需要有私钥。当 GitHub Action 执行 <code>hexo g -d</code> 时，是一个 push 的过程，用私钥 DEPLOY_KEY 签名，GitHub 用网站文件仓库的公钥 Deploy Key 进行验证。</p></li></ul><p>下面是具体的 action.yml：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># workflow name</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="string">[push]</span> <span class="comment"># 触发事件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span> <span class="comment"># job1 id</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 运行环境为最新版 Ubuntu</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">A</span> <span class="string">job</span> <span class="string">to</span> <span class="string">deploy</span> <span class="string">blog.</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Checkout</span> <span class="comment"># step1 获取 hexo 源码</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">actions/checkout@v1</span> <span class="comment"># 使用 actions/checkout@v1</span></span><br><span class="line"><span class="attr">      with:</span> <span class="comment"># 条件</span></span><br><span class="line"><span class="attr">        submodules:</span> <span class="literal">true</span> <span class="comment"># Checkout private submodules(themes or something else). 当有子模块时时，同步子模块</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.) 根据 package-lock.json 压缩缓存 node_modules，不用每次下载，使用时解压，可以加快工作流的执行过程，超过 7 天没有使用将删除压缩包。</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span> <span class="comment"># step2</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line"><span class="attr">      id:</span> <span class="string">cache</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span> <span class="comment"># 使用 Hexo 项目的 package-lock.json 安装、缓存 node_moudules</span></span><br><span class="line"><span class="attr">        restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          $<span class="template-variable">&#123;&#123; runner.os &#125;&#125;</span>-node-</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string"></span><span class="attr">    - name:</span> <span class="string">Install</span> <span class="string">Dependencies</span> <span class="comment"># step3</span></span><br><span class="line"><span class="attr">      if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="string">!=</span> <span class="string">'true'</span> <span class="comment"># 如果没有缓存 node_modules</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 根据 package.json 在 node_modules 下载相关包（依赖）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Deploy hexo blog website.</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Deploy</span> <span class="comment"># step4</span></span><br><span class="line"><span class="attr">      id:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">deppwang/hexo-action@v1.0.0</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span> </span><br><span class="line"><span class="attr">        user_name:</span> <span class="string">your</span> <span class="string">github</span> <span class="string">username</span> <span class="comment"># 自定义</span></span><br><span class="line"><span class="attr">        user_email:</span> <span class="string">your</span> <span class="string">github</span> <span class="string">useremail</span> <span class="comment"># 自定义</span></span><br></pre></td></tr></table></figure><h2 id="四、运行过程"><a href="#四、运行过程" class="headerlink" title="四、运行过程"></a>四、运行过程</h2><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-24-135152.png" alt=""></p><h3 id="1、-Build-deppwang-hexo-action-master（新建-hexo-action-Docker-容器）"><a href="#1、-Build-deppwang-hexo-action-master（新建-hexo-action-Docker-容器）" class="headerlink" title="1、 Build deppwang/hexo-action@master（新建 hexo-action Docker 容器）"></a>1、 Build deppwang/hexo-action@master（新建 hexo-action Docker 容器）</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## action.yml</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">runs:</span></span><br><span class="line"><span class="attr">  using:</span> <span class="string">'docker'</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">'Dockerfile'</span></span><br><span class="line"><span class="attr">  args:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">$&#123;&#123;</span> <span class="string">inputs.user_name</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">$&#123;&#123;</span> <span class="string">inputs.user_email</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">$&#123;&#123;</span> <span class="string">inputs.deploy_key</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Dockerfile</span></span></span><br><span class="line">FROM node:13-alpine  # node:13-alpine 是一个 Dockerfile</span><br><span class="line"></span><br><span class="line">LABEL version="1.0.0"</span><br><span class="line">LABEL repository="https://github.com/sma11black/hexo-action"</span><br><span class="line">LABEL homepage="https://sma11black.github.io"</span><br><span class="line">LABEL maintainer="sma11black &lt;smallblack@outlook.com&gt;"</span><br><span class="line"></span><br><span class="line">RUN apk add --no-cache git # 安装 Git</span><br><span class="line">RUN apk add --no-cache openssh # 安装 openssh</span><br><span class="line"></span><br><span class="line">COPY entrypoint.sh /entrypoint.sh</span><br><span class="line">RUN chmod +x /entrypoint.sh</span><br><span class="line"></span><br><span class="line">ENTRYPOINT ["/entrypoint.sh"]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Run Log</span></span></span><br><span class="line">Build container for action use: '/home/runner/work/_actions/sma11black/hexo-action/v1.0.0/Dockerfile'.</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Step 1/10 : FROM node:13-alpine</span><br><span class="line">...</span><br><span class="line">Status: Downloaded newer image for node:13-alpine</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="2、Check-Out（下载代码存放在容器中）"><a href="#2、Check-Out（下载代码存放在容器中）" class="headerlink" title="2、Check Out（下载代码存放在容器中）"></a>2、Check Out（下载代码存放在容器中）</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">Checkout</span> <span class="comment"># step1 获取 hexo 网站源码</span></span><br><span class="line"><span class="attr">  uses:</span> <span class="string">actions/checkout@v1</span> <span class="comment"># 使用 actions/checkout@v1</span></span><br><span class="line"><span class="attr">  with:</span> <span class="comment"># 条件</span></span><br><span class="line"><span class="attr">    submodules:</span> <span class="literal">true</span> <span class="comment"># Checkout private submodules(themes or something else). 当有子模块时切换分支？</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Run Log</span></span></span><br><span class="line">...</span><br><span class="line">git init "/home/runner/work/HexoBlog/HexoBlog"</span><br><span class="line">Initialized empty Git repository in /home/runner/work/HexoBlog/HexoBlog/.git/ # Hexo 项目位置</span><br><span class="line">....</span><br><span class="line">Resolving deltas: 100% (1226/1226), done.</span><br><span class="line">From https://github.com/DeppWang/HexoBlog</span><br><span class="line"> * [new branch]      master     -&gt; origin/master</span><br><span class="line">git checkout --progress --force da857124acdb52ed76426dccf6309c2944d8be86</span><br><span class="line">Note: switching to 'da857124acdb52ed76426dccf6309c2944d8be86'.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3、Cache-node-modules（解压-node-modules-压缩包）"><a href="#3、Cache-node-modules（解压-node-modules-压缩包）" class="headerlink" title="3、Cache node modules（解压 node_modules 压缩包）"></a>3、Cache node modules（解压 node_modules 压缩包）</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.) 根据 package-lock.json 压缩缓存 node_modules，不用每次下载，使用时解压，可以加快工作流的执行过程，超过 7 天没有使用将删除压缩包。</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span> <span class="comment"># step2</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line"><span class="attr">      id:</span> <span class="string">cache</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span> <span class="comment"># 使用 Hexo 项目的 package-lock.json 安装、缓存 node_moudules</span></span><br><span class="line"><span class="attr">        restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          $<span class="template-variable">&#123;&#123; runner.os &#125;&#125;</span>-node-</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Run Log</span></span></span><br><span class="line">...</span><br><span class="line">Cache Size: ~9 MB (8961261 B)</span><br><span class="line">/bin/tar -xz -f /home/runner/work/_temp/e7af5c7e-5251-4125-8eea-dbd9f8574796/cache.tgz -C /home/runner/work/HexoBlog/HexoBlog/node_modules # 将 cache.tgz 解压为 node_modules。-C, --directory=DIR change to directory DIR</span><br><span class="line">Cache restored from key: Linux-node-85c3344f19ab8bd53e79be4d334a61c6c60f0730b275ad9bcbe1c9bc06076575</span><br></pre></td></tr></table></figure><h3 id="4、-Install-Dependencies（如有必要，更新-node-modules）"><a href="#4、-Install-Dependencies（如有必要，更新-node-modules）" class="headerlink" title="4、 Install Dependencies（如有必要，更新 node_modules）"></a>4、 Install Dependencies（如有必要，更新 node_modules）</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">Install</span> <span class="string">Dependencies</span> <span class="comment"># step3</span></span><br><span class="line"><span class="attr">  if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="string">!=</span> <span class="string">'true'</span> <span class="comment"># 如果没有缓存 node_modules</span></span><br><span class="line"><span class="attr">  run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 根据 package.json 在 node_modules 下载相关包（依赖）</span></span><br></pre></td></tr></table></figure><h3 id="5、Deploy（生成、发布博文）"><a href="#5、Deploy（生成、发布博文）" class="headerlink" title="5、Deploy（生成、发布博文）"></a>5、Deploy（生成、发布博文）</h3><ul><li>hexo g 生成 public 网站静态文件</li><li>hexo d 将静态文件 push 到指定仓库（会强制覆盖原文件，如何不覆盖源文件呢？）</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">Deploy</span> <span class="comment"># step4</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">  uses:</span> <span class="string">sma11black/hexo-action@v1.0.0</span></span><br><span class="line"><span class="attr">  with:</span></span><br><span class="line"><span class="attr">    deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span> </span><br><span class="line"><span class="attr">    user_name:</span> <span class="string">your</span> <span class="string">github</span> <span class="string">username</span> <span class="comment"># 自定义</span></span><br><span class="line"><span class="attr">    user_email:</span> <span class="string">your</span> <span class="string">github</span> <span class="string">useremail</span> <span class="comment"># 自定义</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> setup ssh-private-key</span></span><br><span class="line">mkdir -p /root/.ssh/</span><br><span class="line">echo "$INPUT_DEPLOY_KEY" &gt; /root/.ssh/id_rsa</span><br><span class="line">chmod 600 /root/.ssh/id_rsa</span><br><span class="line">ssh-keyscan -t rsa github.com &gt;&gt; /root/.ssh/known_hosts</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> setup deploy git account</span></span><br><span class="line">git config --global user.name "$INPUT_USER_NAME"</span><br><span class="line">git config --global user.email "$INPUT_USER_EMAIL"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install hexo env</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> deployment</span></span><br><span class="line">hexo g -d</span><br><span class="line"></span><br><span class="line">echo ::set-output name=notify::"Deploy complate."</span><br><span class="line">© 2020 GitHub, Inc.</span><br></pre></td></tr></table></figure><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-17-115552.jpg" alt="Image result for error"></p><h2 id="五、可能出现的问题：Deploy-失败"><a href="#五、可能出现的问题：Deploy-失败" class="headerlink" title="五、可能出现的问题：Deploy 失败"></a>五、可能出现的问题：Deploy 失败</h2><p>可能出现以下 3 三种情况：</p><p><strong>1、</strong></p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-15-140504.png" alt="image-20200215220503185"></p><p>重点：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host key verification failed</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure><p>原因：<code>站点配置文件</code> 配置项 deploy 存在出 GitHub 以外的仓库 — 如：Coding ，而 Hexo-Action 不能识别此仓库</p><p>解决方式：</p><ol><li>要么去除 GitHub 以外的仓库；</li><li>要么 *<em>entrypoint.sh *</em> 添加 <code>ssh-keyscan -t rsa e.coding.net &gt;&gt; /root/.ssh/known_hosts</code></li></ol><p><strong>2、</strong></p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-15-140636.png" alt="image-20200215220635619"></p><p>重点：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Load key "/root/ssh/id_rsa": invalid format</span><br><span class="line">git@github.com: Permission denied (publickey)</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure><p>原因：SSH Key 的公钥和私钥没有正确复制，或者设置错误</p><p>解决方式：正确且完整的复制并设置</p><p><strong>3、</strong></p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-16-103927.png" alt="image-20200216183926423"></p><p>重点：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR Local hexo not found in /github/workspace</span><br><span class="line">ERROR Try running: 'npm install hexo --save'</span><br></pre></td></tr></table></figure><p>原因：<code>hexo-deployer-git</code> 的版本过低，导致删除了 hexo 包。</p><p>解决方式：</p><ol><li>参考 <a href="https://github.com/sma11black/hexo-action/issues/1" target="_blank" rel="noopener">此 issue</a> 升级 <code>hexo-deployer-git</code></li><li>使用 <code>deppwang/hexo-aciton@v1.0.1</code> 重装，他重新安装了 hexo 包</li></ol><h2 id="六、解决-github-io-丢失-commit-记录"><a href="#六、解决-github-io-丢失-commit-记录" class="headerlink" title="六、解决 **.github.io 丢失 commit 记录"></a>六、解决 **.github.io 丢失 commit 记录</h2><p><code>hexo d</code> 其实分为 3 步：</p><ol><li>将 public 文件复制到 .deploy_git</li><li>commit</li><li>push 到远程仓库</li></ol><p>执行 hexo d 命令时，如果没有 .doploy_git 文件，它将新建一个 .deploy_git 文件，所以旧的 commit 记录将丢失。</p><p>可以在 entrypoint.sh 中添加一行命令来解决这个问题：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/username/username.github.io.git .deploy_git</span><br></pre></td></tr></table></figure><h2 id="七、参考"><a href="#七、参考" class="headerlink" title="七、参考"></a>七、参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">GitHub Actions 入门教程 - 阮一峰</a></li><li><a href="https://github.com/marketplace/actions/hexo-action" target="_blank" rel="noopener">Hexo Action</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-17-084920.png&quot; alt=&quot;Image result for image Hexo&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Hexo-相关知识点&quot;&gt;&lt;a href=&quot;#一、Hexo-相关知识点&quot; class=&quot;headerlink&quot; title=&quot;一、Hexo 相关知识点&quot;&gt;&lt;/a&gt;一、Hexo 相关知识点&lt;/h2&gt;&lt;p&gt;静态博客简单，但是发布博文时稍显麻烦，一般需要下面两步：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo g -d // 相当于 hexo g + hexo d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果考虑到同步源文件，还需要每次更改后，将源文件 push 到指定仓库：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://depp.wang/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://depp.wang/tags/Hexo/"/>
    
      <category term="GitHub Actions" scheme="https://depp.wang/tags/GitHub-Actions/"/>
    
  </entry>
  
  <entry>
    <title>Java 的几种运算符</title>
    <link href="https://depp.wang/2020/01/11/java-operator/"/>
    <id>https://depp.wang/2020/01/11/java-operator/</id>
    <published>2020-01-11T17:58:35.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、原码、反码、补码"><a href="#一、原码、反码、补码" class="headerlink" title="一、原码、反码、补码"></a>一、原码、反码、补码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  用二进制表示                <span class="number">00000001</span></span><br><span class="line"><span class="number">-1</span> 如果只变符号位（原码）        <span class="number">10000001</span></span><br><span class="line">那么 <span class="number">1</span> + <span class="number">-1</span> =                 <span class="number">10000010</span> = <span class="number">-2</span></span><br><span class="line"><span class="number">-1</span> 的反码                     <span class="number">11111110</span>       除去符号位，整体翻转</span><br><span class="line"><span class="number">-1</span> 的补码（反码加 <span class="number">1</span>）           <span class="number">11111111</span> 补码  也等于  <span class="number">0</span> - <span class="number">1</span> 的原（补）码</span><br><span class="line"><span class="number">1</span>  的补码 + <span class="number">-1</span> 的补码          <span class="number">10000000</span> = <span class="number">0</span>， 溢出 <span class="number">1</span> 位</span><br></pre></td></tr></table></figure><a id="more"></a><p>int 为 4 个字节，32 位，1 位作为符号位，表示大小的有 31 位</p><p>为了方便运算，Java 整数二进制<strong>默认使用补码表示</strong>，<strong>正数和 0 的补码不变，负数的补码为反码加 1</strong></p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>:        <span class="number">00000000000000000000000000000000</span>  <span class="number">32</span>个<span class="number">0</span></span><br><span class="line"><span class="number">2</span>^<span class="number">32</span><span class="number">-1</span>:   <span class="number">01111111111111111111111111111111</span>  <span class="number">0</span> + <span class="number">31</span>个<span class="number">1</span></span><br><span class="line"><span class="number">-2</span>^<span class="number">31</span>:    <span class="number">10000000000000000000000000000000</span>  <span class="number">1</span> + <span class="number">31</span>个<span class="number">0</span></span><br><span class="line"><span class="number">-2</span>^<span class="number">31</span>+<span class="number">1</span>:  <span class="number">10000000000000000000000000000001</span>  <span class="number">1</span> + <span class="number">30</span>个<span class="number">0</span> + <span class="number">1</span></span><br><span class="line"><span class="number">-1</span>:       <span class="number">11111111111111111111111111111111</span>  <span class="number">32</span>个<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = Integer.toBinaryString(<span class="number">0x80000000</span>); <span class="comment">// 0x80000000: -2^31</span></span><br></pre></td></tr></table></figure><ul><li>1111 = 15 = <code>1*2^3 + 1*2^2 + 1*2^1 + 1*2^0</code>，0001 为 1，等于 2^0</li></ul><h2 id="二、移位运算符"><a href="#二、移位运算符" class="headerlink" title="二、移位运算符"></a>二、移位运算符</h2><h3 id="lt-lt-左移运算符"><a href="#lt-lt-左移运算符" class="headerlink" title="&lt;&lt;  : 左移运算符"></a><code>&lt;&lt;</code>  : 左移运算符</h3><p><code>num &lt;&lt; 1</code>，num 转换为二进制，长度固定，丢弃最左边指定位数，1 位，整体向左移动 1 位，后面补 0。</p><p>以 int 类型为例，4 个字节，32 位，表示 -2^31 ~ 2^31 - 1，<code>10000000000000000000000000000000</code> ~ <code>01111111111111111111111111111111</code>，最左位是符号位，当小于 2^31 - 1 时，最左边都是 0，所以 0 代表为正数，1 代表为负数。</p><p>当 num 为正数，且没有达到最大值时，即左边的 0 够多时，<code>num &lt;&lt; 1</code> 相当于二进制每一位转十进制时在原来基础上再乘以 2，相当于 num 乘以 2。达到最大值后，正数可能变负数。</p><h3 id="gt-gt-右移运算符"><a href="#gt-gt-右移运算符" class="headerlink" title="&gt;&gt; : 右移运算符"></a><code>&gt;&gt;</code> : 右移运算符</h3><p><code>num &gt;&gt; 1</code>，num 转换为二进制，丢弃最右边指定位数，1 位，整体向右移动 1 位，后面补符号位，如果 num 为正数，补 0，如果为负数，补 1。</p><p>当 num 为正数时，<code>num &gt;&gt; 1</code> 相当于 num 除以 2 取整（/）。</p><p>int 类型 4 字节，正数右移 31 位变为 0，右移 32  位相当于不移位，当大于 32 位时，先求余，再移位。long 类型 64 位取余。</p><h3 id="gt-gt-gt-无符号右移运算符"><a href="#gt-gt-gt-无符号右移运算符" class="headerlink" title="&gt;&gt;&gt; : 无符号右移运算符"></a><code>&gt;&gt;&gt;</code> : 无符号右移运算符</h3><p>丢弃最右边指定位数，整体右移指定位，忽略符号位，后面空位都以 0 补齐。</p><p>因为左边没有符号，所以没有无符号左移。或者说，左移运算符就是无符号左移。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> intValue = <span class="number">733183670</span>;</span><br><span class="line">    <span class="keyword">int</span> intValue2 = -<span class="number">733183670</span>;</span><br><span class="line">    System.out.println(intValue + <span class="string">" 左移 1 位："</span> + (intValue &lt;&lt; <span class="number">1</span>)); <span class="comment">// 1466367340</span></span><br><span class="line">    System.out.println(intValue2 + <span class="string">" 左移 1 位："</span> + (intValue2 &lt;&lt; <span class="number">1</span>)); <span class="comment">// -1466367340</span></span><br><span class="line">    System.out.println(intValue + <span class="string">" 右移 8 位："</span> + (intValue &gt;&gt; <span class="number">8</span>)); <span class="comment">// 2863998 (733183670/256)</span></span><br><span class="line">    System.out.println(intValue2 + <span class="string">" 右移 8 位："</span> + (intValue2 &gt;&gt; <span class="number">8</span>)); <span class="comment">// -2863999</span></span><br><span class="line">    <span class="comment">// 无符号右移，将数据变小，且最终为正数</span></span><br><span class="line">    System.out.println(intValue + <span class="string">" 无符号右移 8 位："</span> + (intValue &gt;&gt;&gt; <span class="number">8</span>)); <span class="comment">// 2863998</span></span><br><span class="line">    System.out.println(intValue2 + <span class="string">" 无符号右移 8 位："</span> + (intValue2 &gt;&gt;&gt; <span class="number">8</span>)); <span class="comment">// 13913217</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>733183670 &lt;&lt; 1</code>，左移 1 位：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-02-16-131127.png" alt="图片来自知乎"></p><p><code>-733183670 &gt;&gt; 8</code>，右移 8 位：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-05-04-145501.png" alt="图片来自知乎"></p><p><code>-733183670 &gt;&gt;&gt; 8</code>，无符号右移 8 位：</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-05-04-145507.png" alt="图片来自知乎"></p><h2 id="三、位运算符"><a href="#三、位运算符" class="headerlink" title="三、位运算符"></a>三、位运算符</h2><ul><li>先转换为二进制后再运算</li><li><code>&amp;</code> 按位与：<code>1&amp;1==1</code> / <code>1&amp;0==0</code> / <code>0&amp;0==0</code>，都为 1，则为 1，否则为 0</li><li><code>|</code> 按位或：<code>1|1==1</code> / <code>1|0==1</code> / <code>0|0==0</code>，有一个为 1，则为 1，否则 为 0</li><li><code>~</code> 按位非：<code>~1==0</code> / <code>~0==1</code>, 单位为 bit，整数类型的话：<code>~1==-2</code> –&gt;<code>~0b00000000000000000000000000000001==0b11111111111111111111111111111110</code></li><li><code>^</code>: 异或运算符  <code>1^1==0</code> / <code>1^0==1</code> / <code>0^0==0</code>，相同为 0，不同为 、1</li></ul><h2 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、逻辑运算符</h2><ul><li><code>&amp;&amp;</code> 逻辑与：当左边表达式为 false 时，不再计算，直接为 false。规则跟 <code>&amp;</code> 一致</li><li><code>||</code> 逻辑或：当左边表达式为 true 时，不再计算，直接为 true。规则跟 <code>|</code> 一致</li></ul><h2 id="五、延伸阅读"><a href="#五、延伸阅读" class="headerlink" title="五、延伸阅读"></a>五、延伸阅读</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/30108890" target="_blank" rel="noopener">Java中的移位运算符</a></li><li><a href="https://www.jianshu.com/p/8cf5af30f245" target="_blank" rel="noopener">Java &amp;、&amp;&amp;、|、||、^、&lt;&lt;、&gt;&gt;、~、&gt;&gt;&gt;等运算符</a></li><li><a href="https://www.ruanyifeng.com/blog/2009/08/twos_complement.html" target="_blank" rel="noopener">关于 2 的补码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、原码、反码、补码&quot;&gt;&lt;a href=&quot;#一、原码、反码、补码&quot; class=&quot;headerlink&quot; title=&quot;一、原码、反码、补码&quot;&gt;&lt;/a&gt;一、原码、反码、补码&lt;/h2&gt;&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  用二进制表示                &lt;span class=&quot;number&quot;&gt;00000001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; 如果只变符号位（原码）        &lt;span class=&quot;number&quot;&gt;10000001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那么 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; =                 &lt;span class=&quot;number&quot;&gt;10000010&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; 的反码                     &lt;span class=&quot;number&quot;&gt;11111110&lt;/span&gt;       除去符号位，整体翻转&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; 的补码（反码加 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;）           &lt;span class=&quot;number&quot;&gt;11111111&lt;/span&gt; 补码  也等于  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 的原（补）码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  的补码 + &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; 的补码          &lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;， 溢出 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 位&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="https://depp.wang/categories/Java/"/>
    
    
      <category term="运算符 Operator" scheme="https://depp.wang/tags/%E8%BF%90%E7%AE%97%E7%AC%A6-Operator/"/>
    
  </entry>
  
  <entry>
    <title>2019 年买过哪些值得推荐的物品？</title>
    <link href="https://depp.wang/2020/01/03/which-recommended-items-bought-in-2019/"/>
    <id>https://depp.wang/2020/01/03/which-recommended-items-bought-in-2019/</id>
    <published>2020-01-03T14:25:08.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<p>阅读提醒，这篇文章不是技术干货。</p><p>因为前些天京东买了个免打孔单杠，用起来感觉很不错，足不出户（你知道北京室外冬天有多冷<code>^_^</code>）就能来几个引体向上，生活（身体）多了些活力。想着正好 2020 年了，你说做个总结吧，2019 年又没什么成绩，东西倒买了不少，除了单杠好像还有几个值得推荐的东西，那一块推荐一下吧，遂成了这篇软文。</p><p>我发现我买东西很怕挑选，感觉很费时间，希望能快速下单，往往最后直接买了销量最好的那个，不知道有没有小伙伴跟我一样。喜欢刷小红书的女生，大多数也是希望看看别人有什么推荐吧。</p><p><strong>温馨提醒</strong>：在京东、淘宝购买电子产品或者价格较高的商品，可以通过 <a href="http://asd-price.com/" target="_blank" rel="noopener">http://asd-price.com/</a> 查看一下商品的历史价格。</p><a id="more"></a><p>再次申明一下哈，下面不是打广告，不是打广告，关注不多，没人找我打广告 。。。</p><h2 id="个人提升"><a href="#个人提升" class="headerlink" title="个人提升"></a>个人提升</h2><h3 id="李宁室内免打孔单杠"><a href="#李宁室内免打孔单杠" class="headerlink" title="李宁室内免打孔单杠"></a>李宁室内免打孔单杠</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-03-024348.jpg" alt=""></p><p>单杠优点是免打孔，对墙面基本没有伤害（可以垫两张纸），没有发生过脱落，挺安全。</p><ul><li><a href="https://item.jd.com/100005078689.html" target="_blank" rel="noopener">京东链接</a>，入手价：194</li></ul><h3 id="Kindle-paperwhite-4-代-8-G"><a href="#Kindle-paperwhite-4-代-8-G" class="headerlink" title="Kindle paperwhite 4 代 8 G"></a>Kindle paperwhite 4 代 8 G</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-132230.jpg" alt=""></p><p>买它主要是想睡前看书，虽然手机也能看，但没这个专注，熄灯后用黑暗模式挺好。平时零碎时间也可以用，如果兜够大的话，直接揣兜更好。可以配合一个翻盖皮套，避免刮花。</p><p>可以在 <a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">鸠摩搜书</a> 搜索免费书籍，推荐 <a href="https://pan.baidu.com/s/12fBAZ" target="_blank" rel="noopener">人类简史</a>。</p><p>京东平时：998，双十一和 619 一般 898，我是转转在买了二手全新，820。</p><ul><li><a href="https://item.jd.com/100000667370.html" target="_blank" rel="noopener">京东链接</a>，转转价：820</li></ul><h3 id="Suavecito-骷髅发油"><a href="#Suavecito-骷髅发油" class="headerlink" title="Suavecito 骷髅发油"></a>Suavecito 骷髅发油</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-131003.jpg" alt="img" style="zoom:50%;"></p><p>虽然人长得一般，但发型不能乱。淘宝这款发油，使用一段时间了，应该是正品。主要用于油头，但每次弄少点，定型也挺好，主要优点是好洗。</p><ul><li><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.10982e8dWUoV2y&id=41149726970&_u=2rh8cg8348b" target="_blank" rel="noopener">淘宝链接</a>，入手价：103</li></ul><h2 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h2><h3 id="统一开小灶自热土豆牛腩饭"><a href="#统一开小灶自热土豆牛腩饭" class="headerlink" title="统一开小灶自热土豆牛腩饭"></a>统一开小灶自热土豆牛腩饭</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-141438.jpg" alt=""></p><p>马上又要一年一度的大迁移了，这款是火车食物链的顶级存在，统一方便面不好吃，这个倒挺好吃</p><ul><li><a href="https://item.jd.com/100001449314.html" target="_blank" rel="noopener">京东链接</a>：入手价：43.5（2 盒）</li></ul><h3 id="拉面说重庆麻辣肉酱小面"><a href="#拉面说重庆麻辣肉酱小面" class="headerlink" title="拉面说重庆麻辣肉酱小面"></a>拉面说重庆麻辣肉酱小面</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-141055.jpg" alt=""></p><p>这个还是我看 <a href="https://www.bilibili.com/video/av80809511" target="_blank" rel="noopener">司徒视频</a> 发现的，买回来尝了一下，非常辣，按 13 均价来评价的话，还行。</p><ul><li><a href="https://item.jd.com/62789652518.html" target="_blank" rel="noopener">京东链接</a>：入手价：39.9（3 盒）</li></ul><h2 id="纸质书"><a href="#纸质书" class="headerlink" title="纸质书"></a>纸质书</h2><p>好书还是需要纸质书反复翻阅，买书最好等着有活动再买。</p><h3 id="深入理解-Java-虚拟机"><a href="#深入理解-Java-虚拟机" class="headerlink" title="深入理解 Java 虚拟机"></a>深入理解 Java 虚拟机</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-144526.jpg" alt=""></p><p>面试喜欢问的类加载、垃圾回收、调优，里面都有，最后两章，并发也讲得很好。</p><ul><li><a href="https://item.jd.com/11252778.html" target="_blank" rel="noopener">京东链接</a></li></ul><h3 id="高性能-MySQL"><a href="#高性能-MySQL" class="headerlink" title="高性能 MySQL"></a>高性能 MySQL</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-144433.jpg" alt=""></p><p>如果你需要面试，看看这本书，索引、锁、MVVC、复制等等统统给你整明白。</p><ul><li><a href="https://item.jd.com/11220393.html" target="_blank" rel="noopener">京东链接</a></li></ul><p>其他如：Redis 开发与运维、Redis 设计与实现、Head First 设计模式、图解 HTTP、算法图解、码农翻身等也值得购买</p><h2 id="服装"><a href="#服装" class="headerlink" title="服装"></a>服装</h2><h3 id="90-分书包"><a href="#90-分书包" class="headerlink" title="90 分书包"></a>90 分书包</h3><p>作为程序员，这个书包给我的感觉就是，不像程序员背的！书包质感不错。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-22-143432.jpg" alt=""></p><ul><li><a href="https://www.xiaomiyoupin.com/detail?gid=890&spmref=YouPinPC.$SearchFilter$1.search_list.2.33739537" target="_blank" rel="noopener">有品链接</a>，入手价：179</li></ul><h3 id="安踏骚粉篮球鞋"><a href="#安踏骚粉篮球鞋" class="headerlink" title="安踏骚粉篮球鞋"></a>安踏骚粉篮球鞋</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-22-143836.png" alt="image-20200322223710409"></p><p>如果你也喜欢这个颜色，说明我们是同道中人 😝。这款官方已经没卖了，链接失效，喜欢的可以淘宝淘一下</p><h3 id="一款好看的男士秋裤"><a href="#一款好看的男士秋裤" class="headerlink" title="一款好看的男士秋裤"></a>一款好看的男士秋裤</h3><ul><li><a href="https://detail.tmall.com/item.htm?spm=a1z10.3-b.w4011-2653083061.49.717b43c1SFHQoX&id=601881979477&rn=16b9b6a334caabe20e7c7b7668e52d29&abbucket=11" target="_blank" rel="noopener">天猫链接</a></li></ul><h2 id="居家"><a href="#居家" class="headerlink" title="居家"></a>居家</h2><h3 id="免打孔挂钩"><a href="#免打孔挂钩" class="headerlink" title="免打孔挂钩"></a>免打孔挂钩</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-22-143827.png" alt="image-20200322223805701"></p><p>这挂钩太能挂了！粘性相当好，从来没掉过。节省空间，很方便，不用每次放衣柜</p><ul><li><a href="https://detail.tmall.com/item.htm?id=38645058899&spm=a1z09.2.0.0.10982e8dWUoV2y&_u=2rh8cg836ee" target="_blank" rel="noopener">天猫链接</a></li></ul><h3 id="网易严选四件套"><a href="#网易严选四件套" class="headerlink" title="网易严选四件套"></a>网易严选四件套</h3><h4 id="全棉条纹四件套"><a href="#全棉条纹四件套" class="headerlink" title="全棉条纹四件套"></a>全棉条纹四件套</h4><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-03-020603.png" alt="image-20200103100603090" style="zoom:50%;"><ul><li><a href="https://you.163.com/item/detail?id=1110003&_stat_area=15&_stat_referer=search&_stat_query=床单&_stat_count=20&_stat_searchversion=76" target="_blank" rel="noopener">购买链接</a>，入手价：差不多 250</li></ul><h4 id="全棉格子四件套"><a href="#全棉格子四件套" class="headerlink" title="全棉格子四件套"></a>全棉格子四件套</h4><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-03-042308.png" alt="image-20200103100732682" style="zoom:50%;"><ul><li><a href="https://you.163.com/item/detail?id=3822058&_stat_area=similar_8&_stat_referer=search&_stat_query=床单&_stat_count=12&_stat_searchversion=0.7" target="_blank" rel="noopener">购买链接</a>，入手价：255</li></ul><p>这两款四件套，是真全棉，非常厚实。很耐看</p><h3 id="隐私半透明玻璃膜"><a href="#隐私半透明玻璃膜" class="headerlink" title="隐私半透明玻璃膜"></a>隐私半透明玻璃膜</h3><ul><li><a href="https://detail.tmall.com/item.htm?id=41141158167&spm=a1z09.2.0.0.10982e8dyyl2ZV&_u=2rh8cg8945f" target="_blank" rel="noopener">天猫链接</a></li></ul><h3 id="3M-双面胶"><a href="#3M-双面胶" class="headerlink" title="3M 双面胶"></a>3M 双面胶</h3><ul><li><a href="https://detail.tmall.com/item.htm?id=40266373990&spm=a1z09.2.0.0.10982e8dyyl2ZV&_u=2rh8cg8de97" target="_blank" rel="noopener">天猫链接</a></li></ul><h2 id="电子设备相关"><a href="#电子设备相关" class="headerlink" title="电子设备相关"></a>电子设备相关</h2><h3 id="紫米苹果-18w-快充"><a href="#紫米苹果-18w-快充" class="headerlink" title="紫米苹果 18w 快充"></a>紫米苹果 18w 快充</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-134510.jpg" alt=""></p><p>你肯定知道这两个小物件在苹果官网的原价</p><ul><li><a href="https://detail.tmall.com/item.htm?id=593066459068&spm=a1z09.2.0.0.10982e8dWUoV2y&_u=2rh8cg829c0&skuId=4416301435729" target="_blank" rel="noopener">天猫链接</a></li></ul><h3 id="数据线整理卡扣"><a href="#数据线整理卡扣" class="headerlink" title="数据线整理卡扣"></a>数据线整理卡扣</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-134808.jpg" alt=""></p><p>「按住」无处安放的数据线</p><ul><li><a href="https://detail.tmall.com/item.htm?id=543704096025&spm=a1z09.2.0.0.10982e8dyyl2ZV&_u=2rh8cg8f391" target="_blank" rel="noopener">天猫链接</a></li></ul><h3 id="闪魔手机膜"><a href="#闪魔手机膜" class="headerlink" title="闪魔手机膜"></a>闪魔手机膜</h3><h4 id="闪魔-XR-全屏膜"><a href="#闪魔-XR-全屏膜" class="headerlink" title="闪魔 XR 全屏膜"></a>闪魔 XR 全屏膜</h4><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-03-22-143947.png" alt="image-20200322223946575"></p><p>两个优点：顶部就一个开孔，全屏覆盖。送的贴膜器很好用，基本上不会失败，人人都是贴膜师</p><ul><li><a href="https://detail.tmall.com/item.htm?id=560856092783&spm=a1z09.2.0.0.10982e8dWUoV2y&_u=2rh8cg8507f" target="_blank" rel="noopener">天猫链接</a></li></ul><h4 id="闪魔-OPPO-FindX-软膜"><a href="#闪魔-OPPO-FindX-软膜" class="headerlink" title="闪魔 OPPO FindX 软膜"></a>闪魔 OPPO FindX 软膜</h4><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-133839.jpg" alt=""></p><p>几乎跟出厂原装膜一模一样。题外话：感觉闪魔的膜都挺不错</p><ul><li><a href="https://detail.tmall.com/item.htm?id=575678608921&spm=a1z09.2.0.0.10982e8dWUoV2y&_u=2rh8cg83f32" target="_blank" rel="noopener">天猫链接</a></li></ul><h3 id="macOS-Pro-键盘膜"><a href="#macOS-Pro-键盘膜" class="headerlink" title="macOS Pro 键盘膜"></a>macOS Pro 键盘膜</h3><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-01-02-134203.jpg" alt=""></p><p>个人十分受不了直接触摸光滑键盘的感觉，这个膜有效缓解这一症状。用久了还发现一个优点，没有膜的常用按键会掉漆！</p><ul><li><a href="https://detail.tmall.com/item.htm?id=565302355120&spm=a1z09.2.0.0.10982e8dWUoV2y&_u=2rh8cg80655" target="_blank" rel="noopener">天猫链接</a></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>就购买服饰鞋包来说，我发现大多数人其实不是怕花钱，而是买不到自己喜欢的。不管刷小红书，还是看淘宝直播视频，我觉得有两个目的：一是看有哪些好看的，怎么搭好看；二是想知道在哪里能买到。而小红书负责带货，淘宝负责卖。</p><!--我们能欣赏出服饰鞋包好看不好看，但设计确实比较困难，就像拍电影和评论电影一样。大众化的产品太多，也很平庸，需要不断的挖掘（逛街、手机），好的产品相对价格又较高，--><p>如果某个品牌能持续推出好设计、又有点性价比的产品，应该不愁卖吧。</p><!--公众号关注人数不多，现在几乎所有都是因为我原来分享的「10 分钟教会你科 ke 学 xue 上 shang 网 wang」关注的，这篇文章因人投诉，被微信删了，如果还想了解的小伙伴，请看 [这里](https://github.com/DeppWang/Science-Online)-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读提醒，这篇文章不是技术干货。&lt;/p&gt;
&lt;p&gt;因为前些天京东买了个免打孔单杠，用起来感觉很不错，足不出户（你知道北京室外冬天有多冷&lt;code&gt;^_^&lt;/code&gt;）就能来几个引体向上，生活（身体）多了些活力。想着正好 2020 年了，你说做个总结吧，2019 年又没什么成绩，东西倒买了不少，除了单杠好像还有几个值得推荐的东西，那一块推荐一下吧，遂成了这篇软文。&lt;/p&gt;
&lt;p&gt;我发现我买东西很怕挑选，感觉很费时间，希望能快速下单，往往最后直接买了销量最好的那个，不知道有没有小伙伴跟我一样。喜欢刷小红书的女生，大多数也是希望看看别人有什么推荐吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;温馨提醒&lt;/strong&gt;：在京东、淘宝购买电子产品或者价格较高的商品，可以通过 &lt;a href=&quot;http://asd-price.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://asd-price.com/&lt;/a&gt; 查看一下商品的历史价格。&lt;/p&gt;
    
    </summary>
    
      <category term="Live" scheme="https://depp.wang/categories/Live/"/>
    
    
      <category term="推荐物品" scheme="https://depp.wang/tags/%E6%8E%A8%E8%8D%90%E7%89%A9%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>&lt;译&gt; Alfred 官网 的 Workflows 帮助</title>
    <link href="https://depp.wang/2019/11/10/translate-alfred-workflows-help/"/>
    <id>https://depp.wang/2019/11/10/translate-alfred-workflows-help/</id>
    <published>2019-11-10T14:25:08.000Z</published>
    <updated>2020-07-09T02:33:05.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻译 Alfred 官网 的 <a href="https://www.alfredapp.com/help/workflows/" target="_blank" rel="noopener">Workflows 帮助</a></p></blockquote><p>使用工作流（workflows）扩展 Alfred 并以自己的方式完成工作，通过工作流替代重复性操作或基于鼠标的操作，你将提高你的工作效率。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2019-12-19-135613.jpg" alt="To-Do List Example Workflow"></p><a id="more"></a><h2 id="概览：什么是工作流？"><a href="#概览：什么是工作流？" class="headerlink" title="概览：什么是工作流？"></a>概览：什么是工作流？</h2><p><em>工作流是 Alfred 可用的 <a href="https://www.alfredapp.com/powerpack/" target="_blank" rel="noopener">Powerpack</a> 功能的一部分。</em></p><p>你可以在 Alfred 的偏好设置中找到「Workflows」选项，查看以下内容，发现工作流如何能帮助你将重复性操作成为过去时，让你以一种你从来没有想到的方式更有效率的操作你的 Mac。</p><blockquote><p>提示: 双击工作流组件，每个组件在它的配置面板的左下角都有一个问号图标，单击可跳转至组件相关页面，以查找更多详细信息。</p></blockquote><p>想马上跳转？从内置 “Examples” 选项添加一些工作流，来看看你的第一个工作流是怎样工作的！:)</p><h2 id="工作流简介"><a href="#工作流简介" class="headerlink" title="工作流简介"></a>工作流简介</h2><ul><li><a href="#工作流组件类型">工作流组件类型</a></li><li><a href="#创建你的第一个工作流">创建你的第一个工作流</a></li><li><a href="#下载和发现工作流">下载和发现工作流</a></li><li><a href="#创建你自己的工作流">创建你自己的工作流</a></li></ul><h2 id="工作流组件类型"><a href="#工作流组件类型" class="headerlink" title="工作流组件类型"></a>工作流组件类型</h2><p>要查找特定组件的帮助，请点击下面组件链接，再在页面搜索。或者在  Alfred 偏好设置中点击组件设置左下角问号图标。</p><ul><li><a href="https://www.alfredapp.com/help/workflows/triggers/" target="_blank" rel="noopener">Triggers</a>（触发条件）：可以通过一个快捷键、另一个 Alfred 功能或者外部来源来激活 Alfred。</li><li><a href="https://www.alfredapp.com/help/workflows/inputs/" target="_blank" rel="noopener">Inputs</a>（输入）：基于关键字的组件，用于单独执行或者结合紧随的 {query} 执行。</li><li><a href="https://www.alfredapp.com/help/workflows/actions/" target="_blank" rel="noopener">Actions</a>（动作）：一个执行你工作流中大多数工作的组件，打开或者显示文件、网页搜索、运行脚本和执行命令。</li><li><a href="https://www.alfredapp.com/help/workflows/utilities/" target="_blank" rel="noopener">Utilities</a>（实用工具）：实用工具使你控制如何将组件连接到一起，以及如何将上一个组件输出的参数传递给下一个组件。</li><li><a href="https://www.alfredapp.com/help/workflows/outputs/" target="_blank" rel="noopener">Outputs</a>:（输出）：从你的工作流前面组件中收集信息，用于弹出通知中心消息，以大字体显示输出，复制到剪贴板或者运行一个包含工作流结果的脚本。</li></ul><h2 id="创建你的第一个工作流"><a href="#创建你的第一个工作流" class="headerlink" title="创建你的第一个工作流"></a>创建你的第一个工作流</h2><p>当你第一次切换到 Alfred 偏好设置中的「Workflows」选项时，左侧边栏没有活动的工作流，你可以从新增一个示例工作流开始。</p><p>单击侧边栏底部的 <code>+</code> ，你可以看见菜单里面有五个选项，依次是 Workflow Defaults（工作流默认值）、Getting Started（入门）、Examples（示例）、Templates（模板） 和 Blank Workflow（空工作流）。</p><p><strong>入门</strong> 和 <strong>示例</strong> 工作流是很好的路径去发现这些组件是做什么以及如何将它们连接到一起，Hotkeys（快捷键）和 Keywords（关键字）是较简单的两个例子。可以看看组件的 notes（注释），来理解组件之间如何相互作用。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2019-12-19-135614.jpg" alt="Getting Started 工作流"></p><p>已经内置的工作流程 Google 搜索建议和 Amazon 搜索建议对于查看在线结果很有用。</p><p><img src="https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2019-12-19-135616.jpg" alt="Google Suggest Workflow"></p><p>在每个新版本中，我们都添加了「入门」和「示例」工作流，所以可以经常查看内置工作流。</p><h2 id="下载和发现工作流"><a href="#下载和发现工作流" class="headerlink" title="下载和发现工作流"></a>下载和发现工作流</h2><p>现在你知道了怎样使用工作流，并了解了内置的 <strong>入门</strong> 和 <strong>示例</strong>，你还将发现 Alfred 同伴用户开发了许多出色的工作流。</p><p>我们已经 <a href="https://www.alfredapp.com/workflows/" target="_blank" rel="noopener">重点介绍了一些我们最喜欢的工作流</a>，你还可以通过下面途径找到数百种工作流：</p><ul><li>在 <a href="https://www.alfredapp.com/blog/" target="_blank" rel="noopener">Alfred 博客</a> 中</li><li>在 <a href="https://alfredforum.com/" target="_blank" rel="noopener">Alfred 社区 </a>中，你可以为自己工作流寻找帮助</li><li>在 <a href="http://packal.org/" target="_blank" rel="noopener">Packal</a> 中，一个用户创建的网站，用于处理 Shawn Rice 创建的工作流和主题</li></ul><blockquote><p>注意: 你发现许多工作流可能是通过 Alfred 2 创建的。它们也应该可以在 Alfred 3 中导入并正常使用。但通过 Alfred  3 创建的工作流不向后兼容 Alfred 2。</p></blockquote><p>如果你没有找到你想要的，你可以 Google 搜索一下，许多用户选择在 GitHub 和个人网站上托管自己的工作流。</p><h2 id="创建自己的工作流"><a href="#创建自己的工作流" class="headerlink" title="创建自己的工作流"></a>创建自己的工作流</h2><p>在 Alfred 偏向设置选项工作流中，你可以看见左侧边栏右下角有一个 <code>[+]</code> 按钮，这是你创建新工作流的起点。</p><p>完整的功能 <strong>示例</strong> 向你展示不同类型的工作流如何工作，从简单的像 “Should I watch this movie?” ，到基于列表或基于脚本用于展示在线结果的工作流（例如 Google 建议和 Amazon 建议）。</p><p><strong>模板</strong> 提供了工作流画布的起点，模板可以预先填充你的工作流画布，以便你可以填补空白。</p><p>如果你希望从 <strong>空白工作流</strong> 开始，选择最下面的 “Blank Workflow”，然后右键单击画布任何区域选择你要加入工作流中的组件。</p><p>你随时可以在 Alfred 偏好设置中通过点击组件设置左下角的问号图标来寻找帮助。最重要的是，玩得开心。</p><h2 id="充分利用工作流"><a href="#充分利用工作流" class="headerlink" title="充分利用工作流"></a>充分利用工作流</h2><p>一旦你掌握了工作流的基础用法，你会发现很多改进工作流的方法，从简单的整理到和与其他 Alfred 用户分享，到使用变量和脚本来创建高级工作流。</p><ul><li><a href="https://www.alfredapp.com/help/workflow/organising-workflows/" target="_blank" rel="noopener">通过类型和默认来整理脚本</a></li><li><a href="https://www.alfredapp.com/help/workflows/advanced/sharing-workflows" target="_blank" rel="noopener">导出和分享脚本</a></li><li><a href="https://www.alfredapp.com/help/troubleshooting/workflows/" target="_blank" rel="noopener">工作流的故障排除</a></li><li><a href="https://www.alfredapp.com/help/workflows/utilities/debug/" target="_blank" rel="noopener">使用工作流的调试程序</a></li></ul><h2 id="高级工作流主题"><a href="#高级工作流主题" class="headerlink" title="高级工作流主题"></a>高级工作流主题</h2><ul><li><a href="https://www.alfredapp.com/help/workflows/advanced/variables/" target="_blank" rel="noopener">在工作流中设置变量</a></li><li><a href="https://www.alfredapp.com/help/workflows/script-environment-variables/" target="_blank" rel="noopener">脚本环境变量</a></li><li><a href="https://www.alfredapp.com/help/workflows/advanced/alternative-actions/" target="_blank" rel="noopener">在工作流中使用替代动作</a></li><li><a href="https://www.alfredapp.com/help/workflows/inputs/script-filter/" target="_blank" rel="noopener">使用脚本过滤器对象</a></li></ul><p>在工作流方面需要帮助？在 <a href="https://www.alfredforum.com/" target="_blank" rel="noopener">Alfred 论坛</a> 和创作者沟通并寻找你问题的答案吧。:)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译 Alfred 官网 的 &lt;a href=&quot;https://www.alfredapp.com/help/workflows/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Workflows 帮助&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用工作流（workflows）扩展 Alfred 并以自己的方式完成工作，通过工作流替代重复性操作或基于鼠标的操作，你将提高你的工作效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2019-12-19-135613.jpg&quot; alt=&quot;To-Do List Example Workflow&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Software &amp; Website" scheme="https://depp.wang/categories/Software-Website/"/>
    
    
      <category term="Alfred" scheme="https://depp.wang/tags/Alfred/"/>
    
      <category term="Workflows" scheme="https://depp.wang/tags/Workflows/"/>
    
  </entry>
  
</feed>
